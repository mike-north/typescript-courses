{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/09-type-queries/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"0ee68ffe-0d99-56a7-b42d-1816bb2b20ee","excerpt":"Type queries allow us to obtain type information from values, which is an incredibly important capability — particularly when working with libraries that may…","html":"<p>Type queries allow us to obtain type information from values, which is an incredibly important capability — particularly when working with libraries that may not expose type information in a way that’s most useful for you</p>\n<h2 id=\"keyof\" style=\"position:relative;\"><a href=\"#keyof\" aria-label=\"keyof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>keyof</code></h2>\n<p>The <code>keyof</code> type query allows us to obtain type representing all property keys on a given interface</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' style='border-bottom: solid 2px lightgrey;'>DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type DatePropertyNames = keyof Date</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAFATge0i0A5OBbCAZygF4oBrCENAM1gQgCgB6Zqd9gPQH4g'>Try</a></div></pre>\n<p>Not all keys are <code>string</code>s, so we can separate out those keys that are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/symbol\"><code>symbol</code></a>s and those that are <code>string</code>s using the intersection operator (<code>&#x26;</code>).</p>\n<p>If you remember your geometry, <strong>it may be useful to think of this as kind of like a dot product</strong>, in that when we use the intersection operator, we’re left only with the sub-part of the <code>keyof Date</code> that also is included by <code>string</code> or <code>symbol</code>, respectively.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateStringPropertyNames = \"toString\" | \"toDateString\" | \"toTimeString\" | \"toLocaleString\" | \"toLocaleDateString\" | \"toLocaleTimeString\" | \"valueOf\" | \"getTime\" | \"getFullYear\" | \"getUTCFullYear\" | ... 33 more ... | \"getVarDate\"' style='border-bottom: solid 2px lightgrey;'>DateStringPropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>type DateStringPropertyNames = \"toString\" | \"toDateString\" | \"toTimeString\" | \"toLocaleString\" | \"toLocaleDateString\" | \"toLocaleTimeString\" | \"valueOf\" | \"getTime\" | \"getFullYear\" | \"getUTCFullYear\" | ... 33 more ... | \"getVarDate\"</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateSymbolPropertyNames = typeof Symbol.toPrimitive' style='border-bottom: solid 2px lightgrey;'>DateSymbolPropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">symbol</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>type DateSymbolPropertyNames = typeof Symbol.toPrimitive</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAFATge0i0A5OBbCAZygF4oBrCENAM1gQgChHRJ7EBlYFASwDsA5qgwQsIXAWJl4iYZhz4iUAGRRC3fgMYB6bVH1QAegH4W4aDIgcQeAEZoANnNELJpdsnTzxi4qsI29g46egYmQA'>Try</a></div></pre>\n<p>Interesting! this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a> property is the only non-string. <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h2 id=\"typeof\" style=\"position:relative;\"><a href=\"#typeof\" aria-label=\"typeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>typeof</code></h2>\n<p>The <code>typeof</code> type query allows you to extract a type from a value. An example is shown below</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const apiResponse: [Response, string]' >apiResponse</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) PromiseConstructor.all&lt;[Promise&lt;Response>, Promise&lt;string>]>(values: [Promise&lt;Response>, Promise&lt;string>]): Promise&lt;[Response, string]> (+1 overload)' >all</data-lsp></span><span style=\"color: #24292F\">([</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) PromiseConstructor.resolve&lt;string>(value: string): Promise&lt;string> (+2 overloads)' >resolve</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Titanium White\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  ])</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ApiResponseType = [Response, string]' style='border-bottom: solid 2px lightgrey;'>ApiResponseType</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const apiResponse: [Response, string]' >apiResponse</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type ApiResponseType = [Response, string]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/IYZwngdgxgBAZgV2gFwJYHsIwLbFRACgEoYBvAKBhikxGRmAAdUAlAUxEdrZgF4GA7nnoAFAE7psqEGwB0wADYKCAbUpV4bZFAAWBAEQ7kyRiABcAegtsAHsGyMFcmtn1EANOqrjJ0uWI50BQA3NgMAFVRkYAhUBGwYAHUdKLY3TyoAXSJydWQwRh4AQWZ2Tm5wgp5+fML0OAZSji4IGXUrDRgAPQB+cgBfIA'>Try</a></div></pre>\n<p>A common use of <code>typeof</code> is to obtain a type representing the “static site” of a class (meaning: constructor, <code>static</code> properties, and other things not present on an <em>instance</em> of the class)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const MyAjaxConstructor: {&#10;    new (): CSSRule;&#10;    prototype: CSSRule;&#10;    readonly STYLE_RULE: 1;&#10;    readonly CHARSET_RULE: 2;&#10;    readonly IMPORT_RULE: 3;&#10;    readonly MEDIA_RULE: 4;&#10;    readonly FONT_FACE_RULE: 5;&#10;    readonly PAGE_RULE: 6;&#10;    ... 5 more ...;&#10;    readonly FONT_FEATURE_VALUES_RULE: 14;&#10;}' style='border-bottom: solid 2px lightgrey;'>MyAjaxConstructor</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var CSSRule: {&#10;    new (): CSSRule;&#10;    prototype: CSSRule;&#10;    readonly STYLE_RULE: 1;&#10;    readonly CHARSET_RULE: 2;&#10;    readonly IMPORT_RULE: 3;&#10;    readonly MEDIA_RULE: 4;&#10;    readonly FONT_FACE_RULE: 5;&#10;    readonly PAGE_RULE: 6;&#10;    ... 5 more ...;&#10;    readonly FONT_FEATURE_VALUES_RULE: 14;&#10;}' >CSSRule</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>const MyAjaxConstructor: {\n    new (): CSSRule;\n    prototype: CSSRule;\n    readonly STYLE_RULE: 1;\n    readonly CHARSET_RULE: 2;\n    readonly IMPORT_RULE: 3;\n    readonly MEDIA_RULE: 4;\n    readonly FONT_FACE_RULE: 5;\n    readonly PAGE_RULE: 6;\n    ... 5 more ...;\n    readonly FONT_FEATURE_VALUES_RULE: 14;\n}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var CSSRule: {&#10;    new (): CSSRule;&#10;    prototype: CSSRule;&#10;    readonly STYLE_RULE: 1;&#10;    readonly CHARSET_RULE: 2;&#10;    readonly IMPORT_RULE: 3;&#10;    readonly MEDIA_RULE: 4;&#10;    readonly FONT_FACE_RULE: 5;&#10;    readonly PAGE_RULE: 6;&#10;    ... 5 more ...;&#10;    readonly FONT_FEATURE_VALUES_RULE: 14;&#10;}' >CSSRule</data-lsp>.</span><span style=\"color: #0550AE\"><data-lsp lsp='(property) STYLE_RULE: 1' style='border-bottom: solid 2px lightgrey;'>STYLE_RULE</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(property) STYLE_RULE: 1</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myAjax: CSSRule' style='border-bottom: solid 2px lightgrey;'>myAjax</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var CSSRule: new () => CSSRule' >CSSRule</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myAjax: CSSRule</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAsgTwIICsCGAPAwuaAnAV2ChDxgF4YsBlagJQIBsBTAKAHp2ZufuA9APysa9JswB01ACoBNADIBRAPp0Aqoo5dePQa1CRYAW2ToMFGGGYB3KrQYsAFAEpN2wUA'>Try</a></div></pre>\n<p><code>MyAjaxConstructor</code>, the class (constructor) is of type <code>typeof CSSRule</code>, where instances are of type <code>CSSRule</code></p>\n<h2 id=\"indexed-access-types\" style=\"position:relative;\"><a href=\"#indexed-access-types\" aria-label=\"indexed access types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexed Access Types</h2>\n<p>Indexed Access types provide a mechanism for retrieving part(s) of an array or object type via indices. We’ll look at how this kind of type works, and a couple of practical examples of where you might use them.</p>\n<p>At the simplest level, <strong>these kinds of types are all about <em>accessing</em> some part of another type, via <em>an index</em></strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.color: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) red: string' >red</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) green: string' >green</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) blue: string' >blue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColor: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carColor</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let carColor: {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjns52EMMgQZUchRXRQA2gBEsvJQAQC6OAD0kSrIAHoA-EA'>Try</a></div></pre>\n<p>In this situation <code>'color'</code> is the “index”.</p>\n<p>The index you use <em>must</em> be a valid “key” you could use on a value of type <code>Car</code>. Below you can see what happens if you try to break this rule:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColor: any' >carColor</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\"><data-err>&quot;not-something-on-car&quot;</data-err></span><span style=\"color: #24292F\">]</span></div><span class=\"error\"><span>Property 'not-something-on-car' does not exist on type 'Car'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'not-something-on-car' does not exist on type 'Car'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQBhC6UAb11FAFsKBrSVRYtCIBzNpzgATSABt+gkWICekRqkIBXDgCMYYqnGkJUrdu2iQJcoYVGnQw85EJWFdrdPV9QA67dABfXECQMABacKp1YnDQ3GlIYlAqRjoDI3pGAG0AIkI4aMQ4DgSACxFQuEJQ5OhsgF0gA'>Try</a></div></pre>\n<p>You can also reach deeper into the object through multiple “accesses”</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColorRedComponent: string' style='border-bottom: solid 2px lightgrey;'>carColorRedComponent</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\">][</span><span style=\"color: #0A3069\">\"red\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>let carColorRedComponent: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAxUOQUAJXVQggAHJhADMAp0KABtACJZeSh0gF0MtRY8nBcVZAA9AH4gA'>Try</a></div></pre>\n<p>…and <strong>you can pass or “project” a union type (<code>|</code>) through <code>Car</code> as an index, as long as all parts of the union type are <em>each</em> a valid index</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carProperty: number | {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carProperty</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let carProperty: number | {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAwABSgmAAdoMH4KdCgAbQAiWXkoJOQAH2QkwQwkgF0cFxVkAD0AfiA'>Try</a></div></pre>\n<h2 id=\"use-case-the-type-registry-pattern\" style=\"position:relative;\"><a href=\"#use-case-the-type-registry-pattern\" aria-label=\"use case the type registry pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use case: the “type registry” pattern</h2>\n<p>We’re going to touch on one concept we haven’t talked about yet, but we can use a basic definition for the purpose of understanding this example.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./lib/registry\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>This is called a <strong>module declaration</strong>, and it allows us to effectively <strong>layer types on top of things already exported by a module <code>./lib/registry.ts</code></strong>. Remember, there’s only one definition of the types exported by <code>./lib/registry.ts</code>, so if we modify them using a module declaration, that modification will affect <em>every place where its types are used</em>.</p>\n<p>Now, let’s use <code>keyof</code>, module declarations and what we just learned about open interfaces to solve a problem.</p>\n<p>Imagine we’re building a data library for a web applications. Part of this task involves building a function that fetches different types of records from a user’s API. We want to be able to retrieve a record by the name of the kind of record and its ID, <strong>but as the builders of the library, we don’t know the specific types that any given user will need</strong>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Assumption -- our user has set up resources like Book and Magazine</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">// returns a Book</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"bk_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\">// returns a Magazine</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"mz_456\"</span><span style=\"color: #24292F\">)</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">// maybe should refuse to compile</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"blah\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">)</span></div></code></div></pre>\n<p>Our project might have a file structure like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">data</span><span style=\"color: #CF222E\">/</span></div><div class='line'><span style=\"color: #24292F\">  book.ts       </span><span style=\"color: #6E7781\">// A model for Book records</span></div><div class='line'><span style=\"color: #24292F\">  magazine.ts   </span><span style=\"color: #6E7781\">// A model for Magazine records</span></div><div class='line'><span style=\"color: #24292F\">lib</span><span style=\"color: #CF222E\">/</span></div><div class='line'><span style=\"color: #24292F\">  registry.ts   </span><span style=\"color: #6E7781\">// Our type registry, and a `fetchRecord` function</span></div><div class='line'><span style=\"color: #24292F\">index.ts        </span><span style=\"color: #6E7781\">// Entry point</span></div></code></div></pre>\n<p>Let’s focus on that first argument of the <code>fetchRecord</code> function. We can create a “registry” interface that any consumer of this library can use to “install” their resource types, and define the <code>fetchRecord</code> function using our new <code>keyof</code> type query.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: lib/registry.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// empty by design</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// the \"& string\" is just a trick to get</span></div><div class='line'><span style=\"color: #6E7781\">// a nicer tooltip to show you in the next step</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: never' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKW0BGwAneAc2gGcAXAgTwDoKyAoeADwAcB7Ai0aRC+AUjIAxvFAARZBWQAVam3gAlEuSrVGAb0agQoeKjYVqoXCYAm8MtGKJGAX0Z6KAC3EAiAGShKBPsXdeMlAAKwBXSlBkUCpoEQBrGI5QYngKJzBoxDjBJI5YCmg2JJ8XDgB3UGoOMN5EGLdQRFYeSng2ZnYuHkgwxBFCjnrINJEXFREucwAKZAJiLHj4ashJaTkFZVVfE29ffwAaXnMsfcRiAEpQbXsgA'>Try</a></div></pre>\n<p>Now let’s focus our attention toward “app code”. We’ll define classes for <code>Book</code> and <code>Magazine</code> and “register” them with the <code>DataTypeRegistry</code> interface</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: data/book.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Book' >Book</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Book.deweyDecimalNumber(): number' >deweyDecimalNumber</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">42</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"../lib/registry\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataTypeRegistry.book: Book' >book</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Book' >Book</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// @filename: data/magazine.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Magazine' >Magazine</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Magazine.issueNumber(): number' >issueNumber</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">42</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"../lib/registry\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataTypeRegistry.magazine: Magazine' >magazine</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Magazine' >Magazine</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAggGYCWANpAHYCGAtpKiUQEbDSQDmRiALtAJ4B0XRDkgAPAA4IuoIuS4wClAMaRQAEUpdKAFV7jIAJXacevHAG8cofJGriuvUI0cATSIiJtyOAL54wXAAWqgBEAGSg3NCybCEyiKAAVgCu3KCUoDxESgDWmXCgbJBc-umg5Nkw+XAkXETi+ZGBcADuoLxwyTLkmcHlYtLckOIiElKgBMnkSnVwPQTFSoFGSgguABSU0GyoOZAdBOqaOnqGxlGOEVExADQyLqjX5GwAlKCWfiBgALS-SslcX7fUrgYhkKi0VAuY7ARhwOA5QTCMSSaDSJQkSiIBIAIXheUsoFAbha+zUkCURGolBIADlktRGDB1i9UOQGUzoO8rETQKwuMloD0ACy4Il+PxuDFbVTUOAuZJkUAhfj8YAMZisDgXOKE0Ao8ayeTQRQqI5aXT6Iza0zc3lOfGoPEInkSnDu-Cg0gUGh0Ykw6lsSgAL1kkCRo1R6Mx2NAAFlKEHQ+RVHrOIhkpB6YzmazyhyqnqifzBSKxaA3TgpZjWKA5QqlSq1RqWOdTLqeQa0d1jabVBoLadrSY+HbeYGQ2HUAmk2HXb4gA'>Try</a></div></pre>\n<p>Now look what happens to the first argument of that <code>fetchRecord</code> function! it’s <code>\"book\" | \"magazine\"</code> despite the library having absolutely nothing in its code that refers to these concepts by name!</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) interface DataTypeRegistry&#10;import DataTypeRegistry' >DataTypeRegistry</data-lsp>, <data-lsp lsp='(alias) function fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp> } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;./lib/registry&apos;</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' style='border-bottom: solid 2px lightgrey;'>fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"bk_123\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>(alias) fetchRecord(arg: keyof DataTypeRegistry & string, id: string): void\nimport fetchRecord</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAggGYCWANpAHYCGAtpKiUQEbDSQDmRiALtAJ4B0XRDkgAPAA4IuoIuS4wClAMaRQAEUpdKAFV7jIAJXacevHAG8cOAL54wXABaqARADJQ3aLLbOZiUABWAK7coJSgPERKANYRcKBskNKOqlxwcCRcROJxoKzkACYwoCHeoAzy0JQkEXqQwmKS0NIEQeRKWXDkoARJSg5GSggFABSU0Gyo0ZC8cATqmjp1RhyevKDunt4ANDIFqFvkbACUoJY2doSkFDR0oAWLwIzp0YINElKgSiSUiP4AQi8zjhQPdIAB3GZqSBKIjUaoAOSC1EYMBGx1Q5GRqOgwNBoNYXCC0G6ABZcKDbLYit9xqpqHACkEyKBnPx+MAGMxWKtTL5LKDGp9ZJVFCoFlpdPoViY+Hj8c84NFUIClSDQFSrJdwMQyFRaKgHlpgPC2JQAF6ySBvEQfZpfH5-UAAWUoZst5FUAr8iCCkCRKLRGNAWMDuO9BKSxLJFI1FxwNJ+rFADKZLLZHK5LGMa356qF9pFCmUqg0kuWOdM8tBpotVtQrvdVvVmpAYAAtJ2lEEuJ329rdTcDTJCmIbXCmtJzBKltLK3xdr0uP1BsMNT14NRQAByTNMbO8vjbrVLlcw4YjZyK6LOXZX6IAfQAjJhnMdLqAAHoAfiAA'>Try</a></div></pre>\n<p>Obviously there are other things we’d need to build other parts of what we’d need for a <code>fetchRecord</code> function. Don’t worry! We’ll come back once we’ve learned a few more things that we need!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>If you’re curious about this property, try running the following in your terminal <code>node -e \"console.log(new Date()[Symbol.toPrimitive]('string'))\"</code></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#keyof\"><code>keyof</code></a></li>\n<li><a href=\"#typeof\"><code>typeof</code></a></li>\n<li><a href=\"#indexed-access-types\">Indexed Access Types</a></li>\n<li><a href=\"#use-case-the-type-registry-pattern\">Use case: the “type registry” pattern</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/09-type-queries/"},"frontmatter":{"title":"Type Queries","course":"fundamentals-v4","date":"June 10, 2021","description":"Type queries allow us to obtain type information in different ways from existing types and values \n"}}},"pageContext":{"slug":"/course/fundamentals-v4/09-type-queries/","title":"Type Queries","course":"fundamentals-v4","order":9,"previous":{"fields":{"slug":"/course/fundamentals-v4/08-exercise-json-types/"},"frontmatter":{"title":"JSON types","order":8,"course":"fundamentals-v4","isExercise":true}},"next":{"fields":{"slug":"/course/fundamentals-v4/10-callables/"},"frontmatter":{"title":"Callables and Constructables","order":10,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}