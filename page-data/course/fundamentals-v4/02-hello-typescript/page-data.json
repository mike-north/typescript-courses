{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/02-hello-typescript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"4b2291a8-9243-5ac4-87d3-ca9ae02dcadc","excerpt":"In this chapter we will… Get hands-on with our first TypeScript program and the\ncompiler CLI command Learn how the compiler-emitted JS code changes depending on…","html":"<p>In this chapter we will…</p>\n<ul>\n<li>Get hands-on with our first TypeScript program and the\ncompiler CLI command</li>\n<li>Learn how the compiler-emitted JS code changes depending on JS language level and module type</li>\n<li>Examine a simple program’s compiled output, including the <em>type declaration file</em></li>\n</ul>\n<h2 id=\"anatomy-of-the-project\" style=\"position:relative;\"><a href=\"#anatomy-of-the-project\" aria-label=\"anatomy of the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Anatomy of the project</h2>\n<p>Let’s consider <a href=\"https://github.com/mike-north/typescript-courses/blob/main/packages/welcome-to-ts/\"><code>a very simple TypeScript project</code></a>\nthat consists of only three files:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">package.json   </span><span style=\"color: #6E7781\"># Package manifest</span></div><div class='line'><span style=\"color: #24292F\">tsconfig.json  </span><span style=\"color: #6E7781\"># TypeScript compiler settings</span></div><div class='line'><span style=\"color: #24292F\">src/index.ts   </span><span style=\"color: #6E7781\"># \"the program\"</span></div></code></div></pre>\n<p>This project can be found in the <code>packages/welcome-to-ts</code> folder, within the workshop repo</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> packages/welcome-to-ts</span></div></code></div></pre>\n<p><code>package.json</code>\n<a href=\"https://github.com/mike-north/typescript-courses/blob/main/packages/welcome-to-ts/package.json\">(view source)</a> <br /></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"name\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"welcome-to-ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"license\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"NOLICENSE\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"devDependencies\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"typescript\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"^5.2.0\"</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"scripts\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"dev\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"tsc --watch --preserveWatchOutput\"</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>Note that…</p>\n<ul>\n<li>We just have one dependency in our package.json: <code>typescript</code>.</li>\n<li>\n<p>We have a <code>dev</code> script (this is what runs when you invoke <code>yarn dev-welcome-to-ts</code> from the project root)</p>\n<ul>\n<li>It runs the TypeScript compiler in “watch” mode (watches for source changes, and rebuilds automatically).</li>\n</ul>\n</li>\n</ul>\n<p>The following is just about the simplest possible <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">config file</a> for the TS compiler:</p>\n<p><code>tsconfig.json</code>\n<a href=\"https://github.com/mike-north/typescript-courses/blob/main/packages/welcome-to-ts/tsconfig.json\">(view source)</a> <br /></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"compilerOptions\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"outDir\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dist\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// where to put the TS files</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"target\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"ES2015\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// JS language level (as a build target)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"moduleResolution\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"Node\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// Find cjs modules in node_modules</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"include\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\"src\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #6E7781\">// which files to compile</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>All of these things could be specified on the command line (e.g., <code>tsc --outDir dist</code>), but particularly as\nthings get increasingly complicated, we’ll benefit a lot from having this config file:</p>\n<p>Finally, we have a relatively simple and pointless TypeScript program. It does\nhave <strong>a few interesting things in it that should make changes to the <code>\"target\"</code>\nproperty in our <code>tsconfig.json</code> more obvious</strong>:</p>\n<ul>\n<li>Use of a built in <code>Promise</code> constructor (introduced in ES2015)</li>\n<li>Use of <code>async</code> and <code>await</code> (introduced in ES2017)</li>\n<li>Use of a <code>static</code> private class field (introduced in ES2022)</li>\n</ul>\n<p>Here is the original (TypeScript) source code that we aim to compile:</p>\n<p><code>src/index.ts</code>\n<a href=\"https://github.com/mike-north/typescript-courses/blob/main/packages/welcome-to-ts/src/index.ts\">(view source)</a> <br /></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Create a promise that resolves after some time</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">n</span><span style=\"color: #6E7781\"> number of milliseconds before promise resolves</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function timeout(n: number): Promise&lt;unknown>' >timeout</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&lt;unknown>' >Promise</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) res: (value: unknown) => void' >res</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) res: (value: unknown) => void' >res</data-lsp>, <data-lsp lsp='(parameter) n: number' >n</data-lsp>))</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Add two numbers</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">a</span><span style=\"color: #6E7781\"> first number</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">b</span><span style=\"color: #6E7781\"> second</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function addNumbers(a: number, b: number): Promise&lt;number>' >addNumbers</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function timeout(n: number): Promise&lt;unknown>' >timeout</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#bar</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Foo.getValue(): number' >getValue</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='class Foo' >Foo</data-lsp>.#bar</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">//== Run the program ==//</span></div><div class='line'><span style=\"color: #24292F\">;(</span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function addNumbers(a: number, b: number): Promise&lt;number>' >addNumbers</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='class Foo' >Foo</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Foo.getValue(): number' >getValue</data-lsp></span><span style=\"color: #24292F\">(), </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">))</span></div><div class='line'><span style=\"color: #24292F\">})()</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhhAnApgQwC6MsyAHeB7AWwEsBnDVACzUiRLwBsA3REzAM3XkjoPKN6gwAAtmTxkBSADtpAVwIAjRFzxtIxevVKIAxnikATVkrZ4kOfMTI0WDZiUHBwbWVJ2oi+yB955ZqAAopAC45RWUASkgAbygbVFl4GSlEAHdIAAVLbQCA2iiAXgA+bkRUABV+RD9A2gAaaQiI8ABfcHBQCGhIAEEDA29UvDCleAdukTEJTEg2IjHUEeVBSEnxSQVSvUNHcEQAD2wzReQSAE83Wdd3TxlkfoA5eVGSAORQqWflBoUPr-gorFIJhUsgiIsfNV-AEAKwABjhzWBSASSRmAGpIApWu0dPRTqwAGJ4YZA7ioNBEHSQADECjEkAKkAAzHESBSPNSAOZlABqyHoskQAUBcWRZUSMmJeAAdHSxHE2m0OsACkyAEqubwUDC4PBc9aMgrAJwAbje50uIsZJTJ2zo9EQMvo+reoPBmEe-1e0plPNQ-MFwoiDQALE1WhERUA'>Try</a></div></pre>\n<p>Note that when you hover over certain code points on this website, you get\nthe equivalent of a “VScode tooltip”. <strong>This is one of our most important\ntools for learning about how TypeScript understands our code!</strong></p>\n<p><img src=\"/636499e3abb0c1ae63a33e6bdf6a021f/cursor-tooltip-ts.gif\" alt=\"cursor hovering\"></p>\n<h2 id=\"running-the-compiler\" style=\"position:relative;\"><a href=\"#running-the-compiler\" aria-label=\"running the compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running the compiler</h2>\n<p>From within the <code>packages/welcome-to-ts</code> folder of <a href=\"https://github.com/mike-north/typescript-courses/\">the git repo</a>, you can run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">tsc</span></div></code></div></pre>\n<p>to build the project. Alternatively, from within the same folder, you can run this command to start a task that will rebuild the project whenever you change important files.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn dev</span></div></code></div></pre>\n<p>You should see something in your terminal like:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>12:01:57 PM - Starting compilation in watch mode...</code></div></pre><!-- Note from shiki-twoslash: the language log was not set up for Shiki to use, and so there is no code highlighting -->\n<p>Note that within the “welcome-to-ts” project</p>\n<ul>\n<li>a <code>./dist</code> folder has appeared,</li>\n<li>inside it is an <code>index.js</code> file.</li>\n</ul>\n<p>Open this file — <strong>it will be a mess</strong></p>\n<details>\n  <summary>Click here to see what the compiled output looks like</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> <data-lsp lsp='var __awaiter: (thisArg: any, _arguments: any, P: any, generator: any) => any' >__awaiter</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='any' >__awaiter</data-lsp>) </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) thisArg: any' >thisArg</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _arguments: any' >_arguments</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) P: any' >P</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) generator: any' >generator</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) adopt(value: any): any' >adopt</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) value: any' >value</data-lsp></span><span style=\"color: #24292F\">) { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) value: any' >value</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) P: any' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) value: any' >value</data-lsp> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) P: any' >P</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) resolve: any' >resolve</data-lsp></span><span style=\"color: #24292F\">) { </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) resolve: any' >resolve</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) value: any' >value</data-lsp>); }); }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='(parameter) P: any' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='(parameter) P: any' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">))(</span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) resolve: any' >resolve</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) reject: any' >reject</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) fulfilled(value: any): void' >fulfilled</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) value: any' >value</data-lsp></span><span style=\"color: #24292F\">) { </span><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> { </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) step(result: any): void' >step</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) generator: any' >generator</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >next</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) value: any' >value</data-lsp>)); } </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (<data-lsp lsp='(local var) e: unknown' >e</data-lsp>) { </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) reject: any' >reject</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(local var) e: unknown' >e</data-lsp>); } }</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) rejected(value: any): void' >rejected</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) value: any' >value</data-lsp></span><span style=\"color: #24292F\">) { </span><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> { </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) step(result: any): void' >step</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) generator: any' >generator</data-lsp>[</span><span style=\"color: #0A3069\">\"throw\"</span><span style=\"color: #24292F\">](<data-lsp lsp='(parameter) value: any' >value</data-lsp>)); } </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (<data-lsp lsp='(local var) e: unknown' >e</data-lsp>) { </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) reject: any' >reject</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(local var) e: unknown' >e</data-lsp>); } }</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) step(result: any): void' >step</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) result: any' >result</data-lsp></span><span style=\"color: #24292F\">) { <data-lsp lsp='(parameter) result: any' >result</data-lsp>.<data-lsp lsp='any' >done</data-lsp> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) resolve: any' >resolve</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) result: any' >result</data-lsp>.<data-lsp lsp='any' >value</data-lsp>) </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) adopt(value: any): any' >adopt</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) result: any' >result</data-lsp>.<data-lsp lsp='any' >value</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >then</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(local function) fulfilled(value: any): void' >fulfilled</data-lsp>, <data-lsp lsp='(local function) rejected(value: any): void' >rejected</data-lsp>); }</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) step(result: any): void' >step</data-lsp></span><span style=\"color: #24292F\">((<data-lsp lsp='(parameter) generator: any' >generator</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) generator: any' >generator</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >apply</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) thisArg: any' >thisArg</data-lsp>, <data-lsp lsp='(parameter) _arguments: any' >_arguments</data-lsp> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> [])).</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >next</data-lsp></span><span style=\"color: #24292F\">());</span></div><div class='line'><span style=\"color: #24292F\">    });</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> <data-lsp lsp='var __classPrivateFieldGet: (receiver: any, state: any, kind: any, f: any) => any' >__classPrivateFieldGet</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='any' >__classPrivateFieldGet</data-lsp>) </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) receiver: any' >receiver</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) state: any' >state</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) kind: any' >kind</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) f: any' >f</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) kind: any' >kind</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) f: any' >f</data-lsp>) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var TypeError: TypeErrorConstructor&#10;new (message?: string) => TypeError (+1 overload)' >TypeError</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Private accessor was defined without a getter\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) state: any' >state</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"function\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) receiver: any' >receiver</data-lsp> </span><span style=\"color: #CF222E\">!==</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) state: any' >state</data-lsp> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) f: any' >f</data-lsp> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) state: any' >state</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >has</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) receiver: any' >receiver</data-lsp>)) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var TypeError: TypeErrorConstructor&#10;new (message?: string) => TypeError (+1 overload)' >TypeError</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Cannot read private member from an object whose class did not declare it\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) kind: any' >kind</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"m\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) f: any' >f</data-lsp> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) kind: any' >kind</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) f: any' >f</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >call</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) receiver: any' >receiver</data-lsp>) </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) f: any' >f</data-lsp> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) f: any' >f</data-lsp>.<data-lsp lsp='any' >value</data-lsp> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) state: any' >state</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >get</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) receiver: any' >receiver</data-lsp>);</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> <data-lsp lsp='var _a: any' >_a</data-lsp>, <data-lsp lsp='var _Foo_bar: any' >_Foo_bar</data-lsp>;</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Create a promise that resolves after some time</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">n</span><span style=\"color: #6E7781\"> number of milliseconds before promise resolves</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function timeout(n: any): Promise&lt;any>' >timeout</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;any>(executor: (resolve: (value: any) => void, reject: (reason?: any) => void) => void) => Promise&lt;any>' >Promise</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) res: (value: any) => void' >res</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) res: (value: any) => void' >res</data-lsp>, <data-lsp lsp='(parameter) n: any' >n</data-lsp>));</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Add two numbers</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">a</span><span style=\"color: #6E7781\"> first number</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">b</span><span style=\"color: #6E7781\"> second</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function addNumbers(a: any, b: any): any' >addNumbers</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var __awaiter: (thisArg: any, _arguments: any, P: any, generator: any) => any' >__awaiter</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">function*</span><span style=\"color: #24292F\"> () {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">yield</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function timeout(n: any): Promise&lt;any>' >timeout</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: any' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: any' >b</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\">    });</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Foo.getValue(): any' >getValue</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var __classPrivateFieldGet: (receiver: any, state: any, kind: any, f: any) => any' >__classPrivateFieldGet</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='var _a: any' >_a</data-lsp>, <data-lsp lsp='var _a: any' >_a</data-lsp>, </span><span style=\"color: #0A3069\">\"f\"</span><span style=\"color: #24292F\">, <data-lsp lsp='var _Foo_bar: any' >_Foo_bar</data-lsp>); }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var _a: any' >_a</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Foo' >Foo</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var _Foo_bar: any' >_Foo_bar</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) value: number' >value</data-lsp>: </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\"> };</span></div><div class='line'><span style=\"color: #6E7781\">//== Run the program ==//</span></div><div class='line'><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var __awaiter: (thisArg: any, _arguments: any, P: any, generator: any) => any' >__awaiter</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">function*</span><span style=\"color: #24292F\"> () {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">yield</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function addNumbers(a: any, b: any): any' >addNumbers</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='class Foo' >Foo</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Foo.getValue(): any' >getValue</data-lsp></span><span style=\"color: #24292F\">(), </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">));</span></div><div class='line'><span style=\"color: #24292F\">}))();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/G4QwTgBA+lIO4gJYBcCmkC8EAUyAWiAzhAGQkT5EB0M8SaYAlBAD4sQBmArgHYDGyRAHseOSoQCCYAOYAaaOGlcAtqh7JC8gArzpa9CGRCmEAN4AoCFc68Bw0SAAmQgA7JsoADZdUzUxDBUZC4wUS8fCEQeQmQQflQhDggtCAB+CHDUCAAuCB5UOGTsbn5BERxAwiFPYF8zANQqmtQPEG9fAG4IAF9GLu7La0Dg0LyCnBS2CYgsLTAhZSJfRmLbMtFsSura+UCAK1QBP0HraxK7cu5PDkRPT1RHVva-CjAAT3qY1BdsPXywQzGKj5AAe7kyjD6PQgfEMfDwODq-n2h3cnWhA1Op3O6waBwEDyePheyHenzQPz+BiMYAA2gAifDzOD0gC6ROW-RhcIR2CReNRfKh3R6JyxOPsEC+P0qXE8yBesvlVGc+TSDSatU2jTlyCoEJyECcrncSr1EKo+DUq2ut3ujl2qHxaEcwrFp2l2F++gBNJmECpvqBIBcLk8b1wBEkMnksBkKjUGlY7FprMhwNQYOwkI6Yt6ue6udAkBgfE8IEIhDmiFAaAAYohUJ5HABxIL+yNEUjkcQ0KBlitVsA1wyoBtN1tBZhTCXlbV8VA19DyGKj+QAayiDs4x1OiCS2E3PEcMwwWHpIHp3YgAEIOMwmUJCvlCgAVN4uVAAUTA8zA2HpatayyEA+AXStjAgBBiEcVAbnyE84BQPAhC4ZAjQDIIGHpPoxX3MQPwSJJVzQU9z1nHgr3SQIFyXSAbzPKVYlIqY70NG8SNQKg8AredF1qJgHzwZkxjfQifz-ACAGE4h4IR0MCJwIBcYdgIgVRlAAI3QTh5mUI1RCETTnSglDCCyAdKwgRxEBPOT0NggdAkiZAcNzU5hhCUQjxPM9z2UKjOENHyyIgC9Ao4KhYTuPi6OYXIknSSLMkNTiqD0U1Dn49BcMLcxiwUWM6yEIQoE08BcwAegAKmqyxqogKTFNIkBlL0pYKB4hTGm2RojQ4BgpQWLJBFUeqIAAARccAQH00QeBUbTIESdS7SWPgREcYhtI4YwshUhYOq2ZpCHqyrzAoihEFUVD3B4XchiCLzROSdrzK9SpmAwAA+KUglfa6EjQ7VNDyHNzAGGq6ogBqJEcE9kDgIQ8kW9BTphybpoBfTWpuMAYhRrT0HGqaZv0zS-o248zvMTMXGMdDLqcRwADlUfx7AQHkTSHqsTzRloBAUHQTtQeAIRbIgAAGeRxclmWbFKewGuzMx3WsN5G2bK6buBgBWKWpdwrFHpGBwIAAaggTT3OsfMIfMSziGK5GLA9ZjED4TDkAANTaHxVeRJ6Bf7ctKyA0dx2bNt3FgWMubCjh6SKkqyvAN0Blgf0XdzKAXbTzB6kyXIAGYeiqyrGIAJV4Tr9vmaRsdPSrzq9L7fsF+gRblk8FZ76XZYl3v5AolXeZhEQmi4zwhGkbBNYnI14bZomOZd9Kgj99ps3kAAWcHehWPogA'>Try</a></div></pre>\n</details>\n<br />\n<p>If you’re familiar with the very old <code>ES5</code> JavaScript language level, there are a few things in here that tell us we’re dealing with <code>ES2015</code>. For example, the use of the <code>yield</code> keyword, a generator <code>function*</code>, <code>class</code>es and a <code>Promise</code> constructor.</p>\n<h3 id=\"changing-target-language-level\" style=\"position:relative;\"><a href=\"#changing-target-language-level\" aria-label=\"changing target language level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing target language level</h3>\n<p>If we go to <code>welcome-to-ts/tsconfig.json</code> and change the “compilerOptions.target” property:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">    \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">        \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #82071E\">-       \"target\": \"ES2015\"</span></div><div class='line'><span style=\"color: #116329\">+       \"target\": \"ES2017\"</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">    \"include\": [\"src\"]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>Look at that <code>dist/index.js</code> file again — it’s much cleaner now! Do you notice what has changed?</p>\n<details>\n  <summary>Click here to see what the compiled output looks like</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> __classPrivateFieldGet </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.__classPrivateFieldGet) </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">receiver</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">state</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">kind</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">f</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (kind </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">f) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">TypeError</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Private accessor was defined without a getter\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> state </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"function\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> receiver </span><span style=\"color: #CF222E\">!==</span><span style=\"color: #24292F\"> state </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">f </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">state.</span><span style=\"color: #8250DF\">has</span><span style=\"color: #24292F\">(receiver)) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">TypeError</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Cannot read private member from an object whose class did not declare it\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> kind </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"m\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> f </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> kind </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> f.</span><span style=\"color: #8250DF\">call</span><span style=\"color: #24292F\">(receiver) </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> f </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> f.value </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> state.</span><span style=\"color: #8250DF\">get</span><span style=\"color: #24292F\">(receiver);</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> _a, _Foo_bar;</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Create a promise that resolves after some time</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">n</span><span style=\"color: #6E7781\"> number of milliseconds before promise resolves</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">timeout</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">n</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Promise</span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\">res</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">setTimeout</span><span style=\"color: #24292F\">(res, n));</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Add two numbers</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">a</span><span style=\"color: #6E7781\"> first number</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">b</span><span style=\"color: #6E7781\"> second</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">timeout</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> a </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> b;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Foo</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">getValue</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">__classPrivateFieldGet</span><span style=\"color: #24292F\">(_a, _a, </span><span style=\"color: #0A3069\">\"f\"</span><span style=\"color: #24292F\">, _Foo_bar);</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">_a </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> Foo;</span></div><div class='line'><span style=\"color: #24292F\">_Foo_bar </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { value: </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\"> };</span></div><div class='line'><span style=\"color: #6E7781\">//== Run the program ==//</span></div><div class='line'><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers</span><span style=\"color: #24292F\">(Foo.</span><span style=\"color: #8250DF\">getValue</span><span style=\"color: #24292F\">(), </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">));</span></div><div class='line'><span style=\"color: #24292F\">})();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKATAAwCMA7NgFRuahugDCBJPOhKg8oAA4FYaSCPTQhoAZFgAbAG4lIogGbCCoFcjmpjXHuHGE8yUADt7AV2QAjEgdg7QaVatSyAY1g7ABNtNx1YAQkpGRFlNU1Ic2BMHUc7APRUYNBs41hHdAAKO0o7ZzcCAEpQAG8uJTJHAgc7EnhQAAVY-xJi4uVagF4APkMyABVTEkKS5QAae2rqzABfTHZOblAAQRCQvPhYJ1d3ZJ3La1sxHVQCSHRTqvMIKwIbUBcJoNCUzBIAA9xFEnnhIABPTKgdKZbK5PAHABylXOxTw5VRBCWLkxZxq9UaeHgeAweRmc2KAFZ6PRVqAmugWg4xABqL7rTYBVTg7QAMVgJwaDMeQlQAVAAGIXIRQMNQABmRqi7IS0joABqeFUjn6tWFDMZzNAAtgADppYRGhsNthgMN5QAlDJ5aAiSSwIgfWwOkCYADc6Mh0OKI3GBt+KlUJDNqk96JJZMRIRR+MgxVNZvVWp1eqWABYVutqqGgA'>Try</a></div></pre>\n</details>\n<br />\n<p>Some changes to observe:</p>\n<ul>\n<li>We start to see <code>async</code> and <code>await</code></li>\n<li>We no longer see the <code>_awaiter</code> helper</li>\n</ul>\n<p>It’s starting to look more recognizable — as if <strong>the type information has just been stripped away from our original <code>.ts</code> source code</strong> in some places. There’s still some compiler-provided workarounds for the private class field, which isn’t supported in native JavaScript until ES2022.</p>\n<p>And now finally, let’s try ES2022:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">    \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">        \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #82071E\">-       \"target\": \"ES2017\"</span></div><div class='line'><span style=\"color: #116329\">+       \"target\": \"ES2022\"</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">    \"include\": [\"src\"]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<details>\n  <summary>Click here to see what the compiled output looks like</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Create a promise that resolves after some time</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">n</span><span style=\"color: #6E7781\"> number of milliseconds before promise resolves</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">timeout</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">n</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Promise</span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\">res</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">setTimeout</span><span style=\"color: #24292F\">(res, n));</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Add two numbers</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">a</span><span style=\"color: #6E7781\"> first number</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">b</span><span style=\"color: #6E7781\"> second</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">timeout</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> a </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> b;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Foo</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#bar</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">getValue</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> Foo.#bar;</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">//== Run the program ==//</span></div><div class='line'><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers</span><span style=\"color: #24292F\">(Foo.</span><span style=\"color: #8250DF\">getValue</span><span style=\"color: #24292F\">(), </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">));</span></div><div class='line'><span style=\"color: #24292F\">})();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKATAAy23YBULmoLoAwgSXuhKg8oAA4FYaSEPTQBoPpFgAbAG4lIwgGaCCoJchmpDHLuFGE8yUADtbAV2QAjEnthbQaZctTSAxrA2ACaaLlqwfGISUkKKKuqQpsCYWvY2fuiogaCZhrD26AAUNpQ2ji4EAJSgAN4cCmT2BHY2JPCgAArRviSFhYrVALwAfPpkACrGJPlFigA0tpWVmAC+mKzsnKAAgkFBOfCwDs6uiVvmltYiWqgEkOjHFaYQFgRWoE5jAcFJmCQAHqIIg88JAAJ7pUCpdKZbJ4PYAOXKp0KeFKyIICyc6JOVVq9Tw8DwGByUxmhQArPR6MtQA10E07CIANQfVbrPzKUGaABisCOdTp9wEqD8oAAxE5CKBBqAAMz1YWZMWkdAANTwynsvWqgrp9MZoD5sAAdJLCPU1mtsMBBrKAEppHLQITiWBEN7WO0gTAAblR4MhhSGoz13yUyhIJuU7tRRJJ8KCSNxkEKxpNqo1Wp1CwALEtVpVg0A'>Try</a></div></pre>\n</details>\n<h3 id=\"declaration-files\" style=\"position:relative;\"><a href=\"#declaration-files\" aria-label=\"declaration files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaration Files</h3>\n<p>You may also notice that a <code>.d.ts</code> file is generated as part of the compile process. <strong>This is known as a declaration file</strong>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Add two numbers</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">a</span><span style=\"color: #6E7781\"> first number</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">b</span><span style=\"color: #6E7781\"> second</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">a</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">&gt;;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBMFMGMBsCGAnRAXAlgewHYC5Q1kBXaAKBAgGcALLAdwFEBbDNCscNFAc2jQKMAygCYADAEYA7B2p0mrNGmiQAYhnjQCGHDAAeAOkgG0VMhQBUFsqAugAwsmjpooRKAAOyLKyqu0NOigTlRY8ABu0FRuAGbKyKChzP4YyTZ24B4oiMygOHnEzABG0AlYMaCs8PAYfrC4kNElMVhOnt6+riFhkWa2wGQxxDiwmLiEqdBYxGgAFPgFxaUAlKAA3jbB-MTI+TjQ9KAACh210LOzIasAvAB8ifwAKpPTcyEANHnLy2QAvubAKzpUAAQUgkEI9CwixKyD6GSyqFy7hiGDhaBhpWBmWyuSKD3qunSA2geg8rQxiCoAE8RqAhiMxvlEOCAHKFWFUWaIAg4DmlT5FXn85CrDagNz0RBsCbJV6zACsYjEPwlTjQO2ZoAA1KAin8AcBrtdQAAlYaEGiuLxYHhI0DGkBkADc3JpdNmN3u4tAhNCmgM8Ft3KlMpZkHZSzhswAzJ8ACzfP7LT1AA'>Try</a></div></pre>\n<p>A good way to think of TS files:</p>\n<ul>\n<li><code>.ts</code> files contain both type information and code that runs</li>\n<li><code>.js</code> files contain only code that runs</li>\n<li><code>.d.ts</code> files contain only type information</li>\n</ul>\n<p>There are other types of file extensions which have a TypeScript equivalent</p>\n<table>\n<thead>\n<tr>\n<th>File Purpose</th>\n<th>JS extension</th>\n<th>TS extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>React</td>\n<td><code>.jsx</code></td>\n<td><code>.tsx</code></td>\n</tr>\n<tr>\n<td>Native ES Modules</td>\n<td><code>.mjs</code></td>\n<td><code>.mts</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"types-of-modules\" style=\"position:relative;\"><a href=\"#types-of-modules\" aria-label=\"types of modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types of modules</h3>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS</h4>\n<p>Did you notice that the <code>export</code> keyword was still present in the build output for our program? We are generating <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015\">ES2015 modules</a> from our TypeScript source.</p>\n<p>If you tried to run this file with <code>node</code> like this:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">node packages/welcome-to-ts/dist/index.js</span></div></code></div></pre>\n<p>There’s an error!</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> async </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">addNumbers(a,</span><span style=\"color: #24292F\"> b) {</span></div><div class='line'><span style=\"color: #24292F\">^^^^^^</span></div><div class='line'><span style=\"color: #24292F\">SyntaxError: Unexpected token </span><span style=\"color: #0A3069\">'export'</span></div></code></div></pre>\n<p>It seems that, at least with most recent versions of Node.js and the way\nour project is currently set up, we can’t just run this program directly as-is.</p>\n<p>Node conventionally expects <a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS modules</a> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, so we’ll have to tell TypeScript to output\nthis kind of code.</p>\n<p>Let’s add a new property to our <code>tsconfig</code> file:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\" json=\"true\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">\"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #116329\">+   \"module\": \"CommonJS\",</span></div></code></div></pre>\n<p>Look at your <code>packages/welcome-to-ts/dist/index.js</code> one more time now. You should see\nthat the way the <code>addNumbers</code> function is exported has changed:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\"><data-lsp lsp='(alias) function addNumbers(a: any, b: any): Promise&lt;any>&#10;import addNumbers' >exports</data-lsp></span><span style=\"color: #24292F\">.<data-lsp lsp='(alias) function addNumbers(a: any, b: any): Promise&lt;any>&#10;import addNumbers' >addNumbers</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='function addNumbers(a: any, b: any): Promise&lt;any>' >addNumbers</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/IYZwngdgxgBAZgV2gFwJYHsI2AExwOQQFsAjAUwCcQAKYAGhhIEoYBvAKBmwHdhVkYaImXQJk1AKwAGKU04wKZZAgpZgMANSN2AX3YB6QzAC0pqGNPH2ZAB4AHdBWQgAdLgLFyVGAF5seQlJKECA'>Try</a></div></pre>\n<p>This is an indication that we’re emitting CommonJS modules! We could try running\nthis program with <code>node</code> one more time:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">node packages/welcome-to-ts/dist/index.js</span></div></code></div></pre>\n<p>If the program works correctly at this point, we should see it pause for a short\ntime and then print <code>7</code> to the console, before ending successfully.</p>\n<h4 id=\"es-modules\" style=\"position:relative;\"><a href=\"#es-modules\" aria-label=\"es modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Modules</h4>\n<p>Node now supports running native modules (<code>.ejs</code> files) directly! We can configure TypeScript to build this type of file. Make this change to your <code>tsconfig.json</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">   \"target\": \"ES2022\",</span></div><div class='line'><span style=\"color: #116329\">+  \"module\": \"NodeNext\",</span></div><div class='line'><span style=\"color: #82071E\">-  \"module\": \"CommonJS\",</span></div><div class='line'><span style=\"color: #82071E\">-  \"moduleResolution\": \"Node\"</span></div></code></div></pre>\n<p>Build the file again by running <code>tsc</code> while in the <code>./packages/welcome-to-ts</code> folder.</p>\n<p>Finally, run from within the same folder</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">node dist/index.js</span></div></code></div></pre>\n<p>And you should see <code>7</code> printed to the console again!</p>\n<p>CONGRATS! You’ve just compiled your first TypeScript program!</p>","tableOfContents":"<ul>\n<li><a href=\"#anatomy-of-the-project\">Anatomy of the project</a></li>\n<li>\n<p><a href=\"#running-the-compiler\">Running the compiler</a></p>\n<ul>\n<li><a href=\"#changing-target-language-level\">Changing target language level</a></li>\n<li><a href=\"#declaration-files\">Declaration Files</a></li>\n<li>\n<p><a href=\"#types-of-modules\">Types of modules</a></p>\n<ul>\n<li><a href=\"#commonjs\">CommonJS</a></li>\n<li><a href=\"#es-modules\">ES Modules</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/02-hello-typescript/"},"frontmatter":{"title":"Welcome to TypeScript","course":"fundamentals-v4","date":"October 23, 2023","description":"In this chapter, we'll get hands on with our first TypeScript program and the\ncompiler CLI command, and examine a simple program's compiled output\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/02-hello-typescript/","title":"Welcome to TypeScript","course":"fundamentals-v4","order":2,"previous":{"fields":{"slug":"/course/fundamentals-v4/01-intro/"},"frontmatter":{"title":"Intro","order":1,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","order":3,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}