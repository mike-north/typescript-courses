{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/12-type-guards/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"94c47aa2-4cd4-58c0-9149-8a07ed7eb4a9","excerpt":"Type guards, when used with control flow, allow TypeScript developers to create branches of code that have concrete assumptions, of what may be a relatively…","html":"<p>Type guards, when used with control flow, allow TypeScript developers to create branches of code that have concrete assumptions, of what may be a relatively vague type. One example we’ve already worked with is the concept of a <em>discriminated union</em>, where we took a value that could indicate either success or failure information, and used an equality check with the <em>discriminator</em> (<code>\"success\" | \"failure\"</code>), to send the successful case down one code branch, and the failing case down another</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const outcome: [\"error\", Error] | [\"success\", {\n    name: string;\n    email: string;\n}]</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp>[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"error\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const outcome: [\"error\", Error]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const outcome: [\"error\", Error]</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const outcome: [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const outcome: [\"success\", {\n    name: string;\n    email: string;\n}]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwIYE8BGBTA4tqAVQGdsAnASTGDgAoBKALgChFEAfRAbQCJyy4ZHgBpEAUTICyAXVYduPYiAgRsxYiMQBvRGFTJsjRMShkYYAOYBuRNjQwANkZNnLiAL7TtcmMES0AWVQoAAsAOjJUMAATOGQGRAA+RAAGMIBWem82NjICEDIkLjkcxEVlVXUREpydPQMjHgCYAGtsRAA5QVDNO1RHRuRW7AABbAAPfQAHB2wwiDieD2Ea2TZ3WwdSbJy8qAKimrY+SUFq0rYwbAB3cVOyWh4AFRD2hfNEByjo7GjEBEQTwAghQADIAZUQjEe9BWpTWHmY7mYAHo0YgALRYiAgKBYjHMBZgEz-XELAyIAC8KAwOHwRFIlGodHoqJRFzYAD0APzMXz+OBkuLYLgpLyUiVlfhnLJaOSCqDk7BydE8pGbbZytgKpUq9lq9xAA'>Try</a></div></pre>\n<p>If you have an extremely sharp eye, you may have noticed that we used <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#typeof-type-guards\">typeof</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#instanceof-narrowing\">instanceof</a> similarly. There’s a lot more to this topic, including ways of designing your own type guards.</p>\n<h2 id=\"built-in-type-guards\" style=\"position:relative;\"><a href=\"#built-in-type-guards\" aria-label=\"built in type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in type guards</h2>\n<p>There are a bunch of type guards that are included with TypeScript. Below is an\nillustrative example of a wide variety of them:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: Date | [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp></span><span style=\"color: #CF222E\">:</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"pineapple\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> [number]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) dateRange: [Date, Date]' >dateRange</data-lsp></span><span style=\"color: #24292F\">: [</span><span style=\"color: #0550AE\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\">] }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// instanceof</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let value: Date | [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: Date' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: Date</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// typeof</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: \"pineapple\"' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: \"pineapple\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Specific value check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: null' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: null</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Truthy/falsy check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | undefined' >value</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: undefined' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: undefined</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Some built-in functions</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ArrayConstructor.isArray(arg: any): arg is any[]' >isArray</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;}' >value</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: [number]' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: [number]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Property presence check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0A3069\">\"dateRange\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: {&#10;    dateRange: [Date, Date];&#10;}' >value</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: {&#10;    dateRange: [Date, Date];&#10;}' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: {\n    dateRange: [Date, Date];\n}</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: never' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAbghsCuIBcAoCEA+EAiMwjUwgDt5hhCt5iATEAMwEtiQbKIAiAB2ZBi66gO7ANqkAtgCMQAJwC67AN4QaeEACUYxAObIII3PgA0ONXIgBfFCgD0NiMwDOYLQGMQAe3opG9CAApYBBAHYmc3Tz9DEABKCEVCIMRCOwgAPQB+FCtUsABPLkiUEGBHEN8A-MKvaDhECABeJs5nGWZtDjiE9CSCdFTM7Nt7AGVC119GV1rgiFcACxBXAGti0vK-QLqQpoaSMmAuxO2U+0Gc+wAVGXgwebybejhHPLnFlbWyh02AQl6jnonfpnLIXCAjDziEKSeCMYBgAC0zAg9GorjAjA8YU+GwCAEEZDIYHkAHSMRwEol5LbBGIAmbJYHpUHDCAABRkHkKMnyEC4MhAZWI7jeS1WJS+FX8HFU+E0OhAHFCDNi8WOwVOzOyEAlIW6Ks15yAA'>Try</a></div></pre>\n<h2 id=\"user-defined-type-guards\" style=\"position:relative;\"><a href=\"#user-defined-type-guards\" aria-label=\"user defined type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User-defined type guards</h2>\n<p>If we lived in a world where we only had the type guards we’ve seen so far,\nwe’d quickly run into problems as our use of built-in type guards become more complex.</p>\n<p>For example, how would we validate objects that are type-equivalent with our <code>CarLike</code> interface below?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: any' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFCqRbUBO561oAwmcwDKoBrDgG9aoUPDJDilLMwYBzMROgATashlzFy-NR7FIAV3gAjFrQC+tWsmpYJZfOe7NiZAjZCgsACw4KRjyq9CSgABTKks7UrqAAZPHKWPiI1NBh0S48oAC8+aAARNCmAFbU6FiFCUnihZJC1QyOMXGJyanpmU7ZzADa9VLUhQC6eQWFsvKQCtXtdfBqGk2QLb01HWkZa7E8A4vqyKPjuUVTinO1RXo8KzttVylb3a17hTfMx-mnhcZmLIVaABKUCicRZXbMZTeAB6AH4rEA'>Try</a></div></pre>\n<p>Validating this type <em>might</em> be possible, but it would almost certainly involve casting.</p>\n<p>Even if this did work, it is getting messy enough that we’d want to refactor it out into a function or something, so that it could be reused across our codebase.</p>\n<p>Let’s see what happens when we try to do this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): any' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): any' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: any' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFCqRbUBO561oAwmcwDKoBrDgG9aoUPDJDilLMwYBzMROgATashlzFy-NR7FIAV3gAjFrQC+tWsmpYJZfOe7NiZAjZCgsACw4KRjyqtCRGkOhYqNCQoKiUrvxCABQAbhRG1AAq0FnUsu4EAJSgouLM9kbMscnK4unImTl5sqAAZG11PviI1NAkoA1NufkOALwToABE0KYAVtSRU+2d4uJTkkLLDIMZ2SOtHV1YPX0DQ-stWADaG1LUUwC6oBNj07LykArLR2vT8GoNNtYhdmqMVsdTv1do1LqNbgD1Mgni9JlMPoofqs1lM9DxgTDhlcIX8Tr1oaCDjdcfpmCjXtNjGYWFNlEUrF4wEZKIofP5QIFgvQBsl4olBNRkpJnNRXEUSmVHDLXMpvAA9AD8ViAA'>Try</a></div></pre>\n<p>As you can see, the broken/imperfect narrowing effect of this conditional has disappeared.</p>\n<blockquote>\n<p>As things stand right now, TypeScript seems to have no idea that\nthe return value of <code>isCarLike</code> has anything to do with the type of <code>valueToTest</code></p>\n</blockquote>\n<h3 id=\"value-is-foo\" style=\"position:relative;\"><a href=\"#value-is-foo\" aria-label=\"value is foo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>value is Foo</code></h3>\n<p>The first kind of user-defined type guard we will review is an <code>is</code> type guard. It is perfectly suited for our example above\nbecause it’s meant to work in cooperation with a control flow statement of some sort, to indicate that different branches\nof the “flow” will be taken based on an evaluation of <code>valueToTest</code>’s type.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): valueToTest is CarLike' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): valueToTest is CarLike' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: CarLike' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: CarLike</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJygGWAaxQbwChlkBbOPALmQGcwpQBzYsgewBMIAbauhkZiQCeEDNRABXUgCNohAL6FCXCGDJwhs9FGpwQQpQHpDyMAAsUjCRnaEYEkAjDBWIZMBrbseABQsAbnBcEhAAKqyhEHS6+oQAlNSBwWERUWoeaBjeBCxQqhJQbn4kJEkh4ZF0yABk1SwkYEIADhCsMMhlKZVqALx9yABErNIAVhBOAzV1JYPkeJOgHUHlqVW19abNre2dFWkA2gNzEAMAush9PYN8TJPrM0cc3Atuu6tq9yWNLW1LyXt0Q6kJ5cM4XfoDG4CO7TEoDEQYF5-FbdKYbb7bZFdA7w0RQMGXQaSGTQAYsOIKIwmCQ0JimCzIKw2QjAdo+DxeXAQHzkTQQbRxOLIIgkXlaDAsYzIAB6AH4FEA'>Try</a></div></pre>\n<blockquote>\n<p>What we’re seeing here is that TypeScript now understands that <strong>if <code>isCarLike</code> returns true, it’s safe to assume <code>valueToTest</code> is a <code>CarLike</code></strong></p>\n</blockquote>\n<h3 id=\"asserts-value-is-foo\" style=\"position:relative;\"><a href=\"#asserts-value-is-foo\" aria-label=\"asserts value is foo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>asserts value is Foo</code></h3>\n<p>There is another approach we could take that eliminates the need for a conditional.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function assertsIsCarLike(valueToTest: any): asserts valueToTest is CarLike' >assertsIsCarLike</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">asserts</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">      <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">    )</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">`Value does not appear to be a CarLike${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">    )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let maybeCar: any' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let maybeCar: any</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function assertsIsCarLike(valueToTest: any): asserts valueToTest is CarLike' >assertsIsCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: any' >maybeCar</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let maybeCar: CarLike' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let maybeCar: CarLike</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJygGWAaxQbwChlkBbOPALmQGcwpQBzYsgewBMIAbauhkZiQCeEDNRABXUgCNohAL6FCXCGDJwhs9FGpwQQpQHpDyMAAsUjCRnaEYEkAjDBWIZHBo1oYGgEka2th4ABQsAG5wXBIQACqsMRB0uvqEAJS6nt40yBFRsfGJasDZgbgELMAwyKEkJACENbUkudFxCXTIAGSdLE1gQgAOEKxVLfntagC808gARKzSAFYQTrNdPU0ks+R4a6A5ka0FHd29tf1DIwd5bYUA2tsUELMAusjTk3N8TGunm3OkDjcPZuMa3E4bTYXYajQ7je7bIFcV7vGazb4CX6QpqzEQYEHXI4TdZnEjQq5g45gB54qAoj5zSQyaCzM6pFjsvpmKCsADuyBAEH5AFEoDyoI0mgADABqcOQ7FYiQFrDUcAGQwwplYyFk7jQGCCEAAJPhKRN5FK2QojCYJDQmKYLMgrDZCORNBBtIRjMgAHoAfkIHi8UB8-lKIQ9Wgw7OjXowPpMgaAA'>Try</a></div></pre>\n<p>Conceptually, what’s going on behind the scenes is very similar. By using this special\nsyntax to describe the return type, we are informing TypeScript that…</p>\n<blockquote>\n<p><strong><code>assertsIsCarLike</code> will throw an error if <code>valueToTest</code> is NOT type-equivalent to <code>CarLike</code></strong>.</p>\n</blockquote>\n<p>Therefore, if we get past the assertion and keep executing code on the next line,\nthe type changes from <code>any</code> to <code>CarLike</code>.</p>\n<h3 id=\"use-with-private-field-presence-checks\" style=\"position:relative;\"><a href=\"#use-with-private-field-presence-checks\" aria-label=\"use with private field presence checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use with private <code>#field</code> presence checks</h3>\n<p>As discussed in the previous chapter, a <code>static</code> or instance method of a class can use a private <code>#field</code> to detect whether an object is an instance of the same class.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Invoice' >Invoice</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#nextInvoiceId</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#invoice_id</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Invoice' >Invoice</data-lsp>.#nextInvoiceId</span><span style=\"color: #CF222E\">++</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Invoice.equals(other: any): boolean' >equals</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) other: any' >other</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: any' >other</data-lsp> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// is it truthy</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: any' >other</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and an object</span></div><div class='line'><span style=\"color: #24292F\">      #invoice_id </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: any' style='border-bottom: solid 2px lightgrey;'>other</data-lsp> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and \"branded\" with the #invoice_id property</span></div><div class='meta-line'><span class='popover-prefix'>                      </span><span class='popover'><div class='arrow'></div>(parameter) other: any</span></div><div class='line'><span style=\"color: #24292F\">      <data-lsp lsp='(parameter) other: Invoice' style='border-bottom: solid 2px lightgrey;'>other</data-lsp>.#invoice_id </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#invoice_id </span><span style=\"color: #6E7781\">// and the values of #invoice_id are equal</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(parameter) other: Invoice</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const inv: Invoice' >inv</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Invoice(): Invoice' >Invoice</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const inv: Invoice' >inv</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Invoice.equals(other: any): boolean' >equals</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const inv: Invoice' >inv</data-lsp>)) </span><span style=\"color: #6E7781\">// ✅</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECSB2A3A9gS2AU2gbwFDWggBcwj1oBieDADyIRXQ1gBNoBeaARn0tSTSYA+qjacGgjADoqtegKasA1Ety8MARwCuYEBAAUyIgAsMAJwBc0MPACeASisAjZMhAYbOXgTMYiWs3hoI1MzaAAycOgAemjoVBhUImgiMy0TW28CFNsABwxkADNgk3MOdk4AImQnACsMYCJKiKjY63g2Txr6xqyCCn5GYVF4oJCyyJi4mzZKpzMZjBZmgHck4xTTPgVhtlyzZHyzIky27POLy4IAPQB+PpLQmUHJETEKzYTnnYw3qfa2KVoIhdFoMDAitshr8RmBfNBNDoQLgztk7rwAL64LG4YDIeDEUaIDjQagrOA-fT2ADcuPxEDc0hAyAA5vpBlJEboDIN7PZ-oBQciAA'>Try</a></div></pre>\n<p>This is quite convenient from a type guard standpoint. We can use this technique in a static method, and use our <code>is</code> flavor of guard return type to make an interesting type guard</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#nextSerialNumber</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">100</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> #</span><span style=\"color: #8250DF\">generateSerialNumber</span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#nextSerialNumber</span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#serialNumber</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\">#generateSerialNumber</span><span style=\"color: #24292F\">()</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.isCar(other: any): other is Car' >isCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) other: any' >other</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) other: any' >other</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) other: any' >other</data-lsp> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// is it truthy</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: any' >other</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and an object</span></div><div class='line highlight'><span style=\"color: #24292F\">      #serialNumber </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: any' >other</data-lsp>) { </span><span style=\"color: #6E7781\">// and we can find a private field that we can access from here</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">// then it *must* be a car</span></div><div class='line highlight'><span style=\"color: #24292F\">      <data-lsp lsp='(parameter) other: Car' style='border-bottom: solid 2px lightgrey;'>other</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(parameter) other: Car</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='line highlight'><span style=\"color: #24292F\">    }</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line highlight'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: any' >val</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.isCar(other: any): other is Car' >isCar</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let val: any' >val</data-lsp>)) {</span></div><div class='line highlight'><span style=\"color: #24292F\">  <data-lsp lsp='let val: Car' style='border-bottom: solid 2px lightgrey;'>val</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>let val: Car</span></div><div class='line highlight'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oQC5iwS2GgGIA7AUwA8sBlMhPMEAOQFcBbAIzoC5oT2uSALzQAjAAZx6TDnyEiAczLkEuMrXqNWnOgAoAlCmgIyWFghLQsACzwQAdKUo06DZgLoBqT9AC+qaSIIVy0PYThERyUVNQ03bUEDAIxsXAJoO3gEXQB7Gx5oMBIAT31ePOs6DJgslGkMPAAzaFz8pAAydugAem7qjKwrBBYbYvqMK2KABzIc5oqqoSXoACIcjgArMmAsFehOnr6igBNCy3WtnfGMIJD3HSQ8c7bDZEOz04B3MmhgIuhGk9TmBoFN6AA3NQAvBkECnGy4aDfX7-MDAYBkKAAhA5NjQSoma7vfKWPCDABUbBY2HJ0C4hRRCCJCyZEwmvWgAD0APxEkxmCxDFhkcb+Nn88yWRqMYLSfz+VAgUzQSEgXhFMaoJotLL2TKIXSq-SvaSq1AcnmoXxAA'>Try</a></div></pre>\n<p>A type guard like this is not always the right decision. Remember, TypeScript uses a structural type system, and we’ve effectively built in something that behaves in a nominal way. Nothing other than an instance of <code>Invoice</code> will pass the <code>isInvoice</code> test, because this <code>static</code> method can only access private fields on <code>Invoice</code>. This isn’t a bad thing, and it’s certainly no worse than the <code>instanceof</code> built-in type guard.</p>\n<h3 id=\"narrowing-with-switchtrue\" style=\"position:relative;\"><a href=\"#narrowing-with-switchtrue\" aria-label=\"narrowing with switchtrue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Narrowing with <code>switch(true)</code></h3>\n<p>Sometimes a bunch of type guards in a big cascade of <code>if</code>/<code>else</code> blocks can feel a little verbose, particularly if the action to be taken in each branch of the conditional is just a couple lines of code. TypeScript 5.3 introduced the ability to use <code>switch(true)</code> for narrowing</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fish' >Fish</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fish.swim(): void' >swim</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\"> {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Bird' >Bird</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Bird.fly(): void' >fly</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\"> {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: any' >val</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #CF222E\">switch</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">case</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: any' >val</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Bird' >Bird</data-lsp></span><span style=\"color: #24292F\">:</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let val: Bird' style='border-bottom: solid 2px lightgrey;'>val</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Bird.fly(): void' >fly</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let val: Bird</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">break</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">case</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: any' >val</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fish' >Fish</data-lsp></span><span style=\"color: #24292F\">:</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let val: Fish' style='border-bottom: solid 2px lightgrey;'>val</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fish.swim(): void' >swim</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let val: Fish</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">break</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiCWEAW0DeAoa0IHd4FsAKASgC5oA3Ae3gBM0BfdJ0SGAIXgCd6MsAzEAE8S5anUbN06EAFMALpTAhoAXkbRImgHZD0uePOApC8rgFdZxNJmjBIspSvjaI8sNuCyq-aJx6ktlgUygB0giLE6AD00VjQAHoA-EHQAEZcsmAA1rb2EI4hzq7unt6+CMiB8U6hBkRRsfHJqRlZuQxAA'>Try</a></div></pre>\n<h3 id=\"writing-high-quality-guards\" style=\"position:relative;\"><a href=\"#writing-high-quality-guards\" aria-label=\"writing high quality guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing high-quality guards</h3>\n<p>Type guards can be thought of as part of the “glue” that connects compile-time\ntype-checking with the execution of your program at runtime. It’s of great\nimportance that these are designed well, as TypeScript will take you at your word\nwhen you make a claim about what the return value (or throw/no-throw behavior) indicates.</p>\n<p>Let’s look at a <strong>bad example</strong> of a type guard:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const empty: \"\"' >empty</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const zero: 0' >zero</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const zero: 0' >zero</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const zero: never' style='border-bottom: solid 2px lightgrey;'>zero</data-lsp>) </span><span style=\"color: #6E7781\">// is it really impossible to get here?</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>const zero: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const empty: \"\"' >empty</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const empty: never' style='border-bottom: solid 2px lightgrey;'>empty</data-lsp>) </span><span style=\"color: #6E7781\">// is it really impossible to get here?</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>const empty: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAzgORAG0wCgG4CGmAXIgWAJ4CUphmyKiYW9A3gFCKIBOAplCG5IAhHXYBfduwgIUURLwC2ABygVEAXkQAibdNnyAXr25xNiAAzsYwRDlQZsOY6apVEHLjLAo4mXgB0mHAA5s4mcO4A9FEMyPJ8RJjqMCpwKCgwAEb+iFBmIfyIABYmvAD8nIgxXLV1iAB6lZI2dg4sOEqq1O6eiN6+-kGhnSpq0bGo8Ty8SSlpGdm5+YiF8qV8lVw19fVNEkA'>Try</a></div></pre>\n<p>Click <code>Try</code> on this snippet and run this in the TypeScript playground. We see both <code>0</code> and <code>\"\"</code> logged to the console.</p>\n<p>Common mistakes like forgetting about the possibilities of strings and numbers being falsy\ncan create false confidence in the correctness of your code. <strong>“Untruths” in your type guards\nwill propagate quickly through your codebase and cause problems that are quite difficult to solve</strong>.</p>\n<p>In cases where the rest of your code relies on a particular value being of a certain type,\nmake sure to <code>throw</code> an error so that unexpected behavior is <strong>LOUD</strong> instead of <small>quiet</small>.</p>\n<h2 id=\"the-satisfies-keyword\" style=\"position:relative;\"><a href=\"#the-satisfies-keyword\" aria-label=\"the satisfies keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>satisfies</code> keyword</h2>\n<p>Let’s look at the following scenario</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' >usHolidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) independenceDay: string' >independenceDay</data-lsp>: </span><span style=\"color: #0A3069\">\"July 4, 2024\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) memorialDay: Date' >memorialDay</data-lsp>: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: number | string | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"May 27, 2024\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) laborDay: number' >laborDay</data-lsp>: </span><span style=\"color: #0550AE\">1725260400000</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// September 2, 2024</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAZAlga2gXlg6AfKAOwFcBbAIwgCcoCBnYKlQgcwG4AoD0SKACQD2AGxQATOCDpRsAbw5QoAbTQAuKAyasAumviJUGDgF8uAYwGEGUYnUEjxk6VDkLmoiJELvCpiPBBqAEQAUsRCIFAALAA0UABMAAxxkYHR8lCkEKQCTHBC-mqEEADuOIgAFIEAshLxAOyxicmBAJRpCkJw5DkFUACMdXEArHEAbAmRCVNTsQD0s1AAyh6IFNTxjUmRxkA'>Try</a></div></pre>\n<p>How can we make sure that <code>usHolidays</code> conforms to the type <code>Holidays</code>? We could use a type annotation</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const usHolidays: Holidays' >usHolidays</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) independenceDay: string' >independenceDay</data-lsp>: </span><span style=\"color: #0A3069\">\"July 4, 2024\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) memorialDay: Date' >memorialDay</data-lsp>: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: number | string | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"May 27, 2024\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) laborDay: number' >laborDay</data-lsp>: </span><span style=\"color: #0550AE\">1725260400000</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// September 2, 2024</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const usHolidays: Holidays' style='border-bottom: solid 2px lightgrey;'>usHolidays</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const usHolidays: Holidays</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAZAlga2gXlg6AfKAOwFcBbAIwgCcoCBnYKlQgcwG4AoD0SKACQD2AGxQATOCDpRsAbw5QoAbTQAuKAyasAumviJUGDgF8uAYwGEGUYnUEjxktXbESps+VGaiIkQt8KmEPAgagBEAFLEQiBQACwANFAATAAMSbGh8R6kEKQCTHBCwWqEEADuOIgAFKEAshLJAOyJqemhAJRZCkJw5PnFUACMjUkArEkAbCmxKbOziQD0C1AAyj6IFNTJLWmxxlw2zg50HEtQAHoA-EA'>Try</a></div></pre>\n<p>but we’ve lost some specific type information (e.g. it’s clear that <code>memorialDay</code> is a <code>Date</code>, but now we have to treat it as <code>Date | number | string</code>). We’d get the same result if we attempted to cast it using <code>as Holiday</code>.</p>\n<p>We could try passing it through a type guard and see what happens</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function assertIsHolidays(arg: any): asserts arg is Holidays' >assertIsHolidays</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">asserts</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) arg: any' >arg</data-lsp> </span><span style=\"color: #CF222E\">!==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;object&apos;</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> [<data-lsp lsp='let day: any' >day</data-lsp>, <data-lsp lsp='let date: any' >date</data-lsp>] </span><span style=\"color: #CF222E\">of</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) arg: any' >arg</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let day: any' >day</data-lsp> </span><span style=\"color: #CF222E\">!==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;string&apos;</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\">      <data-lsp lsp='let day: string' style='border-bottom: solid 2px lightgrey;'>day</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let day: string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let date: any' >date</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let date: any' >date</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> <data-lsp lsp='let date: any' >date</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">      <data-lsp lsp='let date: string | number | Date' style='border-bottom: solid 2px lightgrey;'>date</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let date: string | number | Date</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' >usHolidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) independenceDay: string' >independenceDay</data-lsp>: </span><span style=\"color: #0A3069\">\"July 4, 2024\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) memorialDay: Date' >memorialDay</data-lsp>: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: number | string | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"May 27, 2024\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) laborDay: number' >laborDay</data-lsp>: </span><span style=\"color: #0550AE\">1725260400000</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// September 2, 2024</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function assertIsHolidays(arg: any): asserts arg is Holidays' >assertIsHolidays</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' >usHolidays</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>usHolidays</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const usHolidays: {\n    independenceDay: string;\n    memorialDay: Date;\n    laborDay: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAZAlga2gXlg6AfKAOwFcBbAIwgCcoCBnYKlQgcwG4AoD0SKACQD2AGxQATOCDpRsAbw5QoAbTQAuKAyasAumviJUGDgF8OAenNQAtNYDGxYNcscAZsUI3gKAYShw6damAASTpBEXFJAAo4KhY1OEIQAEp4-0CpGJYoFCkwsQkpOQUUZyhInggBUsyoAEJMbAByAXIAKwgPRqSoYAALKgEAdyIIYYBRKgGqSKTOBWcBGkihCGAlCIAaKHFELSgq31juooVs0vLwStKIuoaoRo1mFi6e-qGR8cnFmbnThQizKY-lAAHoAfmBUHkpxKZQqBx2WDuACJHqxkbQCPDrrhpCiSBRqBi8AREdlCAwEjYrjhEEloX9EYDgeCGVAIEIAq8BsNCKMoBMpjNoSYTFwbN4GFBiKFhPlJNIoCdmKIIJBCKr3BB4CA1MiAFLEIQgKAAFi2ACYAAwW03IjbQ0gQUiLFBwIQ6tR84Z6CCRZEAWQkUAtAHZLTa7UkHQohHByItPVAAIyhi0AVgtADYraarfn81sLABlNWIQk0C0R23GDh+AJUYKy8IFSIyvIROj09tyzvM8FAA'>Try</a></div></pre>\n<p>This is <em>ok</em>, but we’re executing additional code at runtime (the type guard’s implementation), just to get the benefit of a type-check at compile time. There are still other ways to do this with very complicated use of type equivalence checks (through assignment or passing the value through a function signature) but those methods are similarly clunky.</p>\n<p>The <code>satisfies</code> keyword makes this much easier</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateLike = string | number | Date' >DateLike</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' >usHolidays</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) independenceDay: string' >independenceDay</data-lsp>: </span><span style=\"color: #0A3069\">\"July 4, 2024\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) memorialDay: Date' >memorialDay</data-lsp>: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: number | string | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"May 27, 2024\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) laborDay: number' >laborDay</data-lsp>: </span><span style=\"color: #0550AE\">1725260400000</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// September 2, 2024</span></div><div class='line'><span style=\"color: #24292F\">} satisfies <data-lsp lsp='type Holidays = {&#10;    [k: string]: DateLike;&#10;}' >Holidays</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const usHolidays: {&#10;    independenceDay: string;&#10;    memorialDay: Date;&#10;    laborDay: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>usHolidays</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const usHolidays: {\n    independenceDay: string;\n    memorialDay: Date;\n    laborDay: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAZAlga2gXlg6AfKAOwFcBbAIwgCcoCBnYKlQgcwG4AoD0SKACQD2AGxQATOCDpRsAbw5QoAbTQAuKAyasAumviJUGDgF8uAYwGEGUYnUEjxk6VDkLmoiJELvCpiPBBqAEQAUsRCIFAALAA0UABMAAxxkYHR8lCkEKQCTHBC-mqEEADuOIgAFIEAshLxAOyxicmBAJRpCkJw5DkFUACMdXEArHEAbAmRCVNTsQD0s1AAyh6IFNTxjUmRxuoIKHQAZigQUnZiEnRcNmcOl-NQAHoA-EA'>Try</a></div></pre>\n<p>It’s important to remember that we’re not actually executing a type guard here — the <code>satisfies</code> operator is exclusively using type information, based on what’s been inferred by the declaration of <code>usHolidays</code> and what’s been declared for the <code>Holidays</code> type.</p>","tableOfContents":"<ul>\n<li><a href=\"#built-in-type-guards\">Built-in type guards</a></li>\n<li>\n<p><a href=\"#user-defined-type-guards\">User-defined type guards</a></p>\n<ul>\n<li><a href=\"#value-is-foo\"><code>value is Foo</code></a></li>\n<li><a href=\"#asserts-value-is-foo\"><code>asserts value is Foo</code></a></li>\n<li><a href=\"#use-with-private-field-presence-checks\">Use with private <code>#field</code> presence checks</a></li>\n<li><a href=\"#narrowing-with-switchtrue\">Narrowing with <code>switch(true)</code></a></li>\n<li><a href=\"#writing-high-quality-guards\">Writing high-quality guards</a></li>\n</ul>\n</li>\n<li><a href=\"#the-satisfies-keyword\">The <code>satisfies</code> keyword</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/12-type-guards/"},"frontmatter":{"title":"Type guards and narrowing","course":"fundamentals-v4","date":"October 23, 2023","description":"We have explored built-in type guards like typeof and instanceof,\nbut there's a lot more power in type guards, including the ability\nto define your own!\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/12-type-guards/","title":"Type guards and narrowing","course":"fundamentals-v4","order":12,"previous":{"fields":{"slug":"/course/fundamentals-v4/11-classes/"},"frontmatter":{"title":"Classes","order":11,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/13-generics/"},"frontmatter":{"title":"Generics","order":13,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}