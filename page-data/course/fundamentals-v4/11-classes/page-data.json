{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/11-classes/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"6f69ce4e-c631-50df-aee3-26ca74339b25","excerpt":"TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a closer look at\nclass fields…","html":"<p>TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a closer look at\n<strong>class fields</strong>, <strong>access modifier keywords</strong> and more!</p>\n<h2 id=\"fields-and-methods\" style=\"position:relative;\"><a href=\"#fields-and-methods\" aria-label=\"fields and methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields and methods</h2>\n<p>Let’s go back to our car example. In the JS world, we could have\nsomething like:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// JavaScript, not TypeScript //</span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////////////</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: any' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: any' >model</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: any' >year</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: any' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: any' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: any' style='border-bottom: solid 2px lightgrey;'>model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: any' >model</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) Car.model: any</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: any' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: any' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let sedan: Car' >sedan</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: any, model: any, year: any): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let sedan: Car' >sedan</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >activateTurnSignal</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"left\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><div class='line'><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: any, model: any, year: any): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZYFAgBAKQIYDckGUDGAnAlgBwBcAaOAOwHtC4AVAT3wFMs8i4RYovuZMAbJAGdBcAMJJscAN7Q4cTBTKDC2AK6ZCFbAAoAtkgDWjUrooATRn1J1GEgJTTZcuIQAWuQQDp9RuAF44H0YnOTcPb3NLf0DIvhD2YGc5AD0AfniwrxsJaOzsJwBfaCLoPkZqQUYzJDJoskYAdzEJbQAiAAlFatbSVoBBTAVsMx64ACYABgBGAHY7aErqsk8kDVw0QkYaVWwydFwAczIkPjaygDNCVod4Sgqkc8YAQmh6pvEdSdnezrJu3oGQxGN0SdzgggezyAA'>Try</a></div></pre>\n<p>If we stop and think for a moment, this is allowed in the JS world because every value, including the class fields and instances of the class itself, is\neffectively of type <code>any</code>.</p>\n<p>In the TypeScript world, we want some assurance that we will be stopped at compile time\nfrom invoking the non-existent <code>activateTurnSignal</code> method on our car. In order to get this\nwe have to provide a little more information up front:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' style='border-bottom: solid 2px lightgrey;'>model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) Car.model: string</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let sedan: Car' >sedan</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line highlight'><span style=\"color: #24292F\"><data-lsp lsp='let sedan: Car' >sedan</data-lsp>.</span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='any' >activateTurnSignal</data-lsp></data-err></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"left\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><span class=\"error\"><span>Property 'activateTurnSignal' does not exist on type 'Car'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'activateTurnSignal' does not exist on type 'Car'.</span><div class='line highlight'><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-err>2017</data-err></span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50YCwCsAUCBAHZwCSAtgA4A2AlgMZMAuAguQJ6rvQArpGIsGAQ0SJQAYXHRQAb2KhQNcQGtIqRAKbkA5irVwAJpAY69h4z0jzU5QTQBGMYyzjldQluwQAFOpaVtD6BgA0JuaWoD7hUXYOoE6uMACUSsaq7AAWTIgAdMGQoAC8apoiqjn5RTRmFuXRFtmgZDWgAHoA-G15BYVJChXDxgC+xJPEDJDscZCm4uTN5JAA7rLyAQBEABJeSztRO5wsntCmx+gADACMAOzpxIiLy4XifkwAbuLskAAVQTQcgAZSYBnI4gYu1mADN2DtMmRKPNEOI4ZAAITENabOTQAJoe4PE4HchHE5nC5XZFgVFxDHYoA'>Try</a></div></pre>\n<p>Two things to notice in the code snippet above:</p>\n<ul>\n<li>We are stating the types of each class field</li>\n<li>We are stating the types of each constructor argument</li>\n</ul>\n<p>This syntax is getting a bit verbose now — for example, the words “make”, “model” and “year” are written in four places each. As we will see below, TypeScript has a more concise way to write code like this.</p>\n<p>Expressing types for class methods works using largely the same pattern used for function arguments and return types</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(duration: number): string' >honk</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) duration: number' >duration</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">     </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`h${&apos;o&apos;</span><span style=\"color: #0A3069\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) String.repeat(count: number): string' >repeat</data-lsp></span><span style=\"color: #0A3069\">(</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) duration: number' >duration</data-lsp></span><span style=\"color: #0A3069\">)</span><span style=\"color: #0A3069\">}nk`</span><span style=\"color: #24292F\">;</span></div><div class='line highlight'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">);</span></div><div class='line highlight'><span style=\"color: #24292F\"><data-lsp lsp='const c: Car' >c</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(duration: number): string' >honk</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">); </span><span style=\"color: #6E7781\">// \"hooooonk\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oFswGsCmAXNBAC4ICWAdgObpYD2AJniEaRTXQJ56JGUBXTACM8COsHqV2A4CXoIAFNnxsyVagBoGzVsXU1tPPtEEixAShR0MJABbkIAOhV5oAXiy48N6PccuTCweOiy+-s7GSJ5RdAC+dHZSOIqMAghgJORS-EKiCBZqHNTWGGUIeCTplNAABnYAJMgA5PTNThUADrwkqemZ2ZQWcZQ4tQDc8agJqJLSJNDAIZR4AO5wiIoARAASUoxgW9pbAILAkgiMR9AATAAMAIwA7BaTwE5Jo4oArK-QAPT-aBbJL0MHJLZAA'>Try</a></div></pre>\n<h3 id=\"static-fields-methods-and-blocks\" style=\"position:relative;\"><a href=\"#static-fields-methods-and-blocks\" aria-label=\"static fields methods and blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>static</code> fields, methods and blocks</h3>\n<p>Sometimes it’s desirable to have fields and methods on the <em>class</em>, as opposed to the <em>instance of that class</em>. Recent additions to JavaScript and TypeScript make this possible!</p>\n<p>The way to denote that a field or method should be treated this way is via the <code>static</code> keyword.</p>\n<p>Here’s an example of a case where we want to have a counter that increments each time there’s a new instance.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Static stuff</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">100</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Instance stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.getLabel(): string' >getLabel</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #0550AE\">this</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #0A3069\">} ${</span><span style=\"color: #0550AE\">this</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #0A3069\">} ${</span><span style=\"color: #0550AE\">this</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #0A3069\">} - #${</span><span style=\"color: #0550AE\">this</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Car.serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line highlight'><span style=\"color: #24292F\">}</span></div><div class='line highlight'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">( </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">))</span></div><div class='line highlight'><span style=\"color: #6E7781\">// &gt; \"Honda Accord 2017 - #100</span></div><div class='line dim'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">( </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Camry\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2022</span><span style=\"color: #24292F\">))</span></div><div class='line highlight'><span style=\"color: #6E7781\">// &gt; \"Toyota Camry 2022 - #101</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oHpPQMoBcx8BLYaCfAVwDNr1zCSyA7AUwA99dWFiwQAcpQC2AIx7QAvNACMABjn0KRUtADmrNgiKtuvfkLE8AFAEoU0BKyoJm0fAAtiEAHRtOevoJHiEAaj9oAF9UemxoAElmZWZgVgYaOgxhMABrVgAuBl5mNXphAHsAE1YQLIocvIwAT1ZELOYfHiUeL0NfKThEFw0tHU8DJoQzemAC6PwESmB8AuGU9PLJ4lyAGmhCkrLslbV12vroRqMEczQMDEdnFwX46Vv6S6dXTdLO15BH+2eXA6RpP70EIYDT4AAyYHEIDMKC+VhsdgABgASZBXF5pVhBaCo9E3YqlbG4n5-bEAWmgAGJidcIK1BicgoigagQmNogUQKwXCACmpjEdWAB3LrDABEAAlxkUwGL1mKAILAMYIIpy6AAJjkMgA7KZTKhwgA+aCS6VgaBKlVFTXanXQCmU+SKdkQTnc3n8wUi+DigAqBWqBUI6rF8GECGq6q1Go1+sNOBNYoDQcIXQj1VtsYdVPkMiAA'>Try</a></div></pre>\n<p>Unless you state otherwise, static fields are accessible from anywhere the <code>Invoice</code> class is accessible (both from inside and outside the class). If this is undesirable, TypeScript provides us with <strong>access modifier keywords</strong> and truly private <code>#fields</code>, both of which we’ll discuss below</p>\n<p>There’s one more place where the <code>static</code> world appears: next to a code block. Let’s imagine that we don’t want to start with that invoice counter at <code>1</code>, but instead we want to load it from an API somewhere.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Static stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">// `this` is the static scope</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://api.example.com/vin_number_data\"</span><span style=\"color: #24292F\">)</span></div><div class='line highlight'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;Response>.then&lt;any, never>(onfulfilled?: ((value: Response) => any) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;any>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) response: Response' >response</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) response: Response' >response</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">())</span></div><div class='line highlight'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;any>.then&lt;void, never>(onfulfilled?: ((value: any) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">              </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) data: any' >data</data-lsp>.<data-lsp lsp='any' >mostRecentInvoiceId</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='line highlight'><span style=\"color: #24292F\">          })</span></div><div class='line highlight'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Instance stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oHpPQMoBcx8BLYaCfAVwDNr1zCSyA7AUwA99dWFiwQAcpQC2AIx4AuaMxHiE9CkVLQA5qzYIirbr35CxPABQBKFNASsqCZtHwALYhAB0bTjr6DZPANTfoAXwVGZTQMMKwcAAN7R0joR1s7VgYlMghgAHsAB1Z6cOpLYDtDACI7fHwsiAlsMCziJw4wYSyQVidM4UwAN2JmAH0ZAwR+gBMiMBLjPPCwp3t1QwsILIzmCGSAXgA+c1YVtY2nACsINZNp2dn5pOZDccJoHZQZq-CY51cuHg99OSfoA8wE5hBkKAAlVjAdT4ACSzG6GVIrFho2gfgAjABuV6zfyXAL0bDQeGKZjQhg0OgYYRgADWrCkFF4zBU9FBo1YICZ+BZbIwAE9WIgpEM5AofnovEhNnBEE41BotO4pcMTPRMuteZRgPgMghDLSGTy+QAaaAcrkmvoqc1CkXSaWmUJhD4g+lbC0emZuy0gAF+n0OZz2mXQUP0QL+IA'>Try</a></div></pre>\n<p>This <code>static</code> block is run during <em>class initialization</em>, meaning when the <code>class</code> declaration itself is being evaluated (not to be confused with creating an <em>instance</em>). You might be wondering what the difference is between this, and running similar logic in top-level module scope outside of the class. We’re about to talk about how we can make fields <em>private</em>, and <code>static</code> blocks have access to private scopes.</p>\n<p>This language feature even allows you to create something similar to what the <a href=\"https://en.wikipedia.org/wiki/Friend_class\"><code>friend</code></a> keyword in C++ does — give another class declared in the same scope access to private data.</p>\n<h2 id=\"access-modifier-keywords\" style=\"position:relative;\"><a href=\"#access-modifier-keywords\" aria-label=\"access modifier keywords permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access modifier keywords</h2>\n<h3 id=\"public-private-and-protected\" style=\"position:relative;\"><a href=\"#public-private-and-protected\" aria-label=\"public private and protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>public</code>, <code>private</code> and <code>protected</code></h3>\n<p>TypeScript provides three <strong>access modifier keywords</strong>, which can be used\nwith class fields and methods, to describe <strong>who should be able to see and use them</strong>.</p>\n<table>\n<thead>\n<tr>\n<th>keyword</th>\n<th>who can access (instance field/method)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>Anyone who has access to the scope in which the instance exists</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>the instance itself, and subclasses</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>only the instance itself</td>\n</tr>\n</tbody>\n</table>\n<p>Let’s see how this works in the context of an example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Static stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">// `this` is the static scope</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://api.example.com/vin_number_data\"</span><span style=\"color: #24292F\">)</span></div><div class='line dim'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;Response>.then&lt;any, never>(onfulfilled?: ((value: Response) => any) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;any>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) response: Response' >response</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) response: Response' >response</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">())</span></div><div class='line dim'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;any>.then&lt;void, never>(onfulfilled?: ((value: any) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">              </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) data: any' >data</data-lsp>.<data-lsp lsp='any' >mostRecentInvoiceId</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">          })</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Instance stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car._serialNumber: number' >_serialNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">protected</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">get</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(getter) Car.serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car._serialNumber: number' >_serialNumber</data-lsp></span></div><div class='line highlight'><span style=\"color: #24292F\">  } </span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Sedan' >Sedan</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Sedan.getSedanInformation(): {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    serialNumber: number;&#10;}' >getSedanInformation</data-lsp></span><span style=\"color: #24292F\"> () {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-err><data-lsp lsp='(property) Car._serialNumber: number' >_serialNumber</data-lsp></data-err></span></div><span class=\"error\"><span>Property '_serialNumber' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property '_serialNumber' is private and only accessible within class 'Car'.</span><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\"><data-lsp lsp='const make: string' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const model: string' >model</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const year: number' >year</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) make: string' >make</data-lsp>, <data-lsp lsp='(property) model: string' >model</data-lsp>, <data-lsp lsp='(property) year: number' >year</data-lsp>, <data-lsp lsp='(property) serialNumber: number' >serialNumber</data-lsp> }</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line highlight'><span style=\"color: #24292F\">}</span></div><div class='line highlight'>&nbsp;</div><div class='line highlight'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const s: Sedan' >s</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Sedan(make: string, model: string, year: number): Sedan' >Sedan</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Nissan\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Altima\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2020</span><span style=\"color: #24292F\">)</span></div><div class='line highlight'><span style=\"color: #24292F\"><data-lsp lsp='const s: Sedan' >s</data-lsp>.<data-err><data-lsp lsp='(property) Car.serialNumber: number' >serialNumber</data-lsp></data-err></span></div><span class=\"error\"><span>Property 'serialNumber' is protected and only accessible within class 'Car' and its subclasses.</span><span class=\"code\">2445</span></span><span class=\"error-behind\">Property 'serialNumber' is protected and only accessible within class 'Car' and its subclasses.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGdWsBWAKAGMAbAQ0UVAGFLpQBvY0UEUAZQBdKeAlqVCIeAVwBmEtiL6DhAO0gAPHlxgDK5AHJiAtgCMYqBfqPQZo-kNABzSEuj9I66Jp1mYACgCULUNCQ4tAKoDwAFgKIAHRKqq7uuoYwANQpoAC+lnI2rOz5HGAABhFRRaBRYeGQstbCiKRwAA6QMgUSQaThXgBE4Tw8TSgglE0C0SqUek3kkNGNesAAbgIKAPqmydBrACb8lD0+bQX50REOXoGITXAKiDUAvAB8AZDXt-fRAFaIt75HJxOZ2qCi8ez4oGeLGOgIKpRicTUGi0SXMkNA4Mo0T0cFEACVIKQHDwAJIKJZwISQEk7UDpHAAbhhJwyAMyMk4ZKsCiJskk0nYekoAGtIKhRG4FLYZDidpByOKeJLpewAJ6QRgmTwWdhNNxLZygNb3Nwo7XohjQaL2RzOBJmra+GR6uA8Qlu2n2HgiZEeR1+PL5QLBULw6LG32omAyDKgGSNO5KsSkHgILxC0WK5UAGlAsvlWdWtlz6s1oE25gDxzDGceeZFrThkRi+fI6Nb1eb0VLTAeoB7MeIWTIVBo3Ege1CKjdCh2tEt0PYXvUk7JEgQQsEt1AvkX+TDEdNfvMxwTon8tdzrZLGuguZNiXNsb78KZBWDYhCF4bV7gcvIN6MPekZPoOw5nt6tB9koADu46Tr02hRIglAKD0uY9AAguQghCuh6AAAxoARRwxA+DrmEAA'>Try</a></div></pre>\n<p>A couple of things to note in the example above:</p>\n<ul>\n<li>The top-level scope doesn’t have the ability to read <code>serialNumber</code> anymore</li>\n<li><code>Sedan</code> doesn’t have direct access to write <code>_serialNumber</code>, but it read it through the protected getter <code>serialNumber</code></li>\n<li><code>Car</code> can expose <code>private</code> functionality by defining its own <code>protected</code> functionality (the <code>serialNumber</code> getter)</li>\n<li><code>Sedan</code> can expose <code>protected</code> functionality by defining its own <code>public</code> functionality (the <code>getSedanInformation()</code> return value)</li>\n</ul>\n<p>these access modifier keywords can be used with <code>static</code> fields and methods as well</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Static stuff</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">// `this` is the static scope</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://api.example.com/vin_number_data\"</span><span style=\"color: #24292F\">)</span></div><div class='line dim'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;Response>.then&lt;any, never>(onfulfilled?: ((value: Response) => any) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;any>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) response: Response' >response</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) response: Response' >response</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">())</span></div><div class='line dim'><span style=\"color: #24292F\">          .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;any>.then&lt;void, never>(onfulfilled?: ((value: any) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">              </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) data: any' >data</data-lsp>.<data-lsp lsp='any' >mostRecentInvoiceId</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">          })</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Instance stuff</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car._serialNumber: number' >_serialNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">protected</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">get</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(getter) Car.serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car._serialNumber: number' >_serialNumber</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  } </span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Sedan' >Sedan</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Sedan.getSedanInformation(): {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    serialNumber: number;&#10;}' >getSedanInformation</data-lsp></span><span style=\"color: #24292F\"> () {</span></div><div class='line dim'><span style=\"color: #24292F\">    <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></data-err></span><span style=\"color: #24292F\">()</span></div><span class=\"error\"><span>Property 'generateSerialNumber' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'generateSerialNumber' is private and only accessible within class 'Car'.</span><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\"><data-lsp lsp='const make: string' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const model: string' >model</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const year: number' >year</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const serialNumber: number' >serialNumber</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) make: string' >make</data-lsp>, <data-lsp lsp='(property) model: string' >model</data-lsp>, <data-lsp lsp='(property) year: number' >year</data-lsp>, <data-lsp lsp='(property) serialNumber: number' >serialNumber</data-lsp> }</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUAMYA2AhooqAMInSgDeeooIoAygC4nsCWBoi7AK4AzYY1AAHaNwBuXSP048+AO0gAPdqxjcSRAHKCAtgCMYqFcbPRxU2fMVdeoAOaQ10edul7DpmAAUAJT0oNCQQtAqoOwAFtyIAHRqmt66BlYwANRZoAC+4gJOfAxMZcxgAAZxCZWgCTGxCkXK-ARwEpDi5cIRBLEBAESx7OwSKCAkEtyJGiRGEkSQie1GwDLcKgD6lv7QWwAmXCSDQd3lZYlx7gHhiBJwKogKALwAfGGQ94-PiQBWiEewTOFwuVyaKgCR04oHe9HOoPKNSSKS0Ol8mVoL1A0JIiSMcAEACVIAR3OwAJIqGRwXiQCkHUC5HAAbgRFzyIPy4hYVKKKjJihEYiYRhIAGtIKgBNIVC5xASDpAiNL2LL5UwAJ6QGgWTG2aRydgKLbPHwZPawqg0RJuDxedEW6zBA1wY0EY2MtzsfiOvzOkKlMrhSLRZGJU1+-VMPKgcTtJ5qwQehABMWS1XqgA0oEVyszmxcOe1utAu2sgfO4fTr1zEq6SPiSTzRCtLarTcSJaxoG74gKBUIpHIbEgR2iGmNKgOFGotCD3u046pwgQYp4j1AwXh5TntvcMAd5v9gS5TATAlCNZzLeLOugObN6RPtFj2ORbPKIcEUSv9ZvcBKkQd40I+UaWgUMZ4HkQA'>Try</a></div></pre>\n<p>What you may notice here is that static scopes <em>and</em> instance scopes have some degree of visibility. <code>protected</code> static fields are accessible in the class’ static and instance scopes — as well as static and instance scopes of any subclasses.</p>\n<table>\n<thead>\n<tr>\n<th>keyword</th>\n<th>who can access (static field/method)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>Anyone who has access to the scope in which the class exists</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>static and instance scopes of the class and its subclasses</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>static scope instance scopes of the class only</td>\n</tr>\n</tbody>\n</table>\n<div class=\"custom-block warning\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-warning\" data-icon=\"emoji-warning\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAL1ElEQVR4Ae2aBXBU2dKAJyNxJZOEiQsQnCjuEMNd/oe7rb11DeuGrCPr7o47xHGPIDHi7p7+u3e7mOyZXF4GTVI7VV+dnvY+9yL33JHd/c+/HwNEiZgg5gzJSra1648cMUbUiCfSgyFZzTZ5e77yxohmYDfjoZGfeH+XfXjYJYJk0pGNfdrlnaBC7LwclYPSdvqdgYxFAAUPAeQjKCfv8Dvj5qgcSD7s2+5ufUuk+773O/3YmD4fGgsfRR7RgjqykQ/7tqs/CkaI89xQiwU1F8bWNBb8FxDkIQZlhGzkQ74c026uvjXiG/dFt6jGrKV/D51/P8OQDm1xX/SIIl+OkbeXq++6eLzFI7Xx4+oa8u+Dhvw1zGot9L1gDZAP+VIMx7b5q2+DDDz1XY/TDZmLoCEPNyB3VRNWauW8NUA+5EsxHCtv6//seTw00/r5+sRxDX8PuwIacpY3Ty6C9vrE8Q0UQ7Ft+Z9FBdIBGXbxl96J9RnzoR6HrM9eiizjVZQR9CFfiqFYzqFoi1ffBOn87KIO6+uTJuBwS6A+qymLGVGHK21E0nigWMrBuQza2tVXGxnJgq5s802puzYH6rIWQV3mQgkEG/mmz4Er23xSKAflQhRt6eqbIt7r1qi31CWN48HmQ13GvJaD/hRLOSgXYtpW7gIlYqe2kY1L3+2bVZc2GweaC3gXSJOhq6MYiqUclItyIsq2cPXNkB5bH7P/qjZxDNRe+w/Ups9m/o9hmfW63xmMpRybHrX/iv+LbNba7wIV4uDtqpietd+3oCZ1OtSkz4KatJnNgVeaIJkQ/fA7xlKOrP0+BZ2cFNMoN6JqzVffHOnzdbjm15qEUBxiBg3QhGlAa2PmDIDKuQDVxJy/5UwcOoV92I+gHJTrS8xJubmGQWu9+pp+3VRz8w77lVUnT4bqlKnIFC3JUwCypwEUz4aP1vnDoEBb6B9gC5te9QMomoW2GeSDvgKYi3JSbqqBqFrr467fr69qdlcnBGHjuAHJk5CJzCSoQx2UzYQFM9wAff/B7EkuAKX4RyKN45pCm5AQDJQbff1b4+OyIeIUFGC0vDDSr6rqyniouqoL5EyG5LggHlqXxIjRAHlToNn4KxOgONK/KihAtZxqIYat6epbIX33bNREVMWPxIbHYsNjdIDciZB4ZKTkBpzdNwwgfyL7C1wdB1Xxo4BqoG8g15S3lsddlxnDjB4qifKprbwUAggSLBACkB4GReeDQKU0aHYDck6OBsgYC//MwSvLVGPKEKMHqSZi1FoOOwZGfOB4vPLCUGwyCCqTRjdL3dVggMxQ0Ngb6QyvtjGExrRgqE8Jloyn3FQjYpPjMYwZwLXl9/px121ZmPGzZTE+9RWJI6AicSTg2izVSSMBSkLBr5elzgZ072wOUBQK1ZfZX4RzE2UxfeqXYE2qfS8flxWIDTLk2CfO58vPDYTyhOFQHj+MGcqgzGsFAsXBMGuCvc4GTApRAxQF4YDDhDiGdVSDah39yPE81eYeFPfq6ns9Ms3ktfK4Xo3lF4cAggxuHrZB0ShY+6C7zgY8sdIVbaNFf+lcWPORGaavUA/34i5QILb4ZDLy7OdOl8vO9oWyCwORAdpVhG2QNxy+3thFZwM+ebMzQP5wYD8BIe9FlM/2g7NfOF3C2OGILaK424cdXdbON323LLYHlJ3vD2Xn+uH6v4H0QRD1c0+dDTj4bQ+AjEGivzRUE2uHzzV7m3q5e4cm/LhrZiQLSfjW6VrpaX8oPRuIBPAqyvyddY2X+0FWnJ/OBqQc8QW40q+pr0QO5hzqTvlDwjdO6dSLeGhypw87uq5bYfZxaWw3bAY34Ixfi6mOD4D6RH+wsVZeH97MRA7VFwOgBm26Mf7S36l2TDdYt8zsY+rpbhyaKBF7F1vZpMs/OuaWnOwNJad9kD4MyQzrRCrO+gCk+kNAb7PrG9DT2wQg2Q8qzvtKxPloV5FTveHyT5ocR2vZROoNUd7px91emx8w/6E4ugsUY/Hik70QXlsIZPvDzLE21zdg4mgrgCy8omzXC+yBetl0v9m3mKvnnXxcViEde7srZqf+qikqPt4dG+gBxSdEUM9I6SGjDzy7Wvt/gUeW2AFk+WhjTkrlEvMy2EvKL5qibi6KWdTjnXhcliMWiO+Xj5ttK4r0gqIT3aDoeFc90PpDck/4ar2z9p/AV5wAUnqyXf+c1Av19Pmjpn9iPh/u1eB2P+46DvRWLMz4w6G88GhnKDzapQmdGdZLrQwkdoVjP2r/MxT1rRvppPIISOjjOsO13xzKAzsrFvChieHtPuwI+GWt2YHCSDcoPNYJi3q1gOb9as93htSDHtc34Mo+D9KJfvoT4QY/h5vtv92HJoaIc1iAfE3mNvvqghgPKIj1RHBlSMd6WiXQ2kqOeUL9OS9w0aigo1oB1We8oOyYECuBth73IOgz/7SvDvaRr6KeEcPbddjRb8dL5jEFR5yxiFsLcOdVmspT7pB1xBUyD7lC5WkPCT89a8SiDnvc9qJpFPV8Ow5NjBDXGUPkj2VvU9flR7tAfhTzl+xMsKyDVs9+rMdmXaDxgitAigfiTjLq2EckmlZCrMc6cUWyt9nWTR8kf1TvQxOJd/uDD75pejr/kAaTO0F+5M3iCLQWRjsBJLrC7q12MCvUlCCZdGRjP0I3VjqvVqYeqdeDb5iewt4HiYcmer/bXxaqXJuzzaYhL0IDeREdtdB31rXMpsEGNQDxjvDuk1Y6zwKkg4s0RNNcUrKYX9dGPS8aLQ/H3O56PS6L7/aj3zaJzztoB3lHHBB73TWCIFmE7QT7l8c5QNYB8TBESzba0EeswUjlFn25J+w5aqPpRb1+YyC+2390inJd7nZryD1sx6iFFTmkRgQdygjbWYfUnbSDQ5/aSG5AxGc2UHvSnmNFxB7E+oRWJnK2WcPDE5VvYO5Oejwu87t9pSzoxHvGKbn7O2BSW8g9SCuDMuoQUUcrI/qhXHHUFi7+Kr0BaEOfDkJeISfn41XwFXrF3k+8b5ysVMpGSR+aSLzbD5+l2JSz3RJyDtpAzgERa16lbIzgm3fIBuBMB5gwXKUzPOnIlndQjONc0vUlemT9NksInyF/v6W/MVAidjamsjHnNhtl5ezDDdhvpcsBXvW1IWXRVlASaQULxhvS+wGCZChFHdmkY2+yJs5wepNxhqWRLEzyNwbCu/3u6xcqvsz+0wyy91tA9j4pLCX1vEr6lERYAJy2grwDlshfMuosW5hftEvZmP0IzvLmPMVnN/6NAb/b97SXTY3/SJWfvRs3YA+zl1eRveZIU7u54C8B2nP3mUHRQXPkL5ljKB/n4HxSdSXqCfFsw1niPzLMd7aVTdH9jYFw2LFpueKXrD+NIWuPqS67edXBpBlfE61NOlb0QcR8JozQB8N1eJXOTzO9v1zxo9ShiRKx93WXzUr6VFmStZs2AMGkKAuIOpMb++0R4+4GtBmCbpcxJH6sLO6NMzZ3dGaMeL+7RP5N1u+GGIDsMmIMGWY367V2cRX8tbLgKyUL30Wka1MtUdZ+R35XwbuLZV/TrDzz9Y8Z0v/Qa/KEzG0qyNyphMwdqv/NTuaGfkphFfR6oeS6+tbiGJzt4MvyeH5SNBM3YHjsOoO0zG0U3E7B2WJwRppV3AALZMimpbI9mT8r0BnZqWREmVdRL40YI9oYfeKUEkjHEjTb+0tke2hWxEK8AwLUZrIHtz8tS8v4wQAyfpNDxu/NodBLz9z+mD8ULc9Bs/wgh23PyFLtzGQP0KziHWCIdEGm2lvJXg+fLjvx42OyvF+flBX/8ris9KcnZGVtEeqdZqBZnpkqO4HDv0oz8qyG4v8DnJDByCLkeWQr8j3yB7ID2cnsatVwn9zzHzzDVp5pIc/oiOh8LHhnRiFzkYeQtcjryHpkA7KxjbCBe34NCUceRObwbF141mY/tog3MhAJQ6bxZizgO2NxG2ER9zyXZwhDBvBstsgNP5aIE+9UHyQQ6c8JBrYRBnDPgTxDF57JUp8jMVPEGlEjDkjHNoYDouYZTCUOQ/79/D/2mhuappW/hQAAAABJRU5ErkJggg==\" title=\"emoji-warning\"> Not for secret-keeping or security</div><div class=\"custom-block-body\"><p>It is important to understand that, just like any other aspect of type information, access modifier keywords\nare only <strong>validated at compile time, with no real privacy or security benefits at runtime</strong>.\nThis means that even if we mark something as <code>private</code>, if a user decides to set a breakpoint and\ninspect the code that’s executing at runtime, they’ll still be able to see everything.</p></div></div>\n<h3 id=\"js-private-fields\" style=\"position:relative;\"><a href=\"#js-private-fields\" aria-label=\"js private fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS private <code>#fields</code></h3>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#ecmascript-private-fields\">As of TypeScript 3.8</a>, TypeScript supports use of <a href=\"https://github.com/tc39/proposal-class-fields/\">ECMAScript private class fields</a>. If you have trouble getting this to work in your codebase, make sure to double-check your Babel settings</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.nextSerialNumber: number' >nextSerialNumber</data-lsp></span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#serialNumber</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.generateSerialNumber(): number' >generateSerialNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line highlight'><span style=\"color: #24292F\"><data-lsp lsp='const c: Car' >c</data-lsp>.<data-err>#serialNumber</data-err></span></div><span class=\"error\"><span>Property '#serialNumber' is not accessible outside class 'Car' because it has a private identifier.</span><span class=\"code\">18013</span></span><span class=\"error-behind\">Property '#serialNumber' is not accessible outside class 'Car' because it has a private identifier.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwA4AMaDMoAmAVgDYAWAKAGMAbAQ0UVAGE7pQBvC0UAB2gCWANzoAXSKESixAqqAB2kAB6iAyjAF0aAOQCuAWwBGMVPIPHo3PoJHjJ00bNABzSIuhjI6wVr1GYABQAlJyg0JCiutDyoKIAFgKIAHSKKt6aOuYwANTZoAC+FFb6dADWkKhSgvLOxXAAJpA0laLVtTwAnpBsplmWPADEiBq+faAAvCxsSa7unumj-tDBRTxUcPJVulSiCAEl5S1tADSg+g1NRwI1p109Cn0hXDw88YlJBxKTn1avCcnnRo0CZnC40X6xf5JO7sSYwqyFQrrTaiUBySaKADuU2WACIABIbep0XGnXEAQSo62g9VJhBwAHYgtQkkMRpklkA'>Try</a></div></pre>\n<p>Unlike TypeScript’s <code>private</code> keyword, these are <em>truly</em> private fields, which cannot be easily accessed at runtime. It’s important to remember, particularly if you’re writing client side code, that there are still <a href=\"https://chromedevtools.github.io/devtools-protocol/v8/Runtime/#method-getProperties\">ways of accessing private field data</a> through things like the Chrome Dev Tools protocol. Use this as an encapsulation tool, not as a security construct. The implementation of JS private fields is also <a href=\"https://lea.verou.me/blog/2023/04/private-fields-considered-harmful/\">mutually exclusive with properly-behaving ES proxies</a>, which you may not care about directly, but it’s possible that libraries you rely on use them.</p>\n<p>TypeScript 5 supports static private <code>#fields</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#nextSerialNumber</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> #</span><span style=\"color: #8250DF\">generateSerialNumber</span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#nextSerialNumber</span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#serialNumber</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\">#generateSerialNumber</span><span style=\"color: #24292F\">()</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwA4AMaDMoAmAVgDYAWAKAGMAbAQ0UVAGE7pQBvC0URAFzp8AllVABiAHaQAHnwDKMIXRoA5AK4BbAEYxUEzTujdeA4aLEBzSFOiDIC6EtUGYACgCUnUNEh810CVA+AAshRAA6SRl5RWV1bRgAakTQAF8KYw06AGtIVH5HCQtMuAATSBp8vkLingBPSDY9FyMeMURY5wT2AF4WNkirGzsHJ3jDDwyeKjgJArUqPgRXLNyqmoAaUA0yivWhIq2GptB9bs8uHh4QsPDVyFA+++Nr0Iid8ppH7d2aF6C3uFjr1QMDjOlUkA'>Try</a></div></pre>\n<p>This example is starting to make more sense now — the class-level counter is now not observable in any way from outside the class, either at build time or runtime.</p>\n<h3 id=\"private-field-presence-checks\" style=\"position:relative;\"><a href=\"#private-field-presence-checks\" aria-label=\"private field presence checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private field presence checks</h3>\n<p>Although the data held by a private field is private in a properly implemented JS runtime, we can still detect whether a private field <em>exists</em> without attempting to read it</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#nextSerialNumber</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> #</span><span style=\"color: #8250DF\">generateSerialNumber</span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#nextSerialNumber</span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#serialNumber</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\">#generateSerialNumber</span><span style=\"color: #24292F\">()</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.equals(other: unknown): number | false' >equals</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) other: unknown' >other</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">) {</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) other: unknown' >other</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: {}' >other</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;object&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line highlight'><span style=\"color: #24292F\">      #serialNumber </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: object' >other</data-lsp>) {</span></div><div class='line highlight'><span style=\"color: #24292F\">        <data-lsp lsp='(parameter) other: Car' style='border-bottom: solid 2px lightgrey;'>other</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>(parameter) other: Car</span></div><div class='line highlight'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) other: Car' >other</data-lsp>.#serialNumber </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#serialNumber</span></div><div class='line highlight'><span style=\"color: #24292F\">      }</span></div><div class='line highlight'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line highlight'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c1: Car' >c1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Hilux\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">1987</span><span style=\"color: #24292F\">)</span></div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c2: Car' >c2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const c1: Car' >c1</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\"><data-lsp lsp='const c2: Car' >c2</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.equals(other: unknown): number | false' >equals</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const c1: Car' >c1</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oQC5iwS2GgGIA7AUwA8sBlMhPMEAOQFcBbAIzoC5oT2uCdJhz5CRAOZlyCXGVr1GrTnQAUAShTQEZLCwQloWABZ4IAOlKUadBswF0A1I+gBfVMLZgA1mV7Z6EglPAHsAEzIQfyxA4IwATzJEXn4VIQwiCFslByQAXjhESykZOQU7ZUENDwxgEJIAlmAsEIRVL19o2IAaaDZwyK68IN7E5L5czTQMDBMzcw6yaALF4VnTC36IkGW+gZA1ow3zMfzoU+F3DDIARxZGCFUQkx5oFhJvEhCAdxIpw7wADNoE8XkgAGTgw6zeIABzIIWBz2MdGWeQKAHIQhwAFZkZoY6CQ6HELKKexpaDDaDIuj-GYMmlg1AAehZjIwAD0APwkjA6PQGJkohCWMkVXK7OYWTLZCmCElXRkC-SGQEPMiXVDuOoNLDQYAARl25G+hTaACIACoheLPMAW3oWgASeBALAojughoAnAAOADs6lQuuwBoATLsjSHw+ZbvcQI8jeogA'>Try</a></div></pre>\n<p>Part of understanding what’s happening here is remembering the rules about JS private <code>#fields</code> and <code>#methods</code>. It may be true that another class has a private <code>#invoice_id</code> field, but instances of <code>Invoice</code> would not be able to read it. Thus, if <code>#invoice_id in other</code> evaluates to <code>true</code>, <code>other</code> <em>must</em> be an instance of <code>Invoice</code>. This is why we see the type of <code>other</code> change from <code>any</code> to <code>Invoice</code> after this check is performed.</p>\n<h3 id=\"readonly\" style=\"position:relative;\"><a href=\"#readonly\" aria-label=\"readonly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code></h3>\n<p>While not strictly an access modifier keyword (because it has nothing to do with visibility), TypeScript provides a <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly\"><code>readonly</code></a> keyword that can be used with class fields.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#nextSerialNumber</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> #</span><span style=\"color: #8250DF\">generateSerialNumber</span><span style=\"color: #24292F\">() { </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#nextSerialNumber</span><span style=\"color: #CF222E\">++</span><span style=\"color: #24292F\"> }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#serialNumber</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Car' >Car</data-lsp>.</span><span style=\"color: #8250DF\">#generateSerialNumber</span><span style=\"color: #24292F\">()</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.changeSerialNumber(num: number): void' >changeSerialNumber</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-err>#serialNumber</data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) num: number' >num</data-lsp></span></div><span class=\"error\"><span>Cannot assign to '#serialNumber' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to '#serialNumber' because it is a read-only property.</span><div class='line highlight'><span style=\"color: #24292F\">  }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAMYA2AhooqAMInSgDeeooiALiSwJYGgDEAdpAAeLAMowOJIgDkArgFsARjFR95S6I2ZtO3HgHNIA6O0hjoE6WpgAKAJT1Q0SCxnQ+oFgAsOiAHT8hUXFJWUUYAGpw0ABfPE0ABxkFIi5QORIAa0hUVnM+PQSklO45OAATSCIcljyCpkTk1IBPSBoVKw0mJxIyuD4iJt5EYMsw2gBeKhp-AyMTMwtQ9Ts4pgI+3JkCFgRrdKzq2oAaNPLKw458k5a20FUx+wYmJi8fX33IUEmPzRfvP1KFSIX1OQN+Hn+vhuE1A0M0sU0BE8JHyphGSxs93aD3o4Nefh4w3MIQ6IPu8Lw0SAA'>Try</a></div></pre>\n<h2 id=\"param-properties\" style=\"position:relative;\"><a href=\"#param-properties\" aria-label=\"param properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Param properties</h2>\n<p>Ok, let’s pop a stack frame. Now that we know about access modifier keywords, let’s return to an earlier code snippet from our discussion around class fields:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUOsgIYDOjoAwvaaAN7Wijz0A1pWKMyqSAHNe-aABNKyUeKkz8lDsUjl4AI0qkZ6aJDEV0WaKQAUA4ctITJAGlkKloM09frNobXoGAJTcMnxYABaojAB0dpSgALz8QjR84VGx8PKKSW6KYSSZMb6cyaUyAL7UlUA'>Try</a></div></pre>\n<p>TypeScript provides a more concise syntax for code like this, through the use of <em>param properties</em>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  ) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myCar: Car' >myCar</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const myCar: Car' >myCar</data-lsp>.<data-lsp lsp='(property) Car.make: string' >make</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>m</span>ake</span></li><li class=''><span><span class='result-found'>m</span>odel</span></li></ul></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUOsgIYDOjoAwvaaAN7WijrRIjMuXRZopABS8+oROQBGadKHj0A1pWLDSqSAHMANDL7ylGVdAAmlZNrJ6jJuYuWh8lDsUjl4CyqQyAJTcAL7U4bSCwqr47JwAvKCQlADubBySAEQAEoJW9FmGoFk46AKkVkWgAEwADACMAOxB1PBxHAB0aprUILJ8AHoAPkA'>Try</a></div></pre>\n<p>This is the only time you will see an access modifier keyword next to something other than a class member. Here’s what this syntax means, conceptually:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Car</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">make</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<blockquote>\n<p>The first argument passed to the constructor should be a <code>string</code>, and should be available within the scope of the constructor as <code>make</code>. This also creates a <code>public</code> class field on <code>Car</code> called <code>make</code> and pass it the value that was given to the constructor</p>\n</blockquote>\n<p>It is important to understand the order in which “constructor-stuff” runs.</p>\n<p>Here’s an example that will help us understand how this works:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.foo: void' >foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"honda\"</span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8C+AodpIwMJgCdoEAPAFwQDsATGeCJZdaaAMwHt3oBeaYdyhHYgEAOhDsA5gAoARNihsAlghDVoSykrJKwIJQC8EBWQEpmfARDIEArsDLsC0gA62ARvuDQAtmADWCABc0NYEmpKmKBYsELYuxtLmLCz8gsJiEjLyttbsPpaCNvaORNa2rKxmFhgYWFZkfDzQlAgA7tD4zrIAFgLUYGZAA'>Try</a></div></pre>\n<p>and the equivalent compiled output:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0A3069\">\"use strict\"</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Base</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Car</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Base</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">make</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.make </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> make;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.foo </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">        console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKATAAwCMArJgMYA2ekkoAQtxKgA3gF9M7Lj1ABhQqBIAPdCQB2AE14DIQ4ZlCgAZrFigAvKDaxVkWBxIA6DrCIAKAESduvQ6hId1UFRVDFQ8DlQALxICdwBKfUtrSHQCAFc2dFgCVwAHNIAjCLZQZDwAaxJKFIJgojiRRININNyY1wSDAysbO0dnN080lNhkJJtUjKyCUBS0w0N4xPFRIA'>Try</a></div></pre>\n<p>Note the following order of what ends up in the class constructor:</p>\n<ol>\n<li><code>super()</code></li>\n<li>param property initialization</li>\n<li>other class field initialization</li>\n<li>anything else that was in your constructor after <code>super()</code></li>\n</ol>\n<p>Also note that, while it is possible in JS to put stuff before <code>super()</code>, the use of class field initializers or param properties disallows this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(){</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;base constructor&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.foo: void' >foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"before super\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYDsA2AUAMYA2AhooqAEJmSgDeeooBcAdogC7QCuBHCACgCUDJkxbs4RSADoicAOYCA5ACMazNpx58EyoY1ABfPCcKlyoAMIlooSAA8OkVgBMK1RLVGgAZnDhQAF5NSWk5RQEAImIyCl8AS0giV1AE1gSOBJIiBIAvGCiDcS0uXn5oAQAHblVcglAAWxIAa0hUbXSFIXpDErDZeSUo1Uh-aFpEbirC4rEpmcq5-sQpQciY7k44RtDtcoRQTm5fXyLDEyMgA'>Try</a></div></pre>\n<h2 id=\"overrides\" style=\"position:relative;\"><a href=\"#overrides\" aria-label=\"overrides permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overrides</h2>\n<p>A common mistake, that has historically been difficult for TypeScript to assist with is typos when overriding a class method</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"beep\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.hoonk(): void' >hoonk</data-lsp></span><span style=\"color: #24292F\">() { </span><span style=\"color: #6E7781\">// OOPS!</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"BEEP\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t: Truck' >t</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Truck(): Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const t: Truck' >t</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">(); </span><span style=\"color: #6E7781\">// \"beep\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDCYCdoG8BQ1oAsD2A7A1gBQCUK6G0weE2IApgHQjYDmhARAEZ10AO7xcgF9UI1KEgwAKggCuwfNDoAPAC51cAExjwkaDDjxFSyaAHoz0APJWACgGUAhOQxVcNek1YcAQgFE-WwFhUVRxalVoSIBeaFw6AHdoGXljAG5UVQYcAhI080suHn4gA'>Try</a></div></pre>\n<p>In this case, it looks like the intent was to override the base class method, but because of the typo, we defined an entirely new method with a new name. TypeScript 5 includes an <code>override</code> keyword that makes this easier to spot</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"beep\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">override</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='(method) Truck.hoonk(): void' >hoonk</data-lsp></data-err></span><span style=\"color: #24292F\">() { </span><span style=\"color: #6E7781\">// OOPS!</span></div><span class=\"error\"><span>This member cannot have an 'override' modifier because it is not declared in the base class 'Car'. Did you mean 'honk'?</span><span class=\"code\">4117</span></span><span class=\"error-behind\">This member cannot have an 'override' modifier because it is not declared in the base class 'Car'. Did you mean 'honk'?</span><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"BEEP\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t: Truck' >t</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Truck(): Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const t: Truck' >t</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">(); </span><span style=\"color: #6E7781\">// \"beep\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYMHYBQBjAGwENFFQBhY6UAb11FAAs4A7AawAoBKOhx0PjaI4hSADpCcAOacARACNIkAA5zu-AL65tBEmVAAVaAFd87UJAAeAF0isAJuSo16jOADcY0AJYPIzHBsXLy0oCCgAPKRAAoAygCE-IxCrCJikjLyAEIAorkx6lo6uATCNqAVALygrJAA7kam5jwA3Lg24iwcbeFgispqQA'>Try</a></div></pre>\n<p>The error message even correctly guessed what we meant to do! There’s a compiler option called <code>noImplicitOverride</code> that you can enable to make sure that a correctly established <code>override</code> method <em>remains</em> an override</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"beep\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='(method) Truck.honk(): void' >honk</data-lsp></data-err></span><span style=\"color: #24292F\">() {</span></div><span class=\"error\"><span>This member must have an 'override' modifier because it overrides a member in the base class 'Car'.</span><span class=\"code\">4114</span></span><span class=\"error-behind\">This member must have an 'override' modifier because it overrides a member in the base class 'Car'.</span><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"BEEP\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t: Truck' >t</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Truck(): Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const t: Truck' >t</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">(); </span><span style=\"color: #6E7781\">// \"BEEP\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYNoFAggHZwCSAtgA4A2AlgMbUAuA8gG4zTUAmkOtlAhokSgAwv2igA3jlCgAFnAIBrABQBKKTNmhaixHEqQAdJTgBzFQCIARpEjlLarQF8cr3gKGgAKtACutEqgkAAeDJAEnMJiEtKyCsrqmto6egbGphaWAEIAorkACo4ubji8egyglQC8oASQAO4+-oHqANw4DEYJqmptoPg5+UVAA'>Try</a></div></pre>\n<p>look how, once the <code>override</code> is in place, a modification of the subclass gets our attention</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.logHonk(): void' >logHonk</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"beep\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">override</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='(method) Truck.honk(): void' >honk</data-lsp></data-err></span><span style=\"color: #24292F\">() {</span></div><span class=\"error\"><span>This member cannot have an 'override' modifier because it is not declared in the base class 'Car'.</span><span class=\"code\">4113</span></span><span class=\"error-behind\">This member cannot have an 'override' modifier because it is not declared in the base class 'Car'.</span><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"BEEP\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t: Truck' >t</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Truck(): Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const t: Truck' >t</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.honk(): void' >honk</data-lsp></span><span style=\"color: #24292F\">(); </span><span style=\"color: #6E7781\">// \"BEEP\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYMGYBQIIA7OASQFsAHAGwEsBjGgFwHkA3GaGgE0lzqoCGiRKADCA6KADeuUKCpwA5gAk4hANYAKAJTTZc0HTWI4VSADoFizQCIARpEgUb2-QF9cHvoOGgAKtAArnTqoJAAHoyQhFwi4pIycnDssNyQoAAWalq6iQZGhCZmlkq2AEIAohUACi7unrh8xoygLQC8oISQAO7+QSE6ANy4jOZZGkOgBDaVNTZAA'>Try</a></div></pre>\n<p>It’s common to miss these kinds of things when refactoring, because it’s of course valid to create non-overriding methods on subclasses.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#fields-and-methods\">Fields and methods</a></p>\n<ul>\n<li><a href=\"#static-fields-methods-and-blocks\"><code>static</code> fields, methods and blocks</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#access-modifier-keywords\">Access modifier keywords</a></p>\n<ul>\n<li><a href=\"#public-private-and-protected\"><code>public</code>, <code>private</code> and <code>protected</code></a></li>\n<li><a href=\"#js-private-fields\">JS private <code>#fields</code></a></li>\n<li><a href=\"#private-field-presence-checks\">Private field presence checks</a></li>\n<li><a href=\"#readonly\"><code>readonly</code></a></li>\n</ul>\n</li>\n<li><a href=\"#param-properties\">Param properties</a></li>\n<li><a href=\"#overrides\">Overrides</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/11-classes/"},"frontmatter":{"title":"Classes","course":"fundamentals-v4","date":"October 23, 2023","description":"TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a close look\nclass fields, access modifier keywords and more!\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/11-classes/","title":"Classes","course":"fundamentals-v4","order":11,"previous":{"fields":{"slug":"/course/fundamentals-v4/10-callables/"},"frontmatter":{"title":"Callables and Constructables","order":10,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/12-type-guards/"},"frontmatter":{"title":"Type guards and narrowing","order":12,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}