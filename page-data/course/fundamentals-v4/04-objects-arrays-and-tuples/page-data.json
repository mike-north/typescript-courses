{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/04-objects-arrays-and-tuples/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"58a970c1-b7e9-594c-aa0d-82c1edc04da3","excerpt":"Now that we know how to type simple variables and functions, let’s make things\na bit more interesting with collections. In JavaScript, this means Objects and…","html":"<p>Now that we know how to type simple variables and functions, let’s make things\na bit more interesting with collections. In JavaScript, this means Objects and Arrays.</p>\n<h2 id=\"objects\" style=\"position:relative;\"><a href=\"#objects\" aria-label=\"objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects</h2>\n<p>In general, object types are defined by:</p>\n<ul>\n<li>The <strong>names</strong> of the properties that are (or may be) present</li>\n<li>The <strong>types</strong> of those properties</li>\n</ul>\n<p>For example, if we had the concept of a <code>Car</code> like “2002 Toyota Corolla” with properties:</p>\n<ul>\n<li><code>make</code>: the manufacturer (in this case, “Toyota”)</li>\n<li><code>model</code>: the particular product (in this case, “Corolla”)</li>\n<li><code>year</code>: the “model year” of the product (in this case, 2002)</li>\n</ul>\n<p>We could create a JavaScript object to represent this information:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">make</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">model</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">year</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">2002</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>The type that would describe this object’s structure:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">make</span><span style=\"color: #24292F\">: string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">model</span><span style=\"color: #24292F\">: string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">year</span><span style=\"color: #24292F\">: number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>We can use this type with a variable using the same <code>: foo</code> notation we’ve already discussed!</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAxghgTgLggbwFAQgWxgaxEgZzDgEsA7Ac3SwHsATEYQ48qjATxHiTIFdMARiDioAvkA'>Try</a></div></pre>\n<p>We could create a function to print values of this type to the console:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Print information about a car to the console</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">car</span><span style=\"color: #6E7781\"> - the car to print</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #0A3069\">} ${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #0A3069\">} (${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #0A3069\">})`</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgFAnAlgOwC6RQMwPbwLYCGqi2ykBARtgK7oGQDGB8kq2rAFgKaOkDO2ADZcoMAAIAHZgTyNmkALSceTFm0gSkaUcHCZqyBsVIatqAMLMAFKoBckAN5RIhANZd7fVFoDmzvNgAJlyCnt4ofpCQAJ5czPbI1HgUXPDgAL4AlI7ODPxCXAB0gtg+VgAGACQOqoVuXOmQ1bUBwYKNVs3MhbHMWeWZGUA'>Try</a></div></pre>\n<p>Notice that we can use this exact same kind of type annotation for function arguments.</p>\n<p>At this point, you can start to see that we see “completions” when we start\nusing <code>car</code> in the body of this function.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Print information about a car to the console</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">car</span><span style=\"color: #6E7781\"> - the car to print</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='any' >m</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>m</span>ake</span></li><li class=''><span><span class='result-found'>m</span>odel</span></li></ul></span></div><div class='line'><span style=\"color: #0A3069\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTACDsHsFECdcrAzgKGAKnSgBO7AFWAS3ABdsSAzRAWwENSjJxs6AjSAV3LuwGM6sbKUjCAFgFN+zJJAA2EnHlAAHQXRr9B2ALTipAoSOwriZJcBSVO4Po2YmzpAMKCAFIYBc2AN45s9ADWEt5IpGYA5v40kAAmEnKh4SRR2NgAnhKC3uCcNGwSsCgAvgCUvv58MvISAHRykBFuAAYAJD6GtTRowGl9-QODAHoAPiVAA'>Try</a></div></pre>\n<h3 id=\"optional-properties\" style=\"position:relative;\"><a href=\"#optional-properties\" aria-label=\"optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Properties</h3>\n<p>What if we take our car example a bit further by adding a fourth property that’s only present sometimes?</p>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Is present</th>\n<th>Type</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>make</code></td>\n<td><em>Always</em></td>\n<td><code>string</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>model</code></td>\n<td><em>Always</em></td>\n<td><code>string</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>year</code></td>\n<td><em>Always</em></td>\n<td><code>number</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>chargeVoltage</code></td>\n<td><strong>Sometimes</strong></td>\n<td><code>number</code></td>\n<td>not present unless car is electric</td>\n</tr>\n</tbody>\n</table>\n<p>We can state that this property is optional using the <code>?</code> operator:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) chargeVoltage?: number | undefined' >chargeVoltage</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let str: string' >str</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #0A3069\">} ${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #0A3069\">} (${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #0A3069\">})`</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp>.<data-lsp lsp='(property) chargeVoltage?: number | undefined' style='border-bottom: solid 2px lightgrey;'>chargeVoltage</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(property) chargeVoltage?: number | undefined</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp>.<data-lsp lsp='(property) chargeVoltage?: number | undefined' >chargeVoltage</data-lsp> </span><span style=\"color: #CF222E\">!==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"undefined\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let str: string' >str</data-lsp> </span><span style=\"color: #CF222E\">+=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`// ${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) chargeVoltage?: number' style='border-bottom: solid 2px lightgrey;'>chargeVoltage</data-lsp></span><span style=\"color: #0A3069\">}v`</span></div><div class='meta-line'><span class='popover-prefix'>                          </span><span class='popover'><div class='arrow'></div>(property) chargeVoltage?: number</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let str: string' >str</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAwgQ1QCgjwC5EBvAKEUQFscBrAU1IGcp0wBzK2uAE0YAbVuwzdqAT0YlEYEDQBGjVDwgALPJ0YA1OIKg4tAflJzFyigF8AlOR6DGURG1SIAvIgAGAEjJFUAHR0TJaIvv5B-EKh+OF4AVJ4Np6q8eqaOnoGWjwA9LnU1AB6RjwwwIj4UBLIjHAVEemoWrr6hoyIAIRuHgBE4ALAGIx8vdY81C6IANQenvlhfmkazZltWpYAbinUC4X7B-slqggseowBgnCc+C7jlkA'>Try</a></div></pre>\n<p>Note that the type of <code>chargeVoltage</code> is now <code>number | undefined</code>. We’ll go deeper into what the <code>|</code>\nmeans, but for now you can consider it <strong>OR, for types</strong>. <code>number | undefined</code> means “either <code>number</code>\nor <code>undefined</code>“.</p>\n<p>Our <code>printCar</code> function now works, regardless of whether the <code>chargeVoltage</code> property is present or not:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Works</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) make: string' >make</data-lsp>: </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) model: string' >model</data-lsp>: </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) year: number' >year</data-lsp>: </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">})</span></div><div class='line'><span style=\"color: #6E7781\">// Also works</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) make: string' >make</data-lsp>: </span><span style=\"color: #0A3069\">\"Tesla\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) model: string' >model</data-lsp>: </span><span style=\"color: #0A3069\">\"Model 3\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) year: number' >year</data-lsp>: </span><span style=\"color: #0550AE\">2020</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) chargeVoltage?: number | undefined' >chargeVoltage</data-lsp>: </span><span style=\"color: #0550AE\">220</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAwgQ1QCgjwC5EBvAKEUQFscBrAU1IGcp0wBzK2uAE0YAbVuwzdqAT0YlEYEDQBGjVDwgALPJ0YA1OIKg4tAflJzFyigF8AlOR6DGURG1SIAvIgAGAEjJFUAHR0TJaIvv5B-EKh+OF4AVJ4Np6q8eqaOnoGWjwA9LnU1AB6RjwwwIj4UBLIjHAVEemoWrr6hoyIAIRuHgBE4ALAGIx8vdY81C6IANQenvlhfmkazZltWpYAbinUC4X7B-slqggseowBgnCc+C7jlhQU+QUAtG8QIFBvL08FAOpwVD0FgUNAYbB4fCUajBZiIXoACQQfBwvQANDwaFFhPCAIIQCCA0YYyTSVCkABMAAYAIwAdgxNl+iFxgjOiAA7oDgaCOBCCNDaAw4b0ACqMFiCVEk3gCHG9ACy2MQAGZ0TxEuTENTqTKmi0su1KbqrNYgA'>Try</a></div></pre>\n<h3 id=\"excess-property-checking\" style=\"position:relative;\"><a href=\"#excess-property-checking\" aria-label=\"excess property checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excess property checking</h3>\n<p>TypeScript helps us catch a particular type of problem around the use of object literals.\nLet’s look at the situation where the error arises:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) chargeVoltage?: number | undefined' >chargeVoltage</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// implementation removed for simplicity</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;    chargeVoltage?: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) make: string' >make</data-lsp>: </span><span style=\"color: #0A3069\">\"Tesla\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) model: string' >model</data-lsp>: </span><span style=\"color: #0A3069\">\"Model 3\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) year: number' >year</data-lsp>: </span><span style=\"color: #0550AE\">2020</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-err><data-lsp lsp='(property) color: string' >color</data-lsp></data-err>: </span><span style=\"color: #0A3069\">\"RED\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// &lt;0------ EXTRA PROPERTY</span></div><span class=\"error\"><span>Object literal may only specify known properties, and 'color' does not exist in type '{ make: string; model: string; year: number; chargeVoltage?: number | undefined; }'.</span><span class=\"code\">2353</span></span><span class=\"error-behind\">Object literal may only specify known properties, and 'color' does not exist in type '{ make: string; model: string; year: number; chargeVoltage?: number | undefined; }'.</span><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWdGcMAoAMwFcA7AYwBcBLOC0AB2jopoGEBDaACiq9UAbyKhQAW24BrSKkQ02FAOZjJcACaQANvMXtV4gJ6QhoCmQkAjGGqoALXssgA1ONprdnAflQXrtgC+AJSgouIgoHQSzNqQEpAc3PSMoNDxcABukBqgJAigiNGxdFR0NEZEgURErOxcvHzhkjJyoABEACqQiNrc7QA0ahKaOqjtALKj2qAYg2omZmgADCtD4lTuCOMASgCiACKDoJEAPMsAtFfXoHsAGp07AIKgAAo7APKvezudAJpVYJAA'>Try</a></div></pre>\n<p>The important part of this error message is:</p>\n<blockquote>\n<p>Object literal may only specify known properties, and ‘color’ does not exist in type &#x3C;the type the function expects></p>\n</blockquote>\n<p>In this situation, within the body of the <code>printCar</code> function, we cannot access the <code>color</code> property since it’s not part\nof the argument type. Thus, we’re defining a property on this object, that we have no hope of safely accessing\nlater on!</p>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-bulb\"> Try fixing this three ways in the TypeScript playground</div><div class=\"custom-block-body\"><ol>\n<li>Remove the <code>color</code> property from the object</li>\n<li>Add a <code>color: string</code> to the function argument type</li>\n<li>Create a variable to hold this value, and then pass the variable into the <code>printCar</code> function</li>\n</ol></div></div>\n<h3 id=\"index-signatures\" style=\"position:relative;\"><a href=\"#index-signatures\" aria-label=\"index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index signatures</h3>\n<p>Sometimes we need to represent a type for <strong>dictionaries</strong>, where\nvalues of a consistent type are retrievable by keys.</p>\n<p>Let’s consider the following collection of phone numbers:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const phones: {&#10;    home: {&#10;        country: string;&#10;        area: string;&#10;        number: string;&#10;    };&#10;    work: {&#10;        country: string;&#10;        area: string;&#10;        number: string;&#10;    };&#10;    fax: {&#10;        country: string;&#10;        area: string;&#10;        number: string;&#10;    };&#10;}' >phones</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) home: {&#10;    country: string;&#10;    area: string;&#10;    number: string;&#10;}' >home</data-lsp>: { <data-lsp lsp='(property) country: string' >country</data-lsp>: </span><span style=\"color: #0A3069\">\"+1\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) area: string' >area</data-lsp>: </span><span style=\"color: #0A3069\">\"211\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) number: string' >number</data-lsp>: </span><span style=\"color: #0A3069\">\"652-4515\"</span><span style=\"color: #24292F\"> },</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) work: {&#10;    country: string;&#10;    area: string;&#10;    number: string;&#10;}' >work</data-lsp>: { <data-lsp lsp='(property) country: string' >country</data-lsp>: </span><span style=\"color: #0A3069\">\"+1\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) area: string' >area</data-lsp>: </span><span style=\"color: #0A3069\">\"670\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) number: string' >number</data-lsp>: </span><span style=\"color: #0A3069\">\"752-5856\"</span><span style=\"color: #24292F\"> },</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) fax: {&#10;    country: string;&#10;    area: string;&#10;    number: string;&#10;}' >fax</data-lsp>: { <data-lsp lsp='(property) country: string' >country</data-lsp>: </span><span style=\"color: #0A3069\">\"+1\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) area: string' >area</data-lsp>: </span><span style=\"color: #0A3069\">\"322\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) number: string' >number</data-lsp>: </span><span style=\"color: #0A3069\">\"525-4357\"</span><span style=\"color: #24292F\"> },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwjAvDA3gKBjAegPgCdkooBLZEgWkoHMwQy8YkBbZALmxlACuYKCQCevAEQBqAIwSANDACGZJZIBMMuYrACOAIxqSAbAFZ1tACymZpiTAC+8tgHcWAa15Z+IISPEw0trKqiYA7AAMCjC6BkaBYea0pgAcpsb2TmwAZkoAHl4+fmKSstEqyGqBAMzq6tGxhiSS5qZW1aZhmc4OQA'>Try</a></div></pre>\n<p>Clearly it seems that we can store phone numbers under a “key” — in this case\n<code>home</code>, <code>office</code>, <code>fax</code>, and possibly other words of our choosing — and\neach phone number is comprised of three strings.</p>\n<p>We could describe this value using what’s called an <em>index signature</em>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const phones: {&#10;    [k: string]: {&#10;        country: string;&#10;        area: string;&#10;        number: string;&#10;    };&#10;}' >phones</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) country: string' >country</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) area: string' >area</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) number: string' >number</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const phones: {&#10;    [k: string]: {&#10;        country: string;&#10;        area: string;&#10;        number: string;&#10;    };&#10;}' >phones</data-lsp>.<data-lsp lsp='(index) phones[string]: {&#10;    country: string;&#10;    area: string;&#10;    number: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>fax</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(index) phones[string]: {\n    country: string;\n    area: string;\n    number: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwgLhgbwFAxgbQGsNoAnASzAHMBdDHPPUAVzClIE8T3KrdGAhqWQDuFavzxhmAWwBGyUmN78AvtlUwAvFnXZEKCADoAZgIAe2APRXGeAHoB+IA'>Try</a></div></pre>\n<p>Now, no matter what key we look up, we get an object that represents\na phone number.</p>\n<h2 id=\"array-types\" style=\"position:relative;\"><a href=\"#array-types\" aria-label=\"array types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Types</h2>\n<p>Describing types for arrays is often as easy as adding <code>[]</code> to the end of the\narray member’s type. For example the type for <em>an array of <code>string</code>s</em> would look like <code>string[]</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const fileExtensions: string[]' style='border-bottom: solid 2px lightgrey;'>fileExtensions</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"js\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"ts\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>const fileExtensions: string[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAZgSwDYFMCiAPKLIPBGAXhgG0AiAKwjIBoYypqBdAKAHo2YvuA9AfiA'>Try</a></div></pre>\n<p>You could use our more complicated car type too, following the type for our\n3-property object with <code>[]</code> as shown in the tooltip below:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const cars: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}[]' style='border-bottom: solid 2px lightgrey;'>cars</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const cars: {\n    make: string;\n    model: string;\n    year: number;\n}[]</span></div><div class='line'><span style=\"color: #24292F\">  {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(property) make: string' >make</data-lsp>: </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(property) model: string' >model</data-lsp>: </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(property) year: number' >year</data-lsp>: </span><span style=\"color: #0550AE\">2002</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBMCGAnCMC8MDaAoGMD0euMAegPw4wDeFuAtvANYCmAXDAEQAqIAniFPHYAaGjFogAJkwA2bdgGEQiENOmCRRGDyZI2AJgAMBvRpgBfEQF0gA'>Try</a></div></pre>\n<h2 id=\"tuples\" style=\"position:relative;\"><a href=\"#tuples\" aria-label=\"tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples</h2>\n<p>Sometimes we may want to work with a multi-element, ordered data structure, where\nposition of each item has some special meaning or convention. This kind of\nstructure is often called a <a href=\"https://en.wikipedia.org/wiki/Tuple\">tuple</a>.</p>\n<p>Let’s imagine we define a convention where we can represent the same “2002 Toyota Corolla”\nas</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">//          [Year, Make,     Model    ]</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> myCar </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">2002</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #6E7781\">// destructured assignment is convenient here!</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">year</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">make</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">model</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> myCar</span></div></code></div></pre>\n<p>Let’s see how TypeScript handles inference in this case:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myCar: (string | number)[]' style='border-bottom: solid 2px lightgrey;'>myCar</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">2002</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let myCar: (string | number)[]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\"><data-lsp lsp='const year: string | number' >year</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const make: string | number' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const model: string | number' style='border-bottom: solid 2px lightgrey;'>model</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                    </span><span class='popover'><div class='arrow'></div>const model: string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngwgQwE4QLwQNoCYAMOsA0EARACoD2M5YCxRxc5S5wwtAugFAD03E--AHoB+TgGNyAOwDOkDDBDIiUBAGsQy8gBMQwdmmjxkPPgLPmLEEUA'>Try</a></div></pre>\n<p><code>|</code> means “OR”, so we can think of <code>string | number</code> means <em>either a string or a number</em>.</p>\n<p>TypeScript has chosen <strong>the most specific type that describes the entire contents of the array</strong>.\nThis is not quite what we wanted, in that:</p>\n<ul>\n<li>it allows us to break our convention where the year <em>always</em> comes first</li>\n<li>it doesn’t quite help us with the “finite length” aspect of tuples</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">2002</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">// not the same convention or length!</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Sedan\"</span><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngwgQwE4QLwQNoCYAMOsA0EARACoD2M5YCxRxc5S5wwtAugFAD03P3EAHbUIYABYgIAZwRRJAY3KCAbiEFgAlkohMIoQQHNxAQk6xEKdBmIAJJQBNaRXAEYA7PQCC8xUnt0SAGUQR0FidiA'>Try</a></div></pre>\n<p>In this case, TypeScript could infer myCar to be one of two things. Which\ndo you think is more commonly used?</p>\n<div class=\"custom-block question\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-grey_question\" data-icon=\"emoji-grey_question\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAQAAAAAYLlVAAAD6ElEQVRo3u2UXUxbZQCGj5s34jKX6YWOmOzGxJ8YTKZZ4sV24YWJN0YzMr1ZYqImzsxkm9HtAinMTJGFMhClCg4yNv6RrdBR2tLCoPT/h7bQn3Mopa6QUSBKcDBMHm9OKizeGOHbTd8n5/p9vnPO90pSPvnk85+j2ZU8OPvmnVN3vsnoMk2Z+szXmY9mj6T3CylPvjJbsmBdTq2yxr0ca6zcX4ykK5PP72C19dHZ45mRlY01/mSZBdKkmFWf38iyyhqLK7P1M8/skIBsWOYeWdIoJEggo+SQSSCT5nfWmVfk13fmDZiiJB8o3opMnAzrZBZjr+2AQM+JYeIoyChMb0JB3kScNKsko8oT2y7Q8fStpQjTyMQI4mSUEcbwMoWMTEJFJsYcWeLlO/AOertcBDDTxk9rtYrWUW2+7Km7ex0bERLEN7GAMh/Z/mvZ/n4bDetV+u9OVLygKdDskqTi3ZqnKo7VOPsIb6qPkSJJ8Ni2CzQeqL528fC/DFOB7oaVKLEccaJ4Lgncxh8Le7NBYkRVYkRx9gidZ32rlyhTKlHCjA4JFTCVepliUmWKAJZ+oQKjZRNbBFwYdEIFPJ0xJomohBmm51OB9fb94TmFEGHChIngR7/e8aJAgeDJJAkmCBEiRJjbtJoF1jufnEzNM6ESwksvze8IFAjo5kkQIEiQCYIM0mgp3i2s3vfeDHP4CBAgQJBRmlZrXxZXXyQvLxHAjx8/ARy0UntKWL1/XzCcJYIXHz78uOmmplncx3/E375IAg8+fPhwc5MaW+Xj4sbnsxQpXHjx4sXDAN/HqgqF1Tuei/wxhxuPipWfV6peFXn721MEceLGjYcxWtB+LLDecSjwVxwHLhU9dW2SyDjqJ/HhxIULN8M0L2kPCqw37HWkQzhy9KPTCj2/5cg4HsbV+jE67tcXCRUwfjLKuIoDG61BgdsvSZLU9+0o49ixY2ccC21XJLG5UWvDzhhjjGHHQme5YIGuSot6fjt2rPR8KVig6asmrm6i5aJggaqjpbqSHKU67btSPg8j1n2WQuueh1V+3DMwnZrJyrKzY+gNweUdj41cT3MXhQTTLKBgKxMqYK5TiGPGiBEjVlKEMH0grH6gaGTDjxGzigkzQYamDXsFCejLb2PFlBMwM8gIVvRvCRLo7hjEjGkLFgboPCtI4FpvHyYGH+AmV0sECTTquhlUf8B/aKfhQ0EC1cVXMGBkIIcRPbqNqpcECWgKKkMt3Np0+n5+oaJd4A6UHL6w1MCv9GOgny5+oGxSc0DoFJ07dM5WziW0VFK6/kX7mWcl0Tm55/TbZy+cufz5+dNHpXzyyed/5W8eveAhO8FQmgAAAABJRU5ErkJggg==\" title=\"emoji-grey_question\"> Which is the more useful assumption, most of the time?</div><div class=\"custom-block-body\"><ol>\n<li><code>[2002, \"Toyota\", \"Corolla\"]</code> should be assumed to be a mixed array of numbers and strings</li>\n<li><code>[2002, \"Toyota\", \"Corolla\"]</code> should be assumed to be a tuple of fixed length (3)</li>\n</ol><p><strong>Consider</strong>: Which do you use more often?</p></div></div>\n<p>If TypeScript made a <em>more specific</em> assumption as it inferred the type of <code>myCar</code>,\nit would get in our way much of the time…</p>\n<p>There’s no major problem here, but it does mean that <strong>we need to explicitly state the type of a tuple</strong>\nwhenever we declare one.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">2002</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"Toyota\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"Corolla\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #6E7781\">// ERROR: not the right convention</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\"><data-err>&quot;Honda&quot;</data-err></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-err>2017</data-err></span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">]</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</br>Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322<br/>2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</br>Type 'number' is not assignable to type 'string'.</span><div class='line'><span style=\"color: #6E7781\">// ERROR: too many items</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Sedan\"</span><span style=\"color: #24292F\">]</span></div><span class=\"error\"><span>Type '[number, string, string, string]' is not assignable to type '[number, string, string]'.\n  Source has 4 element(s) but target allows only 3.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '[number, string, string, string]' is not assignable to type '[number, string, string]'.\n  Source has 4 element(s) but target allows only 3.</span><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\"><data-lsp lsp='const year: number' style='border-bottom: solid 2px lightgrey;'>year</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const make: string' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const model: string' >model</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const year: number</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const make: string' style='border-bottom: solid 2px lightgrey;'>make</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const make: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vVnnsAoAG0gBdQBbATwGEBDaVAbQDsBXSgIxgBpREZaAEtWAc36CR4gLqgAvKGaFQ6AAxq0vFaABEAFTjU4Zeru2rdtBHGLEz2mYRCgAogCV3AeXepWJ0DIAC0hQETEgigBjOFYAN0hWMmFYwhoGaAUlXQAJWIATB3UARgB2fl0AQSiY6HzdJxcPb19AuDgqelZqUGEySEpENLpGLOY0NTKKvNZC8z1q2vqKgGVIQtYGwhjWQSVqSEZ+SnoAa0hjuHzIYjlFdMZnMFUXgD0AfjSzyCfQD6A'>Try</a></div></pre>\n<p>Now, we get errors in the places we expect, and all types work out as we hoped.</p>\n<h3 id=\"readonly-tuples\" style=\"position:relative;\"><a href=\"#readonly-tuples\" aria-label=\"readonly tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> tuples</h3>\n<p>Tuples are just regular JS <code>Array</code>s.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Source</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEGUHsFcCcGMCmAoekB2BnALqd0BbABQEMBLWALlAG18CAjRWAGj0KdgF1QBeWgCxsArFwDcQA'>Try</a></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0A3069\">\"use strict\"</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">// Compiled output (ES5)</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> numPair </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">];</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFsHsBMFcA2BTAXKAxtSMB2ArAZwCgQIAXAQwCcBzZc9AUQGUBWUscQgC2gHcmkAJblOoAMLYADsJSxQ0eOWnLQAClZsAlMSy5C5ULniQACpWHV0AbROQARsmoAaY6afUAuqAC8oGwAWNzYvAG4gA'>Try</a></div></pre>\n<p>This imposes some degree of limitation on how tuples can be typed. For example, an <code>Array</code>\nallows new things to be <code>.push(...)</code>ed into them, allow <code>.splice(...)</code> and so on. At runtime\nthese methods will exist on every tuple, and the types reflect that.</p>\n<p>Typescript provides a lot of the support you’d hope for on assignment:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const numPair: [number, number]' style='border-bottom: solid 2px lightgrey;'>numPair</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">];</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const numPair: [number, number]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-err><data-lsp lsp='const numTriplet: [number, number, number]' >numTriplet</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\">];</span></div><span class=\"error\"><span>Type '[number]' is not assignable to type '[number, number, number]'.\n  Source has 1 element(s) but target requires 3.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '[number]' is not assignable to type '[number, number, number]'.\n  Source has 1 element(s) but target requires 3.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGM4A7RAF1EIFcBbABQEMBLaVAbUqoCMYAac6r6AF1QAXlAsALLwCsggNw4QoZcoB6AfnxFSfKgBVoDAA4AbSCVbsBvKz10DhYlgHZ5QA'>Try</a></div></pre>\n<p>and we see something interesting happening with <code>.length</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">[</span><span style=\"color: #0550AE\">101</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">102</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">103</span><span style=\"color: #24292F\">].</span><span style=\"color: #0550AE\"><data-lsp lsp='(property) Array&lt;number>.length: number' style='border-bottom: solid 2px lightgrey;'>length</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>(property) Array&lt;number&gt;.length: number</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #0550AE\"><data-lsp lsp='(property) length: 2' style='border-bottom: solid 2px lightgrey;'>length</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) length: 2</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBGCuBbACgQwJYCcBcMDaCiARgKaYA0cSpmAujALz4AslArLQNwBQA9PzAC0w4PCjDB3PAEYADNMpyATItkBmWgDoANiTABzKAAs+vGOYuWrMAHoB+boTRYdewyYHX7QA'>Try</a></div></pre>\n<p>but we get no protection around <code>push</code> and <code>pop</code>, which effectively would change the type of the tuple</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// [4, 5, 6]</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.pop(): number | undefined' >pop</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// [4, 5]</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.pop(): number | undefined' >pop</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// [4]</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.pop(): number | undefined' >pop</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// []</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const numPair: [number, number]' >numPair</data-lsp>.</span><span style=\"color: #0550AE\"><data-lsp lsp='(property) length: 2' style='border-bottom: solid 2px lightgrey;'>length</data-lsp></span><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// ❌ DANGER ❌</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) length: 2</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBGCuBbACgQwJYCcBcMDaCiARgKaYA0cSpmAujALz4AslArLQNwBQA9PzAC0w4PCjDB3QmiwA6AA7wIACwAUANgCUMAXlYw2ldbSlIZmBSHmrtu-R1MoMF+VZs7eLE9OeXrtzzwTR3NZABsSMABzKGUYDxhAGXIYABEAQQA5AHEAUQAlJL5PeJL4gD0AfiA'>Try</a></div></pre>\n<p>If we are ok with treating this tuple as read-only, we can state so, and get a lot more safety\naround mutation.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const roNumPair: readonly [number, number]' >roNumPair</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const roNumPair: readonly [number, number]' >roNumPair</data-lsp>.</span><span style=\"color: #0550AE\"><data-lsp lsp='(property) length: 2' style='border-bottom: solid 2px lightgrey;'>length</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(property) length: 2</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const roNumPair: readonly [number, number]' >roNumPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='any' >push</data-lsp></data-err></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// [4, 5, 6]</span></div><span class=\"error\"><span>Property 'push' does not exist on type 'readonly [number, number]'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'push' does not exist on type 'readonly [number, number]'.</span><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const roNumPair: readonly [number, number]' >roNumPair</data-lsp>.</span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='any' >pop</data-lsp></data-err></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// [4, 5]</span></div><span class=\"error\"><span>Property 'pop' does not exist on type 'readonly [number, number]'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'pop' does not exist on type 'readonly [number, number]'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBjOAO0QBdR4A5AVwFsAFAQwEtpVpJGATYgGwE9QAbSJ0ARjAA0oUbQnQAuqAC8wgCzSArAtxU6TVgDpekIgHNSAC1whQd+w4B6Afl1waDFtEMAHaoksACgA2AEpQWyENUE1pYJ09TyMfOB9A8Mjo7SA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#objects\">Objects</a></p>\n<ul>\n<li><a href=\"#optional-properties\">Optional Properties</a></li>\n<li><a href=\"#excess-property-checking\">Excess property checking</a></li>\n<li><a href=\"#index-signatures\">Index signatures</a></li>\n</ul>\n</li>\n<li><a href=\"#array-types\">Array Types</a></li>\n<li>\n<p><a href=\"#tuples\">Tuples</a></p>\n<ul>\n<li><a href=\"#readonly-tuples\"><code>readonly</code> tuples</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/04-objects-arrays-and-tuples/"},"frontmatter":{"title":"Objects, Arrays and Tuples","course":"fundamentals-v4","date":"October 23, 2023","description":"Now that we know how to type simple variables and functions, let's make things\na bit more interesting with collections: in JavaScript this includes Objects and Arrays.\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/04-objects-arrays-and-tuples/","title":"Objects, Arrays and Tuples","course":"fundamentals-v4","order":4,"previous":{"fields":{"slug":"/course/fundamentals-v4/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","order":3,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/05-structural-vs-nominal-types/"},"frontmatter":{"title":"Structural vs. Nominal Types","order":5,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}