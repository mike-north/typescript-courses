{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/10-callables/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"a93b90ed-a02b-526f-a291-88a515d0ece6","excerpt":"We have dealt with function argument and return types, but there\nare a few more in-depth concepts we need to cover. Callable types Both type aliases and…","html":"<p>We have dealt with function argument and return types, but there\nare a few more in-depth concepts we need to cover.</p>\n<h2 id=\"callable-types\" style=\"position:relative;\"><a href=\"#callable-types\" aria-label=\"callable types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callable types</h2>\n<p>Both type aliases and interfaces offer the capability to describe <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures\">call signatures</a>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface TwoNumberCalculation' >TwoNumberCalculation</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TwoNumberCalc = (x: number, y: number) => number' >TwoNumberCalc</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const add: TwoNumberCalculation' >add</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface TwoNumberCalculation' >TwoNumberCalculation</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' style='border-bottom: solid 2px lightgrey;'>a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                                  </span><span class='popover'><div class='arrow'></div>(parameter) a: number</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const subtract: TwoNumberCalc' >subtract</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TwoNumberCalc = (x: number, y: number) => number' >TwoNumberCalc</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: number' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) x: number' style='border-bottom: solid 2px lightgrey;'>x</data-lsp> </span><span style=\"color: #CF222E\">-</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) y: number' >y</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                                </span><span class='popover'><div class='arrow'></div>(parameter) x: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCoHcD2A5ArgWwCNoBhOAGwV3LjGExGQG8AoZZACgA8AuZEAsSgAaZAE8+AotACUkwdBYBfFizBiADigw4FUMpWQBeTr357RE89KgzjAPmtDVCBgGcwyOABNvfHXg2BlQ0dAzGnHCihHZGjnDIANTIhCwA9GnsWdk5uXm5AHoA-CyuIB7IbriEYFCIYP5YgULBEdyWsY5cyAC04umZ+UPDWcVAA'>Try</a></div></pre>\n<p>Let’s pause for a minute to note:</p>\n<ul>\n<li>The return type for an interface is <code>:number</code>, and for the type alias it’s <code>=> number</code></li>\n<li>Because we provide types for the functions <code>add</code> and <code>subtract</code>, we don’t need to provide type annotations for each individual function’s argument list or return type</li>\n</ul>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></h3>\n<p>Sometimes functions don’t return anything, and we know from\nexperience with JavaScript, what actually happens in the situation below\nis that <code>x</code> will be <code>undefined</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printFormattedJSON(obj: string[]): void' >printFormattedJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) JSON.stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string (+1 overload)' >stringify</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp>, </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"  \"</span><span style=\"color: #24292F\">))</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const x: void' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printFormattedJSON(obj: string[]): void' >printFormattedJSON</data-lsp></span><span style=\"color: #24292F\">([</span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"world\"</span><span style=\"color: #24292F\">])</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const x: void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAYnVBbAQyigFMATAKQGUB5AOQAo4AjAKwC5EBnKdMAcwDaAXQCUiAN4AoRIggIucADYkAdErj8G1eqp59+MYAE8mbADSIwIJUssAiWfdGipAXylT5YHogAeiAC8KHzYuITE5DqMgvYAFiS2cPYOAO64SmT2YlIA9LmysgB6APxAA'>Try</a></div></pre>\n<p>So why is it showing up as <code>void</code>?</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#void\"><code>void</code></a> is a special type, that’s specifically used to describe\nfunction return values. It has the following meaning:</p>\n<blockquote>\n<p><strong>The return value of a <code>void</code>-returning function is intended to be ignored</strong></p>\n</blockquote>\n<p>We could type functions as returning <code>undefined</code>, but there are some interesting\ndifferences that highlight the reason for <code>void</code>’s existence:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function invokeInFourSeconds(callback: () => undefined): void' >invokeInFourSeconds</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) callback: () => undefined' >callback</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) callback: () => undefined' >callback</data-lsp>, </span><span style=\"color: #0550AE\">4000</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function invokeInFiveSeconds(callback: () => void): void' >invokeInFiveSeconds</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) callback: () => void' >callback</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) callback: () => void' >callback</data-lsp>, </span><span style=\"color: #0550AE\">5000</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const values: number[]' >values</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> []</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function invokeInFourSeconds(callback: () => undefined): void' >invokeInFourSeconds</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='const values: number[]' >values</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">))</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'undefined'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'undefined'.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function invokeInFiveSeconds(callback: () => void): void' >invokeInFiveSeconds</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='const values: number[]' >values</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">))</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNAqIDc4BrSASSIDE4DoBlSEtQAmiABQkAhgBspAIwkkmqUQEpQAXgB8oYkMh46kIWoDeOUKESQyAFQoBbSNzLjpchUwA0oACwAGAJUcAF98YnIqGjpGFnYOCnpIfkEiEVcZeUVlNS1QRgpjUDMLK1sHJwIXSQyPbwBWAL8g0JwUxDI86QJIFFAiAntZGABtAF0NUDGcaOY2Tm4+AWExVQ1tei6egDoABwJEAAtRHxUgmdjOBKSl1JWc9c3EXf2jk5UgA'>Try</a></div></pre>\n<p>It happens that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push</code></a> returns a number,\nand our <code>invokeInFourSeconds</code> function above is unhappy about this being returned from the callback.</p>\n<h3 id=\"construct-signatures\" style=\"position:relative;\"><a href=\"#construct-signatures\" aria-label=\"construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construct signatures</h3>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#construct-signatures\">Construct signatures</a> are similar to call signatures, except they describe what should happen with the <code>new</code> keyword is used in an instantiation scenario.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DateConstructor' >DateConstructor</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) value: number' >value</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let MyDateConstructor: DateConstructor' >MyDateConstructor</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DateConstructor' >DateConstructor</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const d: Date' style='border-bottom: solid 2px lightgrey;'>d</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='let MyDateConstructor: DateConstructor&#10;new (value: number) => Date (+5 overloads)' >MyDateConstructor</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">1697923072611</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const d: Date</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCsGBQBLAOwBcYAzAQwGNJQARC0gYTkMWOgFcriFQBvXKFCFIAd1AAKAG4UANp0ipCnALYAjGAEpUDUrgC+uXHMjFQAWQCeeyCzYduvaLsZ3W7Ljz4Beem9wqD3MAE1A-UQlrW3tPJwRJAEYANgBOAHZUtABmAAZ0tGTExK1cEGFhAD0AfiA'>Try</a></div></pre>\n<p>These are rare, but if you ever happen to come across them - you now know what they are.</p>\n<h2 id=\"function-overloads\" style=\"position:relative;\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function overloads</h2>\n<p>Imagine the following situation:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">&lt;</span><span style=\"color: #116329\">iframe</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">src</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #82071E\">/</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #6E7781\">&lt;!-- // --&gt;</span></div><div class='line'><span style=\"color: #24292F\">&lt;</span><span style=\"color: #116329\">form</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">  &lt;</span><span style=\"color: #116329\">input</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">type</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"text\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">name</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"name\"</span><span style=\"color: #24292F\"> /&gt;</span></div><div class='line'><span style=\"color: #24292F\">  &lt;</span><span style=\"color: #116329\">input</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">type</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"text\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">name</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"email\"</span><span style=\"color: #24292F\"> /&gt;</span></div><div class='line'><span style=\"color: #24292F\">  &lt;</span><span style=\"color: #116329\">input</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">type</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"password\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">name</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"password\"</span><span style=\"color: #24292F\"> /&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">  &lt;</span><span style=\"color: #116329\">input</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">type</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"submit\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">value</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"Login\"</span><span style=\"color: #24292F\"> /&gt;</span></div><div class='line'><span style=\"color: #24292F\">&lt;/</span><span style=\"color: #116329\">form</span><span style=\"color: #24292F\">&gt;</span></div></code></div></pre>\n<p>What if we had to create a function that allowed us to register a “main event listener”?</p>\n<ul>\n<li>If we are passed a <code>form</code> element, we should allow registration of a “submit callback”</li>\n<li>If we are passed an <code>iframe</code> element, we should allow registration of a ”<code>postMessage</code> callback”</li>\n</ul>\n<p>Let’s give it a shot:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: FormData' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface FormData' >FormData</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) evt: MessageEvent&lt;any>' >evt</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface MessageEvent&lt;T = any>' >MessageEvent</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement | HTMLIFrameElement, handler: FormSubmitHandler | MessageHandler): void' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myFrame: HTMLIFrameElement' style='border-bottom: solid 2px lightgrey;'>myFrame</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var document: Document' >document</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Document.getElementsByTagName&lt;\"iframe\">(qualifiedName: \"iframe\"): HTMLCollectionOf&lt;HTMLIFrameElement> (+4 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"iframe\"</span><span style=\"color: #24292F\">)[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myFrame: HTMLIFrameElement</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement | HTMLIFrameElement, handler: FormSubmitHandler | MessageHandler): void' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myFrame: HTMLIFrameElement' >myFrame</data-lsp>, (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: any' style='border-bottom: solid 2px lightgrey;'>val</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>                          </span><span class='popover'><div class='arrow'></div>(parameter) val: any</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCQ8kOhYqNCQoAAWohLUVmSokMGhWPK0oKDUkvDEQgAqVgAy6vCBlUWgAD6gtQ2wLOxk8EGtYQA0pRlZbmoc3PyCWC7Z0p1+9k6LbrR6AN4AvrHoqZRYoPD4fQPMcmLQ6DyDYQB0Tlgt1A9YlABC+DWOAHKXeQAIlQJH6g2BOgA2gAGAC6tBAZRRAD0APy0TKuHJ5AohMLyM4XQYjBRGCgRQzbcbIlH0hmM+kY2i7HRAA'>Try</a></div></pre>\n<p>This is not good — we are allowing too many possibilities here, including things we don’t aim to support (e.g., using a <code>HTMLIFrameElement</code> with <code>FormSubmitHandler</code>, which doesn’t make much sense).</p>\n<p>We can solve this using <a href=\"dict,\"><em>function overloads</em></a>, where we define multiple function heads that serve as entry points to a single implementation:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: FormData' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface FormData' >FormData</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) evt: MessageEvent&lt;any>' >evt</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface MessageEvent&lt;T = any>' >MessageEvent</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myFrame: HTMLIFrameElement' style='border-bottom: solid 2px lightgrey;'>myFrame</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var document: Document' >document</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Document.getElementsByTagName&lt;\"iframe\">(qualifiedName: \"iframe\"): HTMLCollectionOf&lt;HTMLIFrameElement> (+4 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"iframe\"</span><span style=\"color: #24292F\">)[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myFrame: HTMLIFrameElement</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myForm: HTMLFormElement' style='border-bottom: solid 2px lightgrey;'>myForm</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var document: Document' >document</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Document.getElementsByTagName&lt;\"form\">(qualifiedName: \"form\"): HTMLCollectionOf&lt;HTMLFormElement> (+4 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"form\"</span><span style=\"color: #24292F\">)[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myForm: HTMLFormElement</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myFrame: HTMLIFrameElement' >myFrame</data-lsp>, (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: MessageEvent&lt;any>' >val</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)</span></div><div class='line'><span style=\"color: #24292F\">})</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myForm: HTMLFormElement' >myForm</data-lsp>, (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: FormData' >val</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCQ8kOhYqNCQoAAWohLUVmSokMGhWPK0oKDUkvDEQgAqVgAy6vCBlUUANKUZWW5qHNz8glgu2ey0OnEJSSlpma45eQUhYSVlFdRVoLUNsCzsZPBBrWEdZbMjvrb2TsNuYxOJyaldc7n5hcudaxtbjX0t60VQAAfTZ1eo7PYHf4HY6dM49Vh9XgCYTdKTA0B+K7ONGjPQAbwAvrF0KlKFhQPB8Lt9sw5GJoOgeDCsAA6JxYaFFSgAIXwNUcADlafIAESoEiQ6iinQAbQADABdWggMpqgB6AH5aKTIOTKdS+rJQAymSz2dROUcsLz+UKRaKSH0ZQrlaq1aAtbR4fM3ktilSaQc2gojBQIoZ8Z13R6yl7CeMfa9FkV5IG+iH5GHkBHQFGyjHY-GdEA'>Try</a></div></pre>\n<p>Look at that! We have effectively created a linkage between\nthe first and second arguments, which allows our callback’s\nargument type to change, based on the type of <code>handleMainEvent</code>’s first argument.</p>\n<p>Let’s take a closer look at the function declaration:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCBgALRJ6DxYSQm0JDyQ6Fio0JCgABaiEtRWZKiQwaFY8rSgoNSS8MRCACpWADLq8IEttQA0DcWlbmoc3PyCWC5l7LQ6mdm5+YUlruWV1SFh9Y3N1K2gHd2wLOxk8EEDYcONG-O+tvZOc26Lyzl5BaObFVUansRodjqcepN+kdaqAAD4nTpdc6Xa5Q653EaPcasSa8ATCMZSOGgPyvZyEhZ6ADeAF9YlitoDdlg4mAAHoAfiAA'>Try</a></div></pre>\n<p>This looks like three function declarations, but it’s really\ntwo “heads” that define an <a href=\"https://262.ecma-international.org/#prod-ArgumentList\">argument list</a> and a return type,\nfollowed by our original implementation.</p>\n<p>If you take a close look at tooltips and autocomplete feedback you get from the TypeScript language server,\nit’s clear that you are only able to call into the two “heads”, leaving the underlying “third head + implementation” inaccessible from the outside world.</p>\n<p>One last thing that’s important to note: “implementation” function signature must be <em>general enough to include everything that’s possible through the exposed first and second function heads</em>. For example, this wouldn’t work</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></data-err></span><span style=\"color: #24292F\">(</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAUCBAHZwCSAtgA4A2AlgMa0AuAgkQJ6oBmAhtYpDxN2lSKABiCcgGUArgCNyzABI8iAE2oxQAXlAAKdTyY9Uk6OQAixngEpdAPlAA3OLXVCRYgLKREiHgBzSFUNLWhdA0hnJlRffyDIAFFnSCImex0nV3c8AkIAWiL6WSYigrwuWSJ6Jlo4IlAACzVNSG8eWiIUtKZ9PFBQSC1yVGUAFW8AGXNyJJHegBoB5tbwsyk5RRU1mDxbSura+saWsPbO7tT0-sHhyFHQCenScWgecmSF9OXBs7boHE-AFgqEAftDjU6g1VucOl0ejd7o9njMpPMHr17ABvAC+eX+WnhV16+VAAD0APxAA'>Try</a></div></pre>\n<h2 id=\"this-types\" style=\"position:relative;\"><a href=\"#this-types\" aria-label=\"this types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> types</h2>\n<p>Sometimes we have a free-standing function that has a strong opinion around what <code>this</code> will end up being, at the time it is invoked.</p>\n<p>For example, if we had a DOM event listener for a button:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">&lt;</span><span style=\"color: #116329\">button</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">onClick</span><span style=\"color: #24292F\">=</span><span style=\"color: #0A3069\">\"myClickHandler\"</span><span style=\"color: #24292F\">&gt;Click Me!&lt;/</span><span style=\"color: #116329\">button</span><span style=\"color: #24292F\">&gt;</span></div></code></div></pre>\n<p>We could define <code>myClickHandler</code> as follows</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Event' >Event</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>disabled</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwCoAtUBnALlADMBDZQgUwCgyBXSdLVaSUeATwGE10AawASFSABNkNAE4AKGgDcakLKQCiSlQEpQAbzqhQWAoQB04ohQBGU8aAC8R6Y3ohDAPQD8dAL5A'>Try</a></div></pre>\n<p>Oh no! <code>this</code> is an <code>any</code> type. We sure don’t want to depend on <code>disabled</code> being a defined property without some degree of type safety. If we enable the <code>compilerOptions.noImplicitThis</code> flag in <code>tsconfig.json</code>, you’ll see a type checking error here</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Event' >Event</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-err>this</data-err></span><span style=\"color: #24292F\">.<data-lsp lsp='any' >disabled</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</span><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit) => Event' >Event</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"click\"</span><span style=\"color: #24292F\">)) </span><span style=\"color: #6E7781\">// maybe ok?</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUCBAHZwCSAtgA4A2AlgMa0AuAgkQJ6pPQCukBYcCQo0GzACoALWilDc+eAGY8i9JrThFQ5dgGE69ANYAJAIZEAJtRgAKSADdIRJqgCij5wEpQAbzyg5aUQAOgsZUwAjawtQAF45Xn4AXzw8HX0GE3MrWyJIAHdQdycmGwAiegNDMs9vQnJTdgjIUDhDAH4gA'>Try</a></div></pre>\n<p>Oops! TypeScript isn’t happy with us. Despite the fact that <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#the_value_of_this_within_the_handler\">we know that <code>this</code> will be element that fired the event</a>, the compiler doesn’t seem to be happy with us using it in this way.</p>\n<p>To address the problem, we need to give this function a <strong><code>this</code> type</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='(parameter) this: HTMLButtonElement' >this</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLButtonElement' >HTMLButtonElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Event' >Event</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) HTMLButtonElement.disabled: boolean' style='border-bottom: solid 2px lightgrey;'>disabled</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) HTMLButtonElement.disabled: boolean</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit) => Event' >Event</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"click\"</span><span style=\"color: #24292F\">)) </span><span style=\"color: #6E7781\">// seems no longer ok</span></div><span class=\"error\"><span>The 'this' context of type 'void' is not assignable to method's 'this' of type 'HTMLButtonElement'.</span><span class=\"code\">2684</span></span><span class=\"error-behind\">The 'this' context of type 'void' is not assignable to method's 'this' of type 'HTMLButtonElement'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcAWd2cAoAMwFcA7AYwBcBLOc0AWwE8BhAG1soGsAJAIbkAJhxgAKQqFDUAFrRSg+AFQCyAGQBCpatQYBRMU0jlqAGimhIANxPVU+26cIBKUAG9LchQDphCgQAjMWFQAF4ZaFJISxBpUAA9AH5CAF9CQlZObn4hUQlySAB3UEc7cQAiSi5eCpc3OMRISCZEUHI4UA4GAHMYUDgeIA'>Try</a></div></pre>\n<p>Now when we try to directly invoke <code>myClickHandler</code> on the last line of the code snippet above\nwe get a new compiler error. Effectively, we have failed to provide the <code>this</code> that this function\nstates it wants.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='(parameter) this: HTMLButtonElement' >this</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HTMLButtonElement' >HTMLButtonElement</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Event' >Event</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) HTMLButtonElement.disabled: boolean' style='border-bottom: solid 2px lightgrey;'>disabled</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) HTMLButtonElement.disabled: boolean</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' style='border-bottom: solid 2px lightgrey;'>myClickHandler</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function myClickHandler(this: HTMLButtonElement, event: Event): void</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var document: Document' >document</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Document.getElementsByTagName&lt;\"button\">(qualifiedName: \"button\"): HTMLCollectionOf&lt;HTMLButtonElement> (+4 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"button\"</span><span style=\"color: #24292F\">)[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const boundHandler: (event: Event) => void' style='border-bottom: solid 2px lightgrey;'>boundHandler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const boundHandler: (event: Event) =&gt; void</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) CallableFunction.bind&lt;(this: HTMLButtonElement, event: Event) => void>(this: (this: HTMLButtonElement, event: Event) => void, thisArg: HTMLButtonElement): (event: Event) => void (+1 overload)' >bind</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp>)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='const boundHandler: (event: Event) => void' >boundHandler</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit) => Event' >Event</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"click\"</span><span style=\"color: #24292F\">)) </span><span style=\"color: #6E7781\">// bound version: ok</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) CallableFunction.call&lt;HTMLButtonElement, [Event], void>(this: (this: HTMLButtonElement, args_0: Event) => void, thisArg: HTMLButtonElement, args_0: Event): void' >call</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp>, </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit) => Event' >Event</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"click\"</span><span style=\"color: #24292F\">)) </span><span style=\"color: #6E7781\">// also ok</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcAWAUAGYCuAdgMYAuAlnCaALYCeAwgDZVkDWAEgIYkATVjAAUeUKAoALKilDcAKgFkAMgCEiFCrQCiw+pBIUANONCQAboYqodVo3gCUoAN5npsgHQDZvAEbCAqAAvJLQRJBmIBKgAHoA-HgAvnhMbBw8-EIweNEJeGS0iBQMjBpatCGgAnBkRAZGngDmkBR6kA0UiGqMCrxNAHK8BiIARH6a2iSjjgDaAAwAugVFJX5wpAJ8gsLQIVFgMfkSaexc29nQnn5UgiJM5VOOeOubF7siJJAA7qB21mMyGdODNnNFXoJQFYkDQSKg4JxUixge8YJ4yLxWKx7mVJrRjKAvr9-kZAcDQaBopjEHBQAigA'>Try</a></div></pre>\n<p>Note TypeScript understands that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>.bind</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>.call</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>.apply</code></a> will result in the proper <code>this</code> being passed to the function as part of its invocation.</p>\n<h2 id=\"function-type-best-practices\" style=\"position:relative;\"><a href=\"#function-type-best-practices\" aria-label=\"function type best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function type best practices</h2>\n<h3 id=\"explicitly-define-return-types\" style=\"position:relative;\"><a href=\"#explicitly-define-return-types\" aria-label=\"explicitly define return types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicitly define return types</h3>\n<p>TypeScript is capable of inferring function return types quite effectively,\nbut this accommodating behavior can lead to unintentional ripple effects where\ntypes change throughout your codebase</p>\n<p>consider the following example</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;}>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const resp: Response' >resp</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) url: string' >url</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> <data-lsp lsp='const resp: Response' >resp</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">()) </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) properties: string[]' >properties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function loadData(): void' >loadData</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;}>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\">).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;{ properties: string[]; }>.then&lt;void, never>(onfulfilled?: ((value: {&#10;    properties: string[];&#10;}) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;}' >result</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;}' style='border-bottom: solid 2px lightgrey;'>result</data-lsp>.<data-lsp lsp='(property) properties: string[]' >properties</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string): string' >join</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\", \"</span><span style=\"color: #24292F\">))</span></div><div class='meta-line'><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>(parameter) result: {\n    properties: string[];\n}</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMBGdWsBOAKABcBPAB0lACkBlAeQDkAFaASwFsPSOA3GgF5QiUpwB2Ac1AAfUBICuXAEYw5oFXDgAbSAEMJGpTp1kqNBi0YqAVpADGpUCIDeoANoBrVGMlSAXVQrZgA1fR1FGgBfc2o6JmYAQVh9chcElnDIyA8AuMtE7KiMkJToNI0Qm3snKsT2bl4BSGIQMABaLodFUi6O4kgAD0oEZ31EcgkHUAAzRWm+OCMpSFIAEX1SfQAKRWgdX3EOaQBKUFdiUFAHZbFQaEhESgz9AHd9Xjm1hwALPYOpyuNzuzgAJlt9Bkdu9Ps5Hs8AHS2RDLHanc4TC7A66UeDUaB8J5Hfx5YGxa6PUj7IwQ7bEWLEeaLDjLUA6OD6MGbbbo7HXVYbSE7ABEv1IpEoKBAw30XEoekRty4ItOiNIv0gEh2OwRih0pHOQgAfPzriCJKjFRypLqnvrSIi8XACUTEMi4CdRQAaUCqoHm0AgQMh64APQA-OSgdEgA'>Try</a></div></pre>\n<p>and what if we made a seemingly innocent change</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">export async function getData(url: string) {</span></div><div class='line'><span style=\"color: #24292F\">  const resp = await fetch(url)</span></div><div class='line'><span style=\"color: #116329\">+  if (resp.ok) {</span></div><div class='line'><span style=\"color: #24292F\">    const data = await resp.json()</span></div><div class='line'><span style=\"color: #24292F\">    return data</span></div><div class='line'><span style=\"color: #116329\">+  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>We’ll see some type-checking errors pop up, but <strong>at the invocation site, not the declaration site</strong>.</p>\n<p>Imagine if we were passing this value through several other functions before reaching the point where\ntype checking alerted us to a problem!</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;} | undefined>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const resp: Response' >resp</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) url: string' >url</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='const resp: Response' >resp</data-lsp>.<data-lsp lsp='(property) Response.ok: boolean' >ok</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> <data-lsp lsp='const resp: Response' >resp</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">()) </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='(property) properties: string[]' >properties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function loadData(): void' >loadData</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;} | undefined>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\">).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;{ properties: string[]; } | undefined>.then&lt;void, never>(onfulfilled?: ((value: {&#10;    properties: string[];&#10;} | undefined) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;} | undefined' >result</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-err><data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;} | undefined' style='border-bottom: solid 2px lightgrey;'>result</data-lsp>.<data-lsp lsp='(property) properties: string[]' >properties</data-lsp></data-err>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string): string' >join</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\", \"</span><span style=\"color: #24292F\">))</span></div><span class=\"error\"><span>'result' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'result' is possibly 'undefined'.</span><div class='meta-line'><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>(parameter) result: {\n    properties: string[];\n} | undefined</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMBGdWsBOdbNUHADgAYAWCgKABcBPAB0lACkBlAeQDkACtACWAWxGMRANw4BeUIkaiAdgHNQAH1AqArmIBGMLaANw4AG0gBDFSb0WLTNhx4DeBgFaQAxo1AKAN6gANoA1qhKqmoAuqhu-ABq1ha6HAC+zuxcfPwAgrDWzAE5AsmpkCExWa655WklCQXQRSYJHt5+bbnC4pIykPQgYAC0Yz66jGMj9NaIzCo+oABmuotScHZqkIwAItaM1gAUutAWkcoi6gCUoIH0oKA+m0qg0JCIrCXWAO7Wkisdj4ABYnM7XB6gETLUBHd6fAB0cDCt3uj0ezxUrwAJgdrCUjr9-v54awEZ5EJsjtdbnM7pD0aBWPB2NApB8LtEqgzQJlGe9GKc7LjDpDMpl6Kt1iJNqALHBrNj9odqfTHts9nijgAiYGMRisFAgSAAD2sYlYVgRzzE2uuCMYwMgKiOcI+ugsjFucgAfGr0ZjKVb5Wo3YgPYwEcy4Kz2YhyXArjqADSgO0QxkgRnZx4APQA-GKIekgA'>Try</a></div></pre>\n<p>If we use the same example, but define a return type explicitly, the error message\nis surfaced at the declaration site</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;}>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;{ </span><span style=\"color: #953800\"><data-lsp lsp='(property) properties: string[]' >properties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] }&gt; {</span></div><span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const resp: Response' >resp</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) url: string' >url</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='const resp: Response' >resp</data-lsp>.<data-lsp lsp='(property) Response.ok: boolean' >ok</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> <data-lsp lsp='const resp: Response' >resp</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Body.json(): Promise&lt;any>' >json</data-lsp></span><span style=\"color: #24292F\">()) </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='(property) properties: string[]' >properties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const data: {&#10;    properties: string[];&#10;}' >data</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function loadData(): void' >loadData</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(url: string): Promise&lt;{&#10;    properties: string[];&#10;}>' >getData</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\">).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;{ properties: string[]; }>.then&lt;void, never>(onfulfilled?: ((value: {&#10;    properties: string[];&#10;}) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;}' >result</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) result: {&#10;    properties: string[];&#10;}' >result</data-lsp>.<data-lsp lsp='(property) properties: string[]' >properties</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string): string' >join</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\", \"</span><span style=\"color: #24292F\">))</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsWBQAXATwAdJQApAZQHkA5ABWgEsBbJ-JgNzIF5RF8zAHYBzUAB9QQgK4sARjAmg5cOABtIAQyFKZatQRJkqdanIBWkAMb5QfAN6gA2gGtUA4SIC6qE7QBqmmrSZAC+hqQUNLQAgrCahHZRdIHBkE5eEcbRqSFJfnHQCUp+ZpY2JdGMrOxckLggYAC0LVbS+C1NuJqIhEJWoABm0v0ccDoikPgAIpr4mgAUuKCg0tBq7oJMorgAlKiMcGyIkAA8jsTwpNAckCj8W6IZoKEAfKD2y6BW4wKg0HdiElNAB3TTsIZTKwACwWazUuy+TEGoAWAMQxAAdHAXLsPl8Vj8hH8ACZzTRJBag8G2dFY8yIcYLXZ4nr4lYc0CXODXW73DzbEQZAkvEUA-BrHRk+ZfcLhXDDUZMcagNRwTQk2bzZns0CTGbkhYAImh+HwxBQIEgAA9NCxiBpMT8WEbdpj8NDIEIFmi7tI1Pg8Tx3p9OUTGY61SJfYh-fhMdzeUw7pjzHBtsaADSgV2IlahRGhIA'>Try</a></div></pre>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>There is a native Javascript concept of a native <code>void</code> keyword, but it’s not related to the TypeScript concept of the same name.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#callable-types\">Callable types</a></p>\n<ul>\n<li><a href=\"#void\"><code>void</code></a></li>\n<li><a href=\"#construct-signatures\">Construct signatures</a></li>\n</ul>\n</li>\n<li><a href=\"#function-overloads\">Function overloads</a></li>\n<li><a href=\"#this-types\"><code>this</code> types</a></li>\n<li>\n<p><a href=\"#function-type-best-practices\">Function type best practices</a></p>\n<ul>\n<li><a href=\"#explicitly-define-return-types\">Explicitly define return types</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/10-callables/"},"frontmatter":{"title":"Callables and Constructables","course":"fundamentals-v4","date":"October 23, 2023","description":"So far, we have dealt with function argument and return types. There\nare a few more in-depth concepts we need to cover, including\nmultiple function heads and callable types.\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/10-callables/","title":"Callables and Constructables","course":"fundamentals-v4","order":10,"previous":{"fields":{"slug":"/course/fundamentals-v4/09-type-queries/"},"frontmatter":{"title":"Type Queries","order":9,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/11-classes/"},"frontmatter":{"title":"Classes","order":11,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}