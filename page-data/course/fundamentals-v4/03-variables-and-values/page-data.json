{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/03-variables-and-values/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"8fa777a5-8313-5450-84cf-0286b4c40f04","excerpt":"Now that we have compiled a simple TypeScript program, let’s look at\nthe basics of the programming language. Variable Declarations & Inference Since 2015, the…","html":"<p>Now that we have compiled a simple TypeScript program, let’s look at\nthe basics of the programming language.</p>\n<h2 id=\"variable-declarations--inference\" style=\"position:relative;\"><a href=\"#variable-declarations--inference\" aria-label=\"variable declarations  inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Declarations &#x26; Inference</h2>\n<p>Since 2015, the conventional way to declare JavaScript variables is with <code>let</code> and\n<code>const</code> like this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' style='border-bottom: solid 2px lightgrey;'>temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">19</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let temperature: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBGILYA4gE4EMwFdEggXggRgE4AoAehIgoD0B+IA'>Try</a></div></pre>\n<p>As we can see, TypeScript is able to <a href=\"https://www.typescriptlang.org/docs/handbook/type-inference.html\">infer</a>\nthat <code>temperature</code> is a number, based on the fact that we’re initializing it with\na value <em>as we are declaring it</em>.</p>\n<p>If we try to give <code>temperature</code> a value that is <em>incompatible</em> with the <code>number</code>\nit was initially used to hold, we’ll get an error.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' >temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let temperature: number' >temperature</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"warm\"</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUQyAWwAcYBDQgV2klAF5QA2HUym+xl0AEQB3atDICgA'>Try</a></div></pre>\n<p><strong>In TypeScript, variables are “born” with their types.</strong> Although\nthere are ways of making them more specific in certain branches of code,\nthere’s no way to change <code>temperature</code>’s type from <code>number</code> to <code>string</code> without telling\ntypescript to disregard all of the type information on this variable.</p>\n<p>Let’s try the same thing with <code>const</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const humidity: 79' style='border-bottom: solid 2px lightgrey;'>humidity</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>const humidity: 79</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgVwLYEsAmKoE8YF4YDsAnAFAD0ZMVVAegPxA'>Try</a></div></pre>\n<p>Notice that the type of this variable is not <code>number</code>, it’s <code>79</code>. <strong>TS is able to\nmake a more specific assumption here</strong>, because:</p>\n<ul>\n<li><code>const</code> variable declarations cannot be reassigned</li>\n<li>the initial value assigned to <code>humidity</code> is a number, which is an\n<strong>immutable value type</strong></li>\n</ul>\n<p>Therefore <code>humidity</code> will always be <code>79</code> in this program.</p>\n<h3 id=\"literal-types\" style=\"position:relative;\"><a href=\"#literal-types\" aria-label=\"literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Types</h3>\n<p>Types like <code>79</code> are called a <strong>literal types</strong> — you can think of this as\n“only <code>79</code> is allowed”</p>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-bulb\"> Theme: Inferring with non-intrusive specificity</div><div class=\"custom-block-body\"><p>There’s a common idea you’ll see again and again when working with TypeScript.\n<strong>Inference is not so specific as to get in the way of common behavior</strong>.\n<br />\n<br />\nFor example, the <code>let</code> variable declaration above could have assumed <code>age</code> to\nbe of type <code>79</code>, but this would have interfered with our ability to set this\nre-assignable variable to <code>7</code> or <code>8</code>.</p></div></div>\n<h2 id=\"a-type-as-a-set-of-allowed-values\" style=\"position:relative;\"><a href=\"#a-type-as-a-set-of-allowed-values\" aria-label=\"a type as a set of allowed values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A type as a set of allowed values</h2>\n<p>It’s often useful to think about a type as representing some group of allowed values.\nWe’ll use <a href=\"https://en.wikipedia.org/wiki/Set_(mathematics)#Roster_notation\">a common syntax</a>\nfor describing these sets that looks like this:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{ </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\"> } </span><span style=\"color: #6E7781\">// \"1 or 2 or 3\"</span></div></code></div></pre>\n<p>Let’s look at our examples from above</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' style='border-bottom: solid 2px lightgrey;'>temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">19</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let temperature: number</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const humidity: 79' style='border-bottom: solid 2px lightgrey;'>humidity</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>const humidity: 79</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBGILYA4gE4EMwFdEggXggRgE4AoAehIgoD0B+IgYwHsA7AZ0gAs0YBLAE27ABPHBADsxMhSk0gA'>Try</a></div></pre>\n<p>The <code>number</code> type of <code>temperature</code> represents the set <code>{ all possible numbers }</code>.\nYou can assign a new number to <code>temperature</code>\nand TypeScript will be perfectly happy to allow it.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' >temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">19</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let temperature: number' >temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">23</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBGILYA4gE4EMwFdEggXggRgE4AoaeJVDLXAJgGYg'>Try</a></div></pre>\n<p>The <code>79</code> type of <code>humidity</code> represents the set <code>{ 6 }</code>, meaning\n“any value, as long as it’s a <code>6</code>“.</p>\n<p>We can create an interesting situation by forcing a <code>let</code> variable declaration\nto have its type inferred as if it’s a <code>const</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' style='border-bottom: solid 2px lightgrey;'>temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">19</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let temperature: number</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let humidity: 79' style='border-bottom: solid 2px lightgrey;'>humidity</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = 79' >const</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let humidity: 79</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBGILYA4gE4EMwFdEggXggRgE4BuAKAHoyIqqA9AfhNEgAs0YBLAE3bAE8cIAdgIRkAZwgBjAPYA7MWFIVqtOkA'>Try</a></div></pre>\n<p>Note that we have the same types as before — the only thing is changed is we have\nre-assignability. Let’s continue below and try some assignments.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let temperature: number' >temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">23</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// (1) OK, as before</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let temperature: number' >temperature</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let humidity: 79' >humidity</data-lsp>; </span><span style=\"color: #6E7781\">// (2) OK</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let humidity: 79' >humidity</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let temperature: number' >temperature</data-lsp>; </span><span style=\"color: #6E7781\">// (3) ❌ ERROR</span></div><span class=\"error\"><span>Type 'number' is not assignable to type '79'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type '79'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let humidity: 79' >humidity</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// (4) OK</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let humidity: 79' >humidity</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">78</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// (5) ❌ ERROR</span></div><span class=\"error\"><span>Type '78' is not assignable to type '79'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '78' is not assignable to type '79'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUQyAWwAcYBDQgV2klAF5QBGATgG58jQALOmQCWAE2GEAni1AB2DqGqJQAYzgA7RIR4gwAWgMq6hA3pylKNeoxmYuoEKAAUbAJSgA8gGkANIuUARpAAZgiQ5uRU0LQMTKyCIuJS9o5OaO7eOAliEtKsFlExjClgThjugDLkoACiAEq1HrU4WUI5UjLyJc4ALBleLYm5HQAcXU4ArJU19Y1AA'>Try</a></div></pre>\n<p>Each of these <code>x = y</code> assignments involves making some determination of <strong>type equivalence</strong>, which\nmeans asking the question <strong>“does the type of <code>y</code> fit within the type of <code>x</code>?</strong>.</p>\n<p>Let’s describe what’s happening here using sets.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let temp2: number' >temp2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">19</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// temp2&apos;s type is { all numbers }</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let humid2: 79' >humid2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = 79' >const</data-lsp></span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// humid2&apos;s type is { 79 }</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">// Is each member in { 23 } also in { all numbers }? ✅ YES</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let temp2: number' >temp2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">23</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">// Is each member in { 79 } also in { all numbers }? ✅ YES</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let temp2: number' >temp2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let humid2: 79' >humid2</data-lsp>;</span></div><div class='line'><span style=\"color: #6E7781\">// Is each member in { all numbers } also in { 79 }? ❌ NO</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let humid2: 79' >humid2</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let temp2: number' >temp2</data-lsp>;</span></div><span class=\"error\"><span>Type 'number' is not assignable to type '79'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type '79'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Is each member in { 79 } also in { 79 } ✅ YES</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let humid2: 79' >humid2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">// Is each member in { 78 } also in { 79 } ❌ NO</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let humid2: 79' >humid2</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">78</span><span style=\"color: #24292F\">;</span></div><span class=\"error\"><span>Type '78' is not assignable to type '79'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '78' is not assignable to type '79'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUQyAWwAc1QBeUARgE4BuUEE8qgckRIE8KkUAEteAb1ABDPHlAA7AK5kARjF4BffEVAALJcIAm1OgHZGU3gGM4cxIVbs9ZQ2h79BI8aDOhNIHP7sAJK8kJKWOqBk5KrQInKgEpi+UniIcPGJqbKKKmq+APyggKDkoACaAKIAyjiklMboGMwBYCGgYRFRMTCZEj7qqem92fJKsRpFpZU1dVS0uvpGzcGh4ZHReXHCCRLSOWP5A9JD21n9RYAy5KAAcgDyOE4u87NozS2gbR3r3Vs73uZHNIZU59AElcrVB6LBpmZatVadDaxYYmAAcKWOwL+-VAVzuUOcRnmaOYQA'>Try</a></div></pre>\n<p>What we can see is that the type <code>79</code> is type-equivalent to <code>number</code>, but not\nthe other way around. <code>{ 79 }</code> is a subset of <code>{ all numbers }</code> and thus\n<strong>the type <code>79</code> is a subtype of <code>number</code></strong>.</p>\n<h2 id=\"implicit-any-and-type-annotations\" style=\"position:relative;\"><a href=\"#implicit-any-and-type-annotations\" aria-label=\"implicit any and type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implicit <code>any</code> and type annotations</h2>\n<p>Sometimes, we need to declare a variable before it gets initialized, like\n<code>endTime</code> below:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// between 500 and 1000</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let startTime: Date' >startTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let endTime: any' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: any' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: any' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">}, </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMBYBQJQAjSAFwHdJIA7UDABjtAEMqATUARgbtwGM4qiEqABKAQQByAEQDyAWQD6AdTEBJACoL1quQFFQAXlyhQcpiQAWAOngBXNgAozlmy1ZwAtg4CUoAFS0DL4A1IE8uAA2pKBCTNAk6gCWHpCGoFSQZKBS5pA+kdHUrEkp+GAmoAB6APy4uIikJZBwtiQOPoYAfKAA3sagRU1pPCaDyakG6ZnZufkAvgA0opKyiioaWjq63kA'>Try</a></div></pre>\n<p><code>endTime</code> is “born” without a type, so it ends up being an implicit <code>any</code>.</p>\n<p>Think of <code>any</code> as “the normal way JS variables work”, in that you could assign\n<code>endTime</code> a <code>number</code>, then later a <code>function</code>, then a <code>string</code>.</p>\n<p>TypeScript doesn’t have enough information around the declaration site to infer\nwhat <code>endTime</code> should be, so it gets <strong>the most flexible type: <code>any</code></strong>. Going\nback to our comparison of types to sets, <code>any</code> represents\nthe set <code>{ all possible values }</code>.</p>\n<p>If we wanted more safety here, we could add a <strong>type annotation</strong>:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- let endTime</span></div><div class='line'><span style=\"color: #116329\">+ let endTime: Date</span></div></code></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #6E7781\">// between 500 and 1000</span></div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let startTime: Date' >startTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line highlight'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let endTime: Date' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: Date</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  <data-err><data-lsp lsp='let endTime: Date' >endTime</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'Date'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'Date'.</span><div class='line dim'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: Date' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'><span style=\"color: #24292F\">}, </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAlAEaQAuA7pJAHagCsADHaAIaUAmoAjA3TgMZyVExUACUAggDkAIgHkAsgH0A6mICSAFQXrVcgKKgAvDlCg5TYgAsAdPACubABRnLNlqzgBbBwEpQAKloGXwBqQJ4cABsSUCEmaGJ1AEsPSENQSkhSUClzSB9I6KpWJJTUHOJIPDATUAA9AH4cHEQSEsg4W2IHH0MAPlAAb2NQIra0nhNR5NSDdMzs3PyAXwAaUUlZRRUNLR1dbyA'>Try</a></div></pre>\n<p>Now, TypeScript will correctly alert us when we try to flip flop between the\nnumber <code>0</code> and a <code>Date</code>.</p>\n<h2 id=\"type-casting\" style=\"position:relative;\"><a href=\"#type-casting\" aria-label=\"type casting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Casting</h2>\n<p>There may be occasions, especially when exploring TypeScript where we want to\n<em>force</em> the compiler to regard a value as being of a particular type. This is\ncalled <a href=\"https://en.wikipedia.org/wiki/Type_conversion\"><em>type casting</em></a>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let frontEndMastersFounding: Date' >frontEndMastersFounding</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: number | string | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Jan 1, 2012\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let date1: Date' style='border-bottom: solid 2px lightgrey;'>date1</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let frontEndMastersFounding: Date' >frontEndMastersFounding</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let date1: Date</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let date2: any' style='border-bottom: solid 2px lightgrey;'>date2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let frontEndMastersFounding: Date' >frontEndMastersFounding</data-lsp> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// force the type to be `any`</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let date2: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZgTg9gOzAUQQEwLIEMDOYQw4BicArugJYIDmEAvBAiAO4QAiW+AFAEQBSWBBACMAGggAmAAzCJPAJQAoUJDScQw+tHhJUmXPkIlyaKtUUB6CxBsA9APzLwENfglbYiFOmx4CxMkoaCFwQhABPAG4IK2g4GABjEAgwAAtksHCABwy4CAAjZIADQXCiy2s7eyA'>Try</a></div></pre>\n<p>This is something that you should do <em>very carefully</em>. It’s sometimes safe to cast\nto a <em>more general</em> type, but potentially dangerous to cast to a <em>more specific or\nunrelated</em> type.</p>\n<p>Here’s an example of a safe (but rather pointless) cast</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const humidity: number' style='border-bottom: solid 2px lightgrey;'>humidity</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// is 79 a number? If so, this is safe!</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>const humidity: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgVwLYEsAmKoE8YF4YDsAnDAIYQxjIBGApgE4DcMA9CzChcWZTQwPwwAkgDMYEEABoYUOJw4UIpEbQCEAKDYxt2gHr8gA'>Try</a></div></pre>\n<p>and here’s an example of an unsafe cast. This kind of pattern effectively\nmakes TypeScript lie to you.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let date3: Date' >date3</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"oops\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let date3: Date' style='border-bottom: solid 2px lightgrey;'>date3</data-lsp> </span><span style=\"color: #6E7781\">// TypeScript thinks this is a Date now, but it&apos;s really a string</span></div><div class='meta-line'><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>let date3: Date</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let date3: Date' >date3</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Date.toISOString(): string' style='border-bottom: solid 2px lightgrey;'>toISOString</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// what do we think will happen when we run this? 💥</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(method) Date.toISOString(): string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAJghmIGYIF4ICID2GAOBnNEMuhAdgJ6HEAicIAULPEgPTMQAqZ2IAygMYAnAJbZIYABZCSAa2IShxBYQg14EEhgDuAGggAjAK6QhYAOTEBIGMGAUYEXGGEkA5nVYQAegH4GtBAB0YBgAkjwA8jxOUi4AFACUEB6a4nDQGBCaIBDyMplCNhCp2NwkmeIgZVkQAgZl8rjeEIC8G4ClO+5sEF3dPkA'>Try</a></div></pre>\n<p>note that in the above example, we first have to cast <em>up</em> to <code>any</code>, and then back <em>down</em> to <code>Date</code>.\nTypeScript doesn’t even allow us to cast directly from <code>string</code> to <code>Date</code> because it’s dangerous</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let date4: Date' >date4</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"oops\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><span class=\"error\"><span>Conversion of type 'string' to type 'Date' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span><span class=\"code\">2352</span></span><span class=\"error-behind\">Conversion of type 'string' to type 'Date' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsaBQAbSAF1ABMBDIyAFlAF5QAiOOAB0UdHMVABFLIQA'>Try</a></div></pre>\n<h2 id=\"function-arguments-and-return-values\" style=\"position:relative;\"><a href=\"#function-arguments-and-return-values\" aria-label=\"function arguments and return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function arguments and return values</h2>\n<p>The <code>: Date</code> syntax we’ve just seen for variable type annotations can also be used\nto describe function arguments and return values. In this example it’s not clear,\neven from the implementation of the function, whether <code>add</code> should accept numbers\nor strings.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: any' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: any' >b</data-lsp> </span><span style=\"color: #6E7781\">// strings? numbers? a mix?</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjQIUJSyzUkAOaUA-KEgN4w6rNOdQ8VAA8TtAL5A'>Try</a></div></pre>\n<p>Here’s what your in-editor tooltip would look like if you were using this function:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: any, b: any): any</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>const result: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjaAX1ogwAWkPoGWQ-trp2lLHOqUGyGwF5OPXgGYhAIgAsX0bpgMsEhIQB6APy08vaOgaCRQA'>Try</a></div></pre>\n<p>Without type annotations, “anything goes” for the arguments passed into <code>add</code>. Why is this a problem?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const p: Promise&lt;unknown>' >p</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&lt;unknown>' >Promise</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp>)</span></div><div class='meta-line'><span class='popover-prefix'>                        </span><span class='popover'><div class='arrow'></div>const result: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjaAX1ogwAWkPoGWQ-trp2lLHOqUGyGwF5OPXgGYhAIgAsX0RZWNoigLpDUAO6gAAqy0PCoNLzy9o4BIDKZWdk5oAB6APxAA'>Try</a></div></pre>\n<p>If you’ve ever created a <code>Promise</code> using the promise constructor, you may see\nthat we are using a <code>string</code> where we <em>should</em> use a two-argument function. This\nis the kind of thing we’d hope that TypeScript could catch for us.</p>\n<p>Let’s add some type annotations to our function’s arguments:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line highlight'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\"><data-err>&quot;4&quot;</data-err></span><span style=\"color: #24292F\">)</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGoheAL54ytRBXmRERADZGAvA2YsMggERYH4oA'>Try</a></div></pre>\n<p>Great, now we can enforce that only values of type <code>number</code> are passed into the function,\nand TS can now determine the return type automatically:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: number, b: number): number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGoheAL54ytRBXmRERADZGAvA2YsMgrOLwg5rt+4B6AfiA'>Try</a></div></pre>\n<p>If we wanted to specifically state a return type, we could do so using basically the same\nsyntax in one more place</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-err>number</data-err></span><span style=\"color: #24292F\"> {}</span></div><span class=\"error\"><span>A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.</span><span class=\"code\">2355</span></span><span class=\"error-behind\">A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsWBQAzAVwDsBjAFwEs5jQBDAEwYAo7VjCBbAIxgBpQ3dl17QAlMJ4xQAbwC+QA'>Try</a></div></pre>\n<p>This is a great way for code authors to state their intentions up-front. TypeScript\nwill make sure that we live up to this intention, and errors will be surfaced\n<em>at the location of the function declaration</em> instead of <em>where we use the value\nreturned by the function</em>. Once we implement the body of the function, we’ll no\nlonger see this error.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAQwCaoBTIFyLCAWwCMBTAJwBpEjd9jyBKWw0sxAbwChFEySoQZJMkQBqapwC+QA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#variable-declarations--inference\">Variable Declarations &#x26; Inference</a></p>\n<ul>\n<li><a href=\"#literal-types\">Literal Types</a></li>\n</ul>\n</li>\n<li><a href=\"#a-type-as-a-set-of-allowed-values\">A type as a set of allowed values</a></li>\n<li><a href=\"#implicit-any-and-type-annotations\">Implicit <code>any</code> and type annotations</a></li>\n<li><a href=\"#type-casting\">Type Casting</a></li>\n<li><a href=\"#function-arguments-and-return-values\">Function arguments and return values</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","course":"fundamentals-v4","date":"October 23, 2023","description":"We will begin our study of the TypeScript language with simple variables\nand functions.\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/03-variables-and-values/","title":"Variables and Values","course":"fundamentals-v4","order":3,"previous":{"fields":{"slug":"/course/fundamentals-v4/02-hello-typescript/"},"frontmatter":{"title":"Welcome to TypeScript","order":2,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/04-objects-arrays-and-tuples/"},"frontmatter":{"title":"Objects, Arrays and Tuples","order":4,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}