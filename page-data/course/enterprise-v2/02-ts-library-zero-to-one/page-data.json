{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/02-ts-library-zero-to-one/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"7a5d8ed7-a639-5277-b032-31ab9d283737","excerpt":"A “bare bones” TypeScript Library Setup Let’s start by creating new small library from nothing, so you can see how my “lots of value out of few tools” approach…","html":"<h2 id=\"a-bare-bones-typescript-library-setup\" style=\"position:relative;\"><a href=\"#a-bare-bones-typescript-library-setup\" aria-label=\"a bare bones typescript library setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A “bare bones” TypeScript Library Setup</h2>\n<p>Let’s start by creating new small library from nothing, so you can see how my “lots of value out of few tools” approach keeps things nice and simple.</p>\n<h2 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<h3 id=\"installing-volta\" style=\"position:relative;\"><a href=\"#installing-volta\" aria-label=\"installing volta permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing <code>volta</code></h3>\n<p>First, make sure you have the latest version of <a href=\"https://volta.sh\"><code>volta</code></a> installed on your machine</p>\n<p>If you’re using a POSIX-compliant operating system like macOS, linux or Windows with <a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\">Windows Subsystem for Linux (WSL)</a> run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">curl https://get.volta.sh </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> bash</span></div></code></div></pre>\n<p>If you want to install volta for native windows support (e.g. powershell or <code>cmd.exe</code>), you can install the latest <code>.msi</code> package from <a href=\"https://github.com/volta-cli/volta/releases/\">the latest release</a>.</p>\n<p>Follow the installation instructions you may see as part of the installation process, which may involve <strong>closing your terminal and opening it again to start a new session</strong>.</p>\n<h3 id=\"installing-node-and-yarn-through-volta\" style=\"position:relative;\"><a href=\"#installing-node-and-yarn-through-volta\" aria-label=\"installing node and yarn through volta permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing <code>node</code> and <code>yarn</code> through volta</h3>\n<p>Have volta download versions of node and yarn</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">volta install node@lts yarn@^3.0.0</span></div></code></div></pre>\n<p>You should see it download the appropriate versions of <code>node</code> and <code>yarn</code>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">success: installed and </span><span style=\"color: #0550AE\">set</span><span style=\"color: #24292F\"> node@18.18.2 as default</span></div><div class='line'><span style=\"color: #24292F\">success: installed and </span><span style=\"color: #0550AE\">set</span><span style=\"color: #24292F\"> yarn@3.6.4 as default</span></div></code></div></pre>\n<p>It’s not important what specific versions these are, as part of what volta does for us is ensure you obtain and use the right versions for each project.</p>\n<h2 id=\"cloning-the-project-repo\" style=\"position:relative;\"><a href=\"#cloning-the-project-repo\" aria-label=\"cloning the project repo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloning the project repo</h2>\n<p>clone the workshop project</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git clone git@github.com:mike-north/typescript-courses</span></div><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> typescript-courses</span></div><div class='line'><span style=\"color: #24292F\">yarn</span></div></code></div></pre>\n<p>You may see volta obtain a new version of <code>yarn</code> and <code>node</code> (if necessary), and then it should install all of the relevant dependencies</p>\n<h2 id=\"the-beginnings-of-the-project\" style=\"position:relative;\"><a href=\"#the-beginnings-of-the-project\" aria-label=\"the beginnings of the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The beginnings of the project</h2>\n<p>First, create a new directory in the <code>packages/</code> folder and enter it</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> packages</span></div><div class='line'><span style=\"color: #24292F\">mkdir chat-stdlib</span></div><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> chat-stdlib</span></div></code></div></pre>\n<p>Then, create a <code>.gitignore</code> file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">npx gitignore node</span></div></code></div></pre>\n<p>and a package.json file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn init --yes</span></div><div class='line'><span style=\"color: #24292F\">yarn config </span><span style=\"color: #0550AE\">set</span><span style=\"color: #24292F\"> nodeLinker node-modules</span></div></code></div></pre>\n<p>Add the following fields your <code>packages/chat-stdlib/package.json</code> file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #0550AE\">\"main\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dist/index.js\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #0550AE\">\"types\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dist/index.d.ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #0550AE\">\"scripts\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"build\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"yarn tsc\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"dev\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"yarn build --watch --preserveWatchOutput\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"lint\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"yarn eslint src --ext js,ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"test\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"yarn jest\"</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #0550AE\">\"license\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"NOLICENSE\"</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>and <strong>make sure to save the file</strong>. This ensures that TS and non-TS consumers alike can use this library, and that we can run the following commands</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn build   </span><span style=\"color: #6E7781\"># build the project</span></div><div class='line'><span style=\"color: #24292F\">yarn dev     </span><span style=\"color: #6E7781\"># build, and rebuild when source is changed</span></div><div class='line'><span style=\"color: #24292F\">yarn lint    </span><span style=\"color: #6E7781\"># run linting</span></div><div class='line'><span style=\"color: #24292F\">yarn </span><span style=\"color: #0550AE\">test</span><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\"># run tests</span></div></code></div></pre>\n<p>These commands won’t do anything yet, because each of them requires a tool we have yet to install</p>\n<p>Pin the node and yarn versions to their current stable releases using volta</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">volta pin node@lts yarn@^3</span></div></code></div></pre>\n<p>this will add <code>node</code> and <code>yarn</code> versions to your <code>package.json</code> automatically.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #116329\">+ \"volta\": {</span></div><div class='line'><span style=\"color: #116329\">+   \"node\": \"18.18.2\",</span></div><div class='line'><span style=\"color: #116329\">+   \"yarn\": \"3.6.4\"</span></div><div class='line'><span style=\"color: #116329\">+ }</span></div></code></div></pre>\n<p>Note that we’re using an LTS version of <code>node</code>, which is what the Node.js project tells us to do</p>\n<blockquote>\n<p>LTS release status is “long-term support”, which typically guarantees that critical bugs will be fixed for a total of 30 months. <strong>Production applications should only use Active LTS or Maintenance LTS releases.</strong></p>\n</blockquote>\n<p>Source: <a href=\"https://nodejs.dev/en/about/releases/\">nodejs.dev/en/about/releases/</a></p>\n<h2 id=\"typescript-compiler\" style=\"position:relative;\"><a href=\"#typescript-compiler\" aria-label=\"typescript compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Compiler</h2>\n<p>Install typescript as a <code>devDependency</code>, which establishes two important things</p>\n<ul>\n<li>TypeScript is included at build time, and not packaged with the library as a runtime dependency</li>\n<li>Consumers of this library do not need to use the same version of TypeScript being used to build this library. They don’t necessarily need to use TypeScript at all.</li>\n</ul>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn add -D typescript@5.3.0-beta</span></div></code></div></pre>\n<h2 id=\"setting-up-your-tsconfig\" style=\"position:relative;\"><a href=\"#setting-up-your-tsconfig\" aria-label=\"setting up your tsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up your tsconfig</h2>\n<p>Create a default <code>tsconfig.json</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn tsc --init</span></div></code></div></pre>\n<p>And add a compiler option to ensure that we target the ES2022 language level (allowing for features like <code>async</code> and <code>await</code>, as well as Ecma privave <code>#fields</code>).</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    /* Language and Environment */</span></div><div class='line'><span style=\"color: #116329\">+   \"target\": \"ES2022\",</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<p>Next, let’s change some settings to customize the how the TypeScript compiler treats modules</p>\n<ul>\n<li>tell the TS compiler to create Node-friendly CommonJS modules</li>\n<li>require <em>explicit specification of types</em> that should be used in the <code>src/</code> folder, as opposed to allowing free reign to access anything that might be in the <code>node_modules</code> folder</li>\n</ul>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    /* Modules */</span></div><div class='line'><span style=\"color: #116329\">+   \"module\": \"commonjs\",</span></div><div class='line'><span style=\"color: #116329\">+   \"rootDir\": \"src\",</span></div><div class='line'><span style=\"color: #116329\">+   \"types\": [],</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<p>Next, let’s describe the <em>output</em> of the TS compiler, ensuring that everything ends up in the <code>/dist</code> folder, declaration (<code>.d.ts</code>) files are emitted as well, and any types marked with the JSDoc tag <code>@internal</code> are omitted from publicly visible types</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    /* Emit */</span></div><div class='line'><span style=\"color: #116329\">+   \"declaration\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #116329\">+   \"stripInternal\": true, </span></div><div class='line'><span style=\"color: #24292F\">  },</span></div></code></div></pre>\n<p>Let’s make sure two potentially problematic features are <em>disabled</em>. We’ll talk later about why these are not great to leave enabled for a library.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    /* Interop Constraints */</span></div><div class='line'><span style=\"color: #116329\">+   \"esModuleInterop\": false,</span></div><div class='line'><span style=\"color: #24292F\">    /* Completeness */</span></div><div class='line'><span style=\"color: #116329\">+   \"skipLibCheck\": false</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<p>Let’s make sure that we have an “extra strict” type-checking configuration, appropriate for a green field typescript library.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">   /**</span></div><div class='line'><span style=\"color: #24292F\">    * \"strict\": true,</span></div><div class='line'><span style=\"color: #24292F\">    * -------------------</span></div><div class='line'><span style=\"color: #24292F\">    * - noImplicitAny</span></div><div class='line'><span style=\"color: #24292F\">    * - strictNullChecks</span></div><div class='line'><span style=\"color: #24292F\">    * - strictFunctionTypes</span></div><div class='line'><span style=\"color: #24292F\">    * - strictBindCallApply</span></div><div class='line'><span style=\"color: #24292F\">    * - strictPropertyInitialization</span></div><div class='line'><span style=\"color: #24292F\">    * - noImplicitThis</span></div><div class='line'><span style=\"color: #24292F\">    * - alwaysStrict</span></div><div class='line'><span style=\"color: #24292F\">    */</span></div><div class='line'><span style=\"color: #24292F\">    /* Type Checking */</span></div><div class='line'><span style=\"color: #116329\">+   \"strict\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"useUnknownInCatchVariables\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"noUnusedLocals\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"noUnusedParameters\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"exactOptionalPropertyTypes\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"noImplicitReturns\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"noUncheckedIndexedAccess\": true,                </span></div><div class='line'><span style=\"color: #116329\">+   \"noImplicitOverride\": true,</span></div><div class='line'><span style=\"color: #116329\">+   \"noPropertyAccessFromIndexSignature\": true,      </span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<p>We’ll go in to more detail later about what some of these options mean, and why I suggest setting them this way.</p>\n<p>Finally we need to define an area for our source code. Add one more line to your <code>tsconfig.json</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #24292F\">    ... </span></div><div class='line'><span style=\"color: #82071E\">- }</span></div><div class='line'><span style=\"color: #116329\">+ },</span></div><div class='line'><span style=\"color: #116329\">+ \"include\": [\"src\", \".eslintrc.js\"]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>create a folder for your source code, and make an empty <code>index.ts</code> file within it</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">mkdir src</span></div><div class='line'><span style=\"color: #24292F\">touch src/index.ts</span></div></code></div></pre>\n<p>Open <code>src/index.ts</code> and set its contents to the following</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@packageDocumentation</span><span style=\"color: #6E7781\"> A small library for common chat app functions</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A class that represents a deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@public</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Deferred</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// The promise object associated with the deferred operation.</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">#_promise</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The function to call to resolve the deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">#_resolve</span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Parameters</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">ConstructorParameters</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Promise</span><span style=\"color: #CF222E\">&lt;</span><span style=\"color: #0550AE\">T</span><span style=\"color: #24292F\">&gt;&gt;[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]&gt;[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The function to call to reject the deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">#_reject</span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Parameters</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">ConstructorParameters</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Promise</span><span style=\"color: #CF222E\">&lt;</span><span style=\"color: #0550AE\">T</span><span style=\"color: #24292F\">&gt;&gt;[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">]&gt;[</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * Creates a new instance of the Deferred class.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_promise </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt;((</span><span style=\"color: #953800\">resolve</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">reject</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_resolve </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> resolve</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_reject </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> reject</span></div><div class='line'><span style=\"color: #24292F\">        })</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * Gets the promise object associated with the deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">get</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">promise</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_promise</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * Gets the function to call to resolve the deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">get</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">resolve</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_resolve</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * Gets the function to call to reject the deferred operation.</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">get</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">reject</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#_reject</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Stringify an Error instance</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">err</span><span style=\"color: #6E7781\"> - The error to stringify</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@internal</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">stringifyErrorValue</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">err</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Error</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\">err</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\">name</span><span style=\"color: #0A3069\">.</span><span style=\"color: #8250DF\">toUpperCase</span><span style=\"color: #0A3069\">()</span><span style=\"color: #0A3069\">}: ${</span><span style=\"color: #24292F\">err</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\">message</span><span style=\"color: #0A3069\">}</span></div><div class='line'><span style=\"color: #0A3069\">    ${</span><span style=\"color: #24292F\">err</span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\">stack</span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">'(no stack trace information)'}`</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Stringify a thrown value</span></div><div class='line'><span style=\"color: #6E7781\"> *</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">errorDescription</span><span style=\"color: #6E7781\"> - A contextual description of the error</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">err</span><span style=\"color: #6E7781\"> - The thrown value</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@beta</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">stringifyError</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">err</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">errorDescription</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\">errorDescription</span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">??</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">\"( no error description )\"}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\">err</span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #0A3069\"> </span><span style=\"color: #953800\">Error</span></div><div class='line'><span style=\"color: #0A3069\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #0A3069\"> </span><span style=\"color: #8250DF\">stringifyErrorValue</span><span style=\"color: #0A3069\">(</span><span style=\"color: #24292F\">err</span><span style=\"color: #0A3069\">)</span></div><div class='line'><span style=\"color: #0A3069\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #0A3069\"> </span><span style=\"color: #24292F\">err</span></div><div class='line'><span style=\"color: #0A3069\">                </span><span style=\"color: #CF222E\">?</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">''</span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #0A3069\"> </span><span style=\"color: #24292F\">err</span></div><div class='line'><span style=\"color: #0A3069\">                </span><span style=\"color: #CF222E\">:</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">'(missing error information)'</span></div><div class='line'><span style=\"color: #0A3069\">        </span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>This is obviously convoluted, but it’ll serve our purposes for looking at some interesting behavior later.</p>\n<p>Let’s make sure that things are working so far by trying to build this project.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">rm -rf dist    </span><span style=\"color: #6E7781\"># clear away any old compiled output</span></div><div class='line'><span style=\"color: #24292F\">yarn build     </span><span style=\"color: #6E7781\"># build the project</span></div><div class='line'><span style=\"color: #24292F\">ls dist        </span><span style=\"color: #6E7781\"># list the contents of the dist/ folder</span></div></code></div></pre>\n<p>You should see something like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">index.d.ts index.js</span></div></code></div></pre>\n<p>Make a commit! We have working build script.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git add -A ../..</span></div><div class='line'><span style=\"color: #24292F\">git commit -m </span><span style=\"color: #0A3069\">\"Build is working\"</span></div></code></div></pre>\n<h2 id=\"linting\" style=\"position:relative;\"><a href=\"#linting\" aria-label=\"linting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linting</h2>\n<p>Install eslint as a development dependency</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn add -D eslint</span></div></code></div></pre>\n<p>and go through the process of creating a starting point ESLint config file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn eslint --init</span></div></code></div></pre>\n<p>When asked, please answer as follows for the choices presented to you:</p>\n<dl>\n    <dt>How would you like to use ESLint?</dt>\n    <dd>To check syntax and find problems</dd>\n    <dt>What type of modules does your project use</dt>\n    <dd>JavaScript modules (import/export)</dd>\n    <dt>Which framework does your project use?</dt>\n    <dd>None of these</dd>\n    <dt>Does your project use TypeScript?</dt>\n    <dd>Yes</dd>\n    <dt>Where does your code run?</dt>\n    <dd>\n<p><strong>Both</strong> (check both options)</p>\n</dd>\n    <dt>What format do you want your config file to be in?</dt>\n    <dd>JavaScript</dd>\n    <dt>Would you like to install them now?</dt>\n    <dd>Yes</dd>\n    <dt>Which package manager are you using?</dt>\n    <dd>yarn</dd>\n</dl>\n<p>Let’s also enable a set of rules that take advantage of type-checking information</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #8250DF\">@@ -5,7 +5,8 @@</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"extends\": [</span></div><div class='line'><span style=\"color: #24292F\">     \"eslint:recommended\",</span></div><div class='line'><span style=\"color: #82071E\">-    \"plugin:@typescript-eslint/recommended\"</span></div><div class='line'><span style=\"color: #116329\">+    \"plugin:@typescript-eslint/recommended\",</span></div><div class='line'><span style=\"color: #116329\">+    \"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span></div><div class='line'><span style=\"color: #24292F\">   ],</span></div><div class='line'><span style=\"color: #24292F\">   \"parser\": \"@typescript-eslint/parser\",</span></div></code></div></pre>\n<p>There’s one rule we want to enable, and that’s a preference for <code>const</code> over <code>let</code>. While we’re here,\nwe can disable ESLint’s rules for unused local variables and params, because the TS\ncompiler is responsible for telling us about those</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #8250DF\">@@ -14,5 +14,6 @@</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"plugins\": [\"@typescript-eslint\"],</span></div><div class='line'><span style=\"color: #24292F\">   \"rules\": {</span></div><div class='line'><span style=\"color: #116329\">+    \"prefer-const\": \"error\",</span></div><div class='line'><span style=\"color: #116329\">+    \"@typescript-eslint/no-unused-vars\": \"off\",</span></div><div class='line'><span style=\"color: #116329\">+    \"@typescript-eslint/no-unused-params\": \"off\"</span></div><div class='line'><span style=\"color: #24292F\">   }</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>Going back to our <code>/.eslintrc.js</code>, we need to tell ESLint about this new TS config — rules that require type-checking need to know about where it is</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/.eslintrc.js</span></div><div class='line'><span style=\"color: #8250DF\">@@ -4,14 +4,17 @@</span></div><div class='line'><span style=\"color: #24292F\">   \"parserOptions\": {</span></div><div class='line'><span style=\"color: #82071E\">-    \"ecmaVersion\": \"latest\"</span></div><div class='line'><span style=\"color: #116329\">+    \"ecmaVersion\": \"latest\",</span></div><div class='line'><span style=\"color: #116329\">+    \"project\": true,</span></div><div class='line'><span style=\"color: #116329\">+    \"tsconfigRootDir\": __dirname</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>While we’re in here, let’s set up some different rules for our test files compared to our source files, by adding a new object to the <code>overrides</code> array</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"files\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"tests/**/*.ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">     </span><span style=\"color: #0550AE\">\"env\"</span><span style=\"color: #24292F\">: { </span><span style=\"color: #0550AE\">\"node\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">\"jest\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>And one more modification to the override for the <code>.eslintrc.js</code> file itself</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  extends: [</span><span style=\"color: #0A3069\">\"plugin:@typescript-eslint/disable-type-checked\"</span><span style=\"color: #24292F\">],</span></div><div class='line'><span style=\"color: #24292F\">  rules: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"@typescript-eslint/no-unsafe-assignment\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"off\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<p>Let’s make sure this works by running</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn lint</span></div></code></div></pre>\n<p>You should see a linting error</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>.../typescript-courses/packages/chat-stdlib/src/index.ts\n  75:24  error  Invalid operand for a '+' operation. Operands must\n                each be a number or string, allowing a string + any\n                of: `any`, `boolean`, `null`, `RegExp`, `undefined`.\n                Got `{}` @typescript-eslint/restrict-plus-operands\n  75:24  error  'err' will evaluate to '[object Object]' when stringified</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>The problem occurs here</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Stringify a thrown value</span></div><div class='line'><span style=\"color: #6E7781\"> *</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">errorDescription</span><span style=\"color: #6E7781\"> - A contextual description of the error</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@param</span><span style=\"color: #6E7781\"> </span><span style=\"color: #24292F\">err</span><span style=\"color: #6E7781\"> - The thrown value</span></div><div class='line'><span style=\"color: #6E7781\"> * </span><span style=\"color: #CF222E\">@beta</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function stringifyError(err: unknown, errorDescription?: string): string' >stringifyError</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) err: unknown' >err</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) errorDescription: string | undefined' >errorDescription</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) errorDescription: string | undefined' >errorDescription</data-lsp></span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">??</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">\"( no error description )\"}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) err: unknown' >err</data-lsp></span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #0A3069\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span></div><div class='line'><span style=\"color: #0A3069\">    </span><span style=\"color: #CF222E\">?</span><span style=\"color: #0A3069\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function stringifyErrorValue(err: Error): string' >stringifyErrorValue</data-lsp></span><span style=\"color: #0A3069\">(</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) err: Error' >err</data-lsp></span><span style=\"color: #0A3069\">)</span></div><div class='line'><span style=\"color: #0A3069\">    </span><span style=\"color: #CF222E\">:</span><span style=\"color: #0A3069\"> </span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) err: unknown' >err</data-lsp></span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #CF222E\">?</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">&apos;&apos;</span><span style=\"color: #0A3069\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #0A3069\"> </span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) err: {}' style='border-bottom: solid 2px lightgrey;'>err</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>(parameter) err: {}</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #CF222E\">:</span><span style=\"color: #0A3069\"> </span><span style=\"color: #0A3069\">&apos;(missing error information)&apos;</span></div><div class='line'><span style=\"color: #0A3069\">  </span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAMwK4DsDGMCWEVwM4xSYoDmmCAngKJRTQBqAhgDZLAAUwtAXHDXVACUvAkVJwA3gCg4suFGAwkUXAAMAJBK5QAdCkYBbYDpgQAqmDBcAwozwdBAX16btOo3jyMSwRzLmutDoEjGgA1nAAPpFwAOTsKBD4MKERhKHAcMQI0AaMWDiCsY6qUn4A9JVwALS1aEgwtdVS5QBUrTKtcADKhMRklHCMcDAAFnQA7rgAbixsnZ1wAAJgjFCGcNrQACLAeGhEYAW41XAAgnBoODCgSixwACZ7B5hH2LgQCCOjmVtQiys1httDU4AAVH7fSYzObAAEAI0UjE65SkoEgsEQqAw72SYgG1Fo0E4PDgqDCiSmABpNkSoLt9odjgB+ER9UiCST+BRKFRwDRaOkMl5vHBwZnMuAAInYcEStIEj2eTNxgiljgAOihAlAsigQuhgJ8+HT-LJJaJ+uRCQImKwONpBGa4LxtM7zXFYnAANQKlrlOSBoMAPWZ7pdcXYBkwnn6CugepyUDyxyK-hKZSAA'>Try</a></div></pre>\n<p>ESLint is warning us about a <code>{} -> string</code> coercion using the <code>+</code> operator. We can either change this to use the <code>String</code> constructor</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">-      ? '' + err</span></div><div class='line'><span style=\"color: #116329\">+      ? String(err)</span></div></code></div></pre>\n<p>Running <code>lint</code> again should indicate that ESLint no longer objects.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn lint</span></div></code></div></pre>\n<p>Make a commit! We have working lint command.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git add -A </span><span style=\"color: #0550AE\">.</span></div><div class='line'><span style=\"color: #24292F\">git commit -m </span><span style=\"color: #0A3069\">\"Linting with ESLint is working\"</span></div></code></div></pre>\n<h2 id=\"testing\" style=\"position:relative;\"><a href=\"#testing\" aria-label=\"testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h2>\n<p>Next, let’s install our test runner, and associated type information, along with some required babel plugins</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn add -D jest @types/jest @babel/core @babel/preset-env @babel/preset-typescript</span></div></code></div></pre>\n<p>and make a folder for our tests, and create a file to contain the tests for our <code>src/index.ts</code> module</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">mkdir tests</span></div><div class='line'><span style=\"color: #24292F\">touch tests/index.test.ts</span></div></code></div></pre>\n<h3 id=\"testsindextestts\" style=\"position:relative;\"><a href=\"#testsindextestts\" aria-label=\"testsindextestts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tests/index.test.ts</code></h3>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: tests/index.test.ts</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) class Deferred&lt;T>&#10;import Deferred' >Deferred</data-lsp>, <data-lsp lsp='(alias) function stringifyError(err: unknown, errorDescription?: string): string&#10;import stringifyError' >stringifyError</data-lsp> } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;chat-stdlib&apos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='var describe: jest.Describe&#10;(name: number | string | Function | jest.FunctionLike, fn: jest.EmptyFunction) => void' >describe</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;Utils - Deferred&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(alias) class Deferred&lt;T>&#10;import Deferred' >Deferred</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var beforeEach: (fn: jest.ProvidesHookCallback, timeout?: number) => any' >beforeEach</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) new Deferred&lt;string>(): Deferred&lt;string>&#10;import Deferred' >Deferred</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should create a new instance with a promise&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;Promise&lt;string>>(actual: Promise&lt;string>) => jest.JestMatchers&lt;Promise&lt;string>>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.<data-lsp lsp='(property) Deferred&lt;string>.promise: Promise&lt;string>' >promise</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, Promise&lt;string>>.toBeInstanceOf&lt;PromiseConstructor>(expected: PromiseConstructor): void' >toBeInstanceOf</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should resolve the promise when calling resolve&apos;</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const testValue: \"Resolved Value\"' >testValue</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;Resolved Value&apos;</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Deferred&lt;string>.resolve: (value: string | PromiseLike&lt;string>) => void' >resolve</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testValue: \"Resolved Value\"' >testValue</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;Promise&lt;string>>(actual: Promise&lt;string>) => jest.JestMatchers&lt;Promise&lt;string>>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.<data-lsp lsp='(property) Deferred&lt;string>.promise: Promise&lt;string>' >promise</data-lsp>).<data-lsp lsp='(property) resolves: jest.AndNot&lt;jest.Matchers&lt;Promise&lt;void>, Promise&lt;string>>>' >resolves</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;Promise&lt;void>, Promise&lt;string>>.toBe&lt;string>(expected: string): Promise&lt;void>' >toBe</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testValue: \"Resolved Value\"' >testValue</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should reject the promise when calling reject&apos;</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;Rejected Error&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Deferred&lt;string>.reject: (reason?: any) => void' >reject</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testError: Error' >testError</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;Promise&lt;string>>(actual: Promise&lt;string>) => jest.JestMatchers&lt;Promise&lt;string>>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.<data-lsp lsp='(property) Deferred&lt;string>.promise: Promise&lt;string>' >promise</data-lsp>).<data-lsp lsp='(property) rejects: jest.AndNot&lt;jest.Matchers&lt;Promise&lt;void>, Promise&lt;string>>>' >rejects</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;Promise&lt;void>, Promise&lt;string>>.toThrow(error?: string | jest.Constructable | RegExp | Error): Promise&lt;void>' >toThrow</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testError: Error' >testError</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should have resolve and reject methods&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\">(actual: \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\") => jest.JestMatchers&lt;...>' >expect</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.<data-lsp lsp='(property) Deferred&lt;string>.resolve: (value: string | PromiseLike&lt;string>) => void' >resolve</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\">.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;function&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\">(actual: \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\") => jest.JestMatchers&lt;...>' >expect</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let deferred: Deferred&lt;string>' >deferred</data-lsp>.<data-lsp lsp='(property) Deferred&lt;string>.reject: (reason?: any) => void' >reject</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\">.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;function&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">})</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='var describe: jest.Describe&#10;(name: number | string | Function | jest.FunctionLike, fn: jest.EmptyFunction) => void' >describe</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;Utils - stringifyError&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should stringify an Error instance correctly&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;Test Error&apos;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;This is a test error&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const expectedString: string' >expectedString</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Error.name: string' >name</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #0A3069\">()</span><span style=\"color: #0A3069\">}: ${</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #24292F\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span></div><div class='line'><span style=\"color: #0A3069\">    </span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Error.stack?: string | undefined' >stack</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: string' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) stringifyError(err: unknown, errorDescription?: string): string&#10;import stringifyError' >stringifyError</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testError: Error' >testError</data-lsp>, <data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;string>(actual: string) => jest.JestMatchers&lt;string>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: string' >result</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, string>.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const expectedString: string' >expectedString</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should stringify a non-Error value correctly&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;Test Error&apos;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const testValue: \"This is a test value\"' >testValue</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;This is a test value&apos;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const expectedString: \"Test Error\\nThis is a test value\"' >expectedString</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\"><data-lsp lsp='const testValue: \"This is a test value\"' >testValue</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: string' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) stringifyError(err: unknown, errorDescription?: string): string&#10;import stringifyError' >stringifyError</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testValue: \"This is a test value\"' >testValue</data-lsp>, <data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;string>(actual: string) => jest.JestMatchers&lt;string>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: string' >result</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, string>.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const expectedString: \"Test Error\\nThis is a test value\"' >expectedString</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should handle missing error information&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;Test Error&apos;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const expectedString: \"Test Error\\n(missing error information)\"' >expectedString</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">(missing error information)`</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: string' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) stringifyError(err: unknown, errorDescription?: string): string&#10;import stringifyError' >stringifyError</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">, <data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;string>(actual: string) => jest.JestMatchers&lt;string>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: string' >result</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, string>.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const expectedString: \"Test Error\\n(missing error information)\"' >expectedString</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='var it: jest.It&#10;(name: string, fn?: jest.ProvidesCallback, timeout?: number) => void' >it</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;should handle Error instance without a stack trace&apos;</span><span style=\"color: #24292F\">, () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;Test Error&apos;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;This is a test error without stack&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">delete</span><span style=\"color: #24292F\"> <data-lsp lsp='const testError: Error' >testError</data-lsp>.<data-lsp lsp='(property) Error.stack?: string | undefined' >stack</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const expectedString: string' >expectedString</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp></span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #24292F\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Error.name: string' >name</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #0A3069\">()</span><span style=\"color: #0A3069\">}: ${</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #24292F\"><data-lsp lsp='const testError: Error' >testError</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span></div><div class='line'><span style=\"color: #0A3069\">    </span><span style=\"color: #0A3069\">}</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">(no stack trace information)`</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: string' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) stringifyError(err: unknown, errorDescription?: string): string&#10;import stringifyError' >stringifyError</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const testError: Error' >testError</data-lsp>, <data-lsp lsp='const errorDescription: \"Test Error\"' >errorDescription</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='const expect: jest.Expect&#10;&lt;string>(actual: string) => jest.JestMatchers&lt;string>' >expect</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: string' >result</data-lsp>).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) jest.Matchers&lt;void, string>.toBe&lt;string>(expected: string): void' >toBe</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const expectedString: string' >expectedString</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKRB7AJvAPqr4CuCAzsAMYAWyALgLQUN6zQBGw0iBAHgDoGFAFAgIDAJ4AHeBSwAreQ1Hx+MnACcGoarGQUKoACLxI8LVvh4APABUAfKADeo0B9AT7teKBlaOKjQFH44nMrUuoYUONTQjDagAO7QDLSg6X4EFlZJOHJajNA4iILungDEhAFBIZigAAqBwaEOjhUewABU3Z0e3aA+fpCkiFEliJk4esiwsNOg1rGwAG5+WaA5ltZ4oAWWxaXlngPA-dXLOGvwAIRYjchF6AyWFLYAwqWsWqRR2o9nvBXlp3tI5DhIE0WvV2o4ANoABgAugiUf0en1TqBBsNQKNxgxJotqHMFgwZtZIrpNts8nsDkUicd+jjzqdLvBqfcmk80MC3p9vgxfv8tID+SCwbJ4JDoXU2k40aj4QBGZEY3qswYfayJYzIbDwZKgXisZDjMJQzZmXK7PQGIwnU7ddmeajC0UUrQACgAlK5WZ50iFBNVaq0-ABeI0m5oK+DtH0+q43AA0Sy58CiAajzjc2MLmVooc5K3WoBjqfWQcLIYoYcIVOzuirWaitdAAF8-f0u6JNViXaAAOLA4ybCP1fYRFugGJxBKvPapdLF7LmHb5QpHMrat0eADmwP8MNC-sDRczDFIWim9cbU9CfYHp0x2tH4-X+LGE1KJLJRZqw2Xwtk3el9h3Zk92xV1+mPXRgIvAsi2sG872LUsm3ka4a1OftBw-McRG-Ak-3vGZSXmID2xpUC6XtRld2dTw4NOBDM2pZDOzQ297xLBtOWpF8CPELUcVAABlEVeEPaBICkecpgAUSsbRTUQc1LXcQZwBkPlUFAHZQCYIZQJ2dSKVAH5ZPkqQdIgXgQRQWAdPOdRNB0H9CWJGzEDkhTVMCLQADU5lIeAfR2LAgu0P0sD8w9L08XiMIAAwAEhcHZBBQdBhBwABVGRCg+QxIr9LssCynL0CMZBj37GqrEEc1qAAa1AAAfLrQAAch9XBrIYZAOsyIpqD8XhIG0VBdz9PquzS0QCPfCTpK0WyFPnYtAmSKZVnC+AdIcvSDKMtStDMChqE2mRoJM0AAEE9FKV5+BvOYwJuu6HrlTYLK0U79OeC6tEevF0j2g6jtOzhgWQNy1A0bRdDIh7Ers2LfWi0Axna3B9ozQHrtu6B7smAB+BKZP8gMUI8VKpky7LLtJ37iUpynQAAIh9bAZkB76yYp-8-R5rsAB1EGa8GzRGy05WxztTm5zHAsusLYAiqKrF7K9TiwHYVaLbmNtk3WtH1g3CywAbWgoWSwfU6bZvmvrOyWlbxAkJg-eoUhmD9n2IBgBA8oaV5WCoXgBGEFRhDEaBUE83QXFMcDdgzdWpGx7t8Rafq6EYFg2A4TgPdEAgfq4SK+sKolYGMUzbS3PA+ozC882ShBdAYmwsFb+lbESjoKnhmbrGU0baGTXN836fu9hjRBjQzu0bH9Coe1fU0GB9PqKFoHByD2W74ESHbV5NeWLUmlI0gyQ0n3gDvQC7hfTg8lsfSXwQX79AVAAQvAAAkppBWk0ADykAfTxkjNbHeFQ0gHyPifWAexgLfhfikXwUwqIcH8pmcsr8MyGCkOMd+89koeA9BAzIKgtYRUrP1AASjhG4ewmGv0XpnGwggkJRwYNw3s-RkDJGQGkIyGgf5-wAQIjh6wGwUhAT6IRIjt6iI8Cgw+x9T6cTnJOM8fhkh4NmPMJ2zYohv3IZQj+NDXr0KEXnFea9sYH3YdSJI2M+rWw8H-Kx+9nGXS0Z4cRkjdDfyiL-PheB-7GMAYE5ROAfB7TUSobGiDQk6LQfo+gFYsEWkwbRUALxj54AoG-exDNpFyGieCWUUIAmKPgIAlRdd0aTF8f0KJQSZRymadSNpOBVF9U6aUbpHgd5IKrvIMm8MD4NzgM3Yam1-JY0ulU6hKEcl6IwasraikLSgDzrfS0r08hRFgFILZlZP7umFM7K6cyOb-hjH1ewKgTmbP6HQ1gDDWAuNjN84KB8fAhFNAaAFkTNl+Mcf83pNhzZEJjCzEmLzybQSljLFwwTgq5X5AVYqpVyr+iqqALKQY8XaEEHVCgDVjr4WlllalWhWojQ6l7X5jzljkFbAc9ZGtQWsuJmzDFotEChI8L0lM8g+XDNUYivAyLDxZN3rs9Bewc5X1KEwPOh1tZ+A9Jchg1zbndxqX8mFwV2aYuJO8z5-yfHcqcYwo6LCPkCUhTtIRoADURQ9qcK1tSWxItpklVFsttC2oldillbrDVcqDTyuVsB+U53ceoo6oqbXiuglKkN0TeVpoVZFJVKq1XIP3rozVoB6B8AQKUkIjsiFC1dloOa0FzX3NoY89FNcJUesdboZ1yb6HlvDSwtFYqB1Yulj6B2Ts22IEnp2yYfplouv+cW9N4aNmgsQOQWAObo15vXbvaVMii2poYKWqKV7lwVs0eq6tuT9n1vYH4U5EC74mMfifaIw1RqdRFKNUhVC7kOODf2kWD0HVfNHQ811gLLosOviC7QYKvUQsNL6oWq49G6Dau1SZngCC9w2Bky67LgNbsiQ+sNayI2gGnbm2dkw424qo-iiORKSqWDKueSq1UakeFZbS+Q9Ljx9nnUNYj40wMaVXfNTdY7t03pYRmy66SUPBRPc89jpQC0yp3XeidTG1U9iAA'>Try</a></div></pre>\n<p>We’ll need to make a one-line change in our existing <code>/tsconfig.json</code> file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/tsconfig.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/tsconfig.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -1,4 +1,5 @@</span></div><div class='line'><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">   \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #116329\">+    \"composite\": true,</span></div></code></div></pre>\n<p>and to create a small <code>tests/tsconfig.json</code> just for our tests</p>\n<h3 id=\"teststsconfigjson\" style=\"position:relative;\"><a href=\"#teststsconfigjson\" aria-label=\"teststsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tests/tsconfig.json</code></h3>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"extends\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"../tsconfig.json\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"references\"</span><span style=\"color: #24292F\">: [{ </span><span style=\"color: #0550AE\">\"name\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"chat-stdlib\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">\"path\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"..\"</span><span style=\"color: #24292F\"> }],</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"compilerOptions\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"types\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\"jest\"</span><span style=\"color: #24292F\">],</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"rootDir\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"..\"</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"include\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\".\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>and a small little babel config at the root of our project, so that Jest can understand TypeScript</p>\n<h3 id=\"babelrc\" style=\"position:relative;\"><a href=\"#babelrc\" aria-label=\"babelrc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>.babelrc</code></h3>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"presets\"</span><span style=\"color: #24292F\">: [</span></div><div class='line'><span style=\"color: #24292F\">    [</span><span style=\"color: #0A3069\">\"@babel/preset-env\"</span><span style=\"color: #24292F\">, { </span><span style=\"color: #0550AE\">\"targets\"</span><span style=\"color: #24292F\">: { </span><span style=\"color: #0550AE\">\"node\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"18\"</span><span style=\"color: #24292F\"> } }],</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"@babel/preset-typescript\"</span></div><div class='line'><span style=\"color: #24292F\">  ]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<h3 id=\"take-it-for-a-spin\" style=\"position:relative;\"><a href=\"#take-it-for-a-spin\" aria-label=\"take it for a spin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Take it for a spin</h3>\n<p>At this point, we should make sure that everything works as intended before proceeding further.</p>\n<p>Run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn </span><span style=\"color: #0550AE\">test</span></div></code></div></pre>\n<p>to run the tests with jest. You should see some output like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"> PASS  tests/index.test.ts</span></div><div class='line'><span style=\"color: #24292F\">  Utils - Deferred</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should create a new instance with a promise (2 ms)</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should resolve the promise when calling resolve</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should reject the promise when calling reject (3 ms)</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should have resolve and reject methods</span></div><div class='line'><span style=\"color: #24292F\">  Utils - stringifyError</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should stringify an Error instance correctly</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should stringify a non-Error value correctly</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should handle missing error information</span></div><div class='line'><span style=\"color: #24292F\">    ✓ should handle Error instance without a stack trace (1 ms)</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">Test Suites: 1 passed, 1 total</span></div><div class='line'><span style=\"color: #24292F\">Tests:       8 passed, 8 total</span></div><div class='line'><span style=\"color: #24292F\">Snapshots:   0 total</span></div><div class='line'><span style=\"color: #24292F\">Time:        0.357 s, estimated 1 s</span></div><div class='line'><span style=\"color: #24292F\">Ran all </span><span style=\"color: #0550AE\">test</span><span style=\"color: #24292F\"> suites.</span></div></code></div></pre>\n<p>Make a commit! We have the beginnings of a test suite in place.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git add -A </span><span style=\"color: #0550AE\">.</span></div><div class='line'><span style=\"color: #24292F\">git commit -m </span><span style=\"color: #0A3069\">\"Testing with Jest is working\"</span></div></code></div></pre>\n<h2 id=\"api-surface-report--docs\" style=\"position:relative;\"><a href=\"#api-surface-report--docs\" aria-label=\"api surface report  docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API Surface Report &#x26; Docs</h2>\n<p>We’re going to use Microsoft’s <a href=\"https://api-extractor.com/\">api-extractor</a> as our\ndocumentation tool — but it’s really much more than that as we’ll see later</p>\n<p>First, let’s install it</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn add -D @microsoft/api-extractor @microsoft/api-documenter</span></div></code></div></pre>\n<p>and let’s ask <code>api-extractor</code> to create a default config for us</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"> yarn api-extractor init</span></div></code></div></pre>\n<p>This should result in a new file <code>/api-extractor.json</code> being created. Open it\nup and make the following changes</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">diff --git a/packages/chat-stdlib/api-extractor.json b/packages/chat-stdlib/api-extractor.json</span></div><div class='line'><span style=\"color: #24292F\">index c5b47c8..51da632 100644</span></div><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/api-extractor.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/api-extractor.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -43,11 +43,11 @@</span></div><div class='line'><span style=\"color: #24292F\">    * The path is resolved relative to the folder of the config file that contains the setting; to change this,</span></div><div class='line'><span style=\"color: #24292F\">    * prepend a folder token such as \"&lt;projectFolder&gt;\".</span></div><div class='line'><span style=\"color: #24292F\">    *</span></div><div class='line'><span style=\"color: #24292F\">    * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">    */</span></div><div class='line'><span style=\"color: #82071E\">-  \"mainEntryPointFilePath\": \"&lt;projectFolder&gt;/lib/index.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+  \"mainEntryPointFilePath\": \"&lt;projectFolder&gt;/dist/index.d.ts\",</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">   /**</span></div><div class='line'><span style=\"color: #24292F\">    * A list of NPM package names whose exports should be treated as part of this package.</span></div><div class='line'><span style=\"color: #24292F\">    *</span></div><div class='line'><span style=\"color: #24292F\">    * For example, suppose that Webpack is used to generate a distributed bundle for the project \"library1\",</span></div><div class='line'><span style=\"color: #8250DF\">@@ -239,11 +239,11 @@</span></div><div class='line'><span style=\"color: #24292F\">    */</span></div><div class='line'><span style=\"color: #24292F\">   \"dtsRollup\": {</span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * (REQUIRED) Whether to generate the .d.ts rollup file.</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    \"enabled\": true</span></div><div class='line'><span style=\"color: #116329\">+    \"enabled\": true,</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated without any trimming.</span></div><div class='line'><span style=\"color: #24292F\">      * This file will include all declarations that are exported by the main entry point.</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #8250DF\">@@ -253,11 +253,11 @@</span></div><div class='line'><span style=\"color: #24292F\">      * prepend a folder token such as \"&lt;projectFolder&gt;\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;.d.ts\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"untrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"untrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-private.d.ts\",</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated with trimming for an \"alpha\" release.</span></div><div class='line'><span style=\"color: #24292F\">      * This file will include only declarations that are marked as \"@public\", \"@beta\", or \"@alpha\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #8250DF\">@@ -265,11 +265,11 @@</span></div><div class='line'><span style=\"color: #24292F\">      * prepend a folder token such as \"&lt;projectFolder&gt;\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"alphaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-alpha.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"alphaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-alpha.d.ts\",</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"beta\" release.</span></div><div class='line'><span style=\"color: #24292F\">      * This file will include only declarations that are marked as \"@public\" or \"@beta\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #8250DF\">@@ -277,11 +277,11 @@</span></div><div class='line'><span style=\"color: #24292F\">      * prepend a folder token such as \"&lt;projectFolder&gt;\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"betaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-beta.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"betaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-beta.d.ts\",</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"public\" release.</span></div><div class='line'><span style=\"color: #24292F\">      * This file will include only declarations that are marked as \"@public\".</span></div><div class='line'><span style=\"color: #24292F\">      *</span></div></code></div></pre>\n<p>Make an empty <code>/etc</code> folder</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">mkdir etc</span></div></code></div></pre>\n<p>and then run api-extractor for the first time</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn api-extractor run --local</span></div></code></div></pre>\n<p>This should result in a new file being created: <code>/etc/chat-stdlib.api.md</code>. This is\nyour api-report. There’s also a <code>/temp</code> folder that will have been created. You\nshould add this to your <code>.gitignore</code>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/.gitignore</span></div><div class='line'><span style=\"color: #116329\">+++ b/.gitignore</span></div><div class='line'><span style=\"color: #8250DF\">@@ -114,3 +114,5 @@</span><span style=\"color: #24292F\"> dist</span></div><div class='line'><span style=\"color: #24292F\"> .yarn/build-state.yml</span></div><div class='line'><span style=\"color: #24292F\"> .yarn/install-state.gz</span></div><div class='line'><span style=\"color: #24292F\"> .pnp.*</span></div><div class='line'><span style=\"color: #116329\">+</span></div><div class='line'><span style=\"color: #116329\">+# API Extractor working folder</span></div><div class='line'><span style=\"color: #116329\">+temp</span></div></code></div></pre>\n<p>you may also notice that some new <code>.d.ts</code> files are in your <code>/dist</code> folder.\nTake a look at the contents. Do you see anything interesting?</p>\n<p>The last step we need to handle here is making <code>dist/chat-stdlib.d.ts</code> the types that should be used by consumers of our module. Make this change to <code>packages/chat-stdlib/package.json</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">- </span><span style=\"color: #0A3069\">\"types\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dist/index.d.ts\"</span></div><div class='line'><span style=\"color: #24292F\">+ </span><span style=\"color: #0A3069\">\"types\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dist/chat-stdlib.d.ts\"</span></div></code></div></pre>\n<h2 id=\"api-docs\" style=\"position:relative;\"><a href=\"#api-docs\" aria-label=\"api docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API Docs</h2>\n<p>We can use <code>api-documenter</code> to create markdown API docs by running</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn api-documenter markdown -i temp -o docs</span></div></code></div></pre>\n<p>This should result in the creation of a <code>/docs</code> folder containing the markdown pages. <strong>Take a moment to look at these!</strong></p>\n<p>Finally, we should make a couple of new npm scripts to help us easily\ngenerate new docs by running <code>api-extractor</code> and <code>api-documenter</code> sequentially</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/package.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/package.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -7,7 +7,10 @@</span></div><div class='line'><span style=\"color: #24292F\">     \"build\": \"tsc\",</span></div><div class='line'><span style=\"color: #24292F\">     \"watch\": \"yarn build --watch --preserveWatchOutput\",</span></div><div class='line'><span style=\"color: #24292F\">     \"lint\": \"eslint src tests --ext ts,js\",</span></div><div class='line'><span style=\"color: #82071E\">-    \"test\": \"jest\"</span></div><div class='line'><span style=\"color: #116329\">+    \"test\": \"jest\",</span></div><div class='line'><span style=\"color: #116329\">+    \"api-report\": \"api-extractor run\",</span></div><div class='line'><span style=\"color: #116329\">+    \"api-docs\": \"api-documenter markdown -i temp -o docs\",</span></div><div class='line'><span style=\"color: #116329\">+    \"build-with-docs\": \"yarn build && yarn api-report && yarn api-docs\"</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"license\": \"MIT\",</span></div><div class='line'><span style=\"color: #24292F\">   \"volta\": {</span></div></code></div></pre>\n<p>Make a commit! We have API extraction and a documentation generator in place.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git add -A </span><span style=\"color: #0550AE\">.</span></div><div class='line'><span style=\"color: #24292F\">git commit -m </span><span style=\"color: #0A3069\">\"API Extractor and API Documenter are working\"</span></div></code></div></pre>\n<h2 id=\"making-a-change-that-affects-our-api\" style=\"position:relative;\"><a href=\"#making-a-change-that-affects-our-api\" aria-label=\"making a change that affects our api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making a change that affects our API</h2>\n<p>Let’s “enhance” our library by requiring that our <code>stringifyError</code> function <em>always</em> be passed a <code>errorDescription</code> of type <code>string</code>. Just remove the optional <code>?</code> aspect of the <code>errorDescription</code>’s type annotation.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/src/index.ts</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/src/index.ts</span></div><div class='line'><span style=\"color: #8250DF\">@@ -68,7 +68,7 @@</span><span style=\"color: #24292F\"> ${err.stack || '(no stack trace information)'}`</span></div><div class='line'><span style=\"color: #24292F\">  * @param err - The thrown value</span></div><div class='line'><span style=\"color: #24292F\">  * @beta</span></div><div class='line'><span style=\"color: #24292F\">  */</span></div><div class='line'><span style=\"color: #82071E\">-export function stringifyError(err: unknown, errorDescription?: string) {</span></div><div class='line'><span style=\"color: #116329\">+export function stringifyError(err: unknown, errorDescription: string) {</span></div><div class='line'><span style=\"color: #24292F\">     return `${errorDescription ?? \"( no error description )\"}\\n${err instanceof Error</span></div><div class='line'><span style=\"color: #24292F\">             ? stringifyErrorValue(err)</span></div><div class='line'><span style=\"color: #24292F\">             : errurn sum2(a, b) + sum2(c, d);</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>Now run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn build-with-docs</span></div></code></div></pre>\n<p>You should see something like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>Warning: You have changed the public API signature for this project. \n  Please copy the file \"temp/chat-stdlib.api.md\" to \"etc/chat-stdlib.api.md\",\n  or perform a local build (which does this automatically). See the Git\n  repo documentation for more info.</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>This is <code>api-extractor</code> telling you that something that users can observe\nthrough the public API surface of this library has changed. We can follow its instructions\nto indicate that this was an <em>intentional change</em> (and probably a minor release instead of a patch)</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">cp temp/chat-stdlib.api.md etc</span></div></code></div></pre>\n<p>and build the docs again</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn build-with-docs</span></div></code></div></pre>\n<p>You should now see an updated api-report. It’s now very easy to see the ramifications of changes to our API surface on a per-code-change basis! <strong>Imagine how much easier this makes discussions about public API changes in pull requests!</strong></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/etc/chat-stdlib.api.md</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/etc/chat-stdlib.api.md</span></div><div class='line'><span style=\"color: #8250DF\">@@ -13,6 +13,6 @@</span><span style=\"color: #24292F\"> export class Deferred&lt;T&gt; {</span></div><div class='line'><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\"> // @beta</span></div><div class='line'><span style=\"color: #82071E\">-export function stringifyError(err: unknown, errorDescription?: string): string;</span></div><div class='line'><span style=\"color: #116329\">+export function stringifyError(err: unknown, errorDescription: string): string;</span></div></code></div></pre>\n<p>Our documentation has also been updated automatically</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">index 4d4dda0..fa4d35d 100644</span></div><div class='line'><span style=\"color: #82071E\">--- a/packages/chat-stdlib/docs/chat-stdlib.stringifyerror.md</span></div><div class='line'><span style=\"color: #116329\">+++ b/packages/chat-stdlib/docs/chat-stdlib.stringifyerror.md</span></div><div class='line'><span style=\"color: #8250DF\">@@ -12,7 +12,7 @@</span><span style=\"color: #24292F\"> Stringify a thrown value</span></div><div class='line'><span style=\"color: #24292F\"> **Signature:**</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\"> ` ``typescript</span></div><div class='line'><span style=\"color: #82071E\">-export declare function stringifyError(err: unknown, errorDescription?: string): string;</span></div><div class='line'><span style=\"color: #116329\">+export declare function stringifyError(err: unknown, errorDescription: string): string;</span></div><div class='line'><span style=\"color: #24292F\"> ` ``</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">## Parameters</span></div><div class='line'></div><div class='line'><span style=\"color: #8250DF\">@@ -20,7 +20,7 @@</span><span style=\"color: #24292F\"> export declare function stringifyError(err: unknown, errorDescription?: string):</span></div><div class='line'><span style=\"color: #24292F\"> |  Parameter | Type | Description |</span></div><div class='line'><span style=\"color: #24292F\"> |  --- | --- | --- |</span></div><div class='line'><span style=\"color: #24292F\"> |  err | unknown | The thrown value |</span></div><div class='line'><span style=\"color: #82071E\">-|  errorDescription | string | _(Optional)_ A contextual description of the error |</span></div><div class='line'><span style=\"color: #116329\">+|  errorDescription | string | A contextual description of the error |</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\"> **Returns:**</span></div></code></div></pre>\n<p>Make a commit! We’ve introduced the first change to our library’s public API</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git add -A </span><span style=\"color: #0550AE\">.</span></div><div class='line'><span style=\"color: #24292F\">git commit -m </span><span style=\"color: #0A3069\">\"BREAKING: stringifyError - errorDescription is now required\"</span></div></code></div></pre>\n<p>Congrats! we now have</p>\n<ul>\n<li>Compiling to JS</li>\n<li>Linting</li>\n<li>Tests</li>\n<li>Docs</li>\n<li>API surface change detection</li>\n</ul>\n<p>without having to reach for more complicated tools like webpack!</p>","tableOfContents":"<ul>\n<li><a href=\"#a-bare-bones-typescript-library-setup\">A “bare bones” TypeScript Library Setup</a></li>\n<li>\n<p><a href=\"#getting-started\">Getting Started</a></p>\n<ul>\n<li><a href=\"#installing-volta\">Installing <code>volta</code></a></li>\n<li><a href=\"#installing-node-and-yarn-through-volta\">Installing <code>node</code> and <code>yarn</code> through volta</a></li>\n</ul>\n</li>\n<li><a href=\"#cloning-the-project-repo\">Cloning the project repo</a></li>\n<li><a href=\"#the-beginnings-of-the-project\">The beginnings of the project</a></li>\n<li><a href=\"#typescript-compiler\">TypeScript Compiler</a></li>\n<li><a href=\"#setting-up-your-tsconfig\">Setting up your tsconfig</a></li>\n<li><a href=\"#linting\">Linting</a></li>\n<li>\n<p><a href=\"#testing\">Testing</a></p>\n<ul>\n<li><a href=\"#testsindextestts\"><code>tests/index.test.ts</code></a></li>\n<li><a href=\"#teststsconfigjson\"><code>tests/tsconfig.json</code></a></li>\n<li><a href=\"#babelrc\"><code>.babelrc</code></a></li>\n<li><a href=\"#take-it-for-a-spin\">Take it for a spin</a></li>\n</ul>\n</li>\n<li><a href=\"#api-surface-report--docs\">API Surface Report &#x26; Docs</a></li>\n<li><a href=\"#api-docs\">API Docs</a></li>\n<li><a href=\"#making-a-change-that-affects-our-api\">Making a change that affects our API</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/02-ts-library-zero-to-one/"},"frontmatter":{"title":"TypeScript Libraries - Zero to One","course":"enterprise-v2","date":"October 27, 2023","description":"We'll code together to create a new library from scratch, and incrementally add build tools, linting, testing and even automatic API documentation\n"}}},"pageContext":{"slug":"/course/enterprise-v2/02-ts-library-zero-to-one/","title":"TypeScript Libraries - Zero to One","course":"enterprise-v2","order":2,"previous":{"fields":{"slug":"/course/enterprise-v2/01-intro/"},"frontmatter":{"title":"Intro & Project Setup","order":1,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/03-tsconfig-strictness/"},"frontmatter":{"title":"tsconfig strictness","order":3,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}