{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/10-types-at-runtime/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"a60a7e3b-90e6-5f24-84b4-3e0d759da0d1","excerpt":"Types at Runtime TypeScript is a build-time-only tool, and this is part of why it performs well.\nThe cost of a runtime type system is not trivial, and in…","html":"<h2 id=\"types-at-runtime\" style=\"position:relative;\"><a href=\"#types-at-runtime\" aria-label=\"types at runtime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types at Runtime</h2>\n<p>TypeScript is a build-time-only tool, and this is part of why it performs well.\nThe cost of a runtime type system is not trivial, and in browsers (particularly\non limited-performance devices like cheap android phones) there’s not a whole\nlot of performance to spare.</p>\n<p>What we can do is take advantage of places where compile-time type-checking and\nruntime behavior align, to ensure that our static tools (like TS) provide\ninformation that’s as <em>complete</em> as possible.</p>\n<p>User-defined type guards are one of the most important tools available to\naccomplish this.</p>\n<p>We’re going to start exactly where we left off in the previous exercise</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">---</span><span style=\"color: #24292F\"> a</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">src</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">utils</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">networking.ts</span></div><div class='line'><span style=\"color: #CF222E\">+++</span><span style=\"color: #24292F\"> b</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">src</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">utils</span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\">networking.ts</span></div><div class='line'><span style=\"color: #24292F\">@@ </span><span style=\"color: #CF222E\">-</span><span style=\"color: #0550AE\">28</span><span style=\"color: #24292F\">,</span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #0550AE\">28</span><span style=\"color: #24292F\">,</span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\"> @@ </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">getJSON</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">input</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">RequestInfo</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">init</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">RequestInit</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> @param path</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> @param init</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">*/</span></div><div class='line'><span style=\"color: #CF222E\">-export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">apiCall</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">path</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">init</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">RequestInit</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #CF222E\">+export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">apiCall</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">path</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">init</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">RequestInit</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> response;</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> json;</span></div><div class='line'><span style=\"color: #24292F\">   </span><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> {</span></div></code></div></pre>\n<p>and use type guards to ensure that we have <em>some</em> validation of incoming\ndata at runtime, without doing something foolish like attempting to\nrun the ts compiler in each user’s browser. All of the files that use this <code>apiCall</code> function will now be unhappy, and it’s your job to make some user-defined type guards to make things work again.</p>\n<p>create a new file <a href=\"../src/type-guards.ts\"><code>src/type-guards.ts</code></a> and build\nthe following functions such that they provide a meaningful runtime check that can be used as a guard for compile-time type-checking.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { IChannel, IMessage, ITeam } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./types'</span><span style=\"color: #24292F\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">isTypedArray</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt;(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">arr</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">check</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">x</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">arr</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">[] {}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">isTeam</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">arg</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">arg</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ITeam</span><span style=\"color: #24292F\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">isChannel</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">arg</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">arg</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IChannel</span><span style=\"color: #24292F\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">isMessage</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">arg</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">arg</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IMessage</span><span style=\"color: #24292F\"> {}</span></div></code></div></pre>\n<p>and then apply these guards for all files in the <a href=\"../src/data\"><code>/src/data/</code></a> folder using patterns like</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Single resource</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function apiCall(path: string): Promise&lt;unknown>' >apiCall</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`Channels/${</span><span style=\"color: #24292F\"><data-lsp lsp='const id: string' >id</data-lsp></span><span style=\"color: #0A3069\">}`</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;unknown>.then&lt;IChannel, never>(onfulfilled?: ((value: unknown) => IChannel | PromiseLike&lt;IChannel>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) channel: unknown' style='border-bottom: solid 2px lightgrey;'>channel</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(parameter) channel: unknown</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #8250DF\"><data-lsp lsp='function isChannel(arg: any): arg is IChannel' >isChannel</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) channel: unknown' >channel</data-lsp>))</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;getChannelById: received invalid data from server&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) channel: IChannel' style='border-bottom: solid 2px lightgrey;'>channel</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>(parameter) channel: IChannel</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Collection</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function apiCall(path: string): Promise&lt;unknown>' >apiCall</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`Channels`</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  .</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;unknown>.then&lt;IChannel[], never>(onfulfilled?: ((value: unknown) => IChannel[] | PromiseLike&lt;IChannel[]>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) channels: unknown' style='border-bottom: solid 2px lightgrey;'>channels</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(parameter) channels: unknown</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #8250DF\"><data-lsp lsp='function isTypedArray&lt;IChannel>(arr: unknown, check: (x: any) => x is IChannel): arr is IChannel[]' >isTypedArray</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) channels: unknown' >channels</data-lsp>, <data-lsp lsp='function isChannel(arg: any): arg is IChannel' >isChannel</data-lsp>))</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;getChannels: received invalid data from server&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) channels: IChannel[]' style='border-bottom: solid 2px lightgrey;'>channels</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>(parameter) channels: IChannel[]</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAQwA4wMLIDbYBSrJQAWAXIgM5QBOMYA5gJTkAK1cAtjBQKYA84ANZg4AdzAA+RAG9qPKCGpI2nbjwB0cinGwA3HnjAhcKCoiEjxjAL4AoCAiqIYAE3JVaDRAF5EAcmQKFz9bUEhYBGcKDGJkMDAefGRqenI4gE9mFBSoxABJGLiE7Bk5BSVEGhAeOzDoeCRuABV01B4XAEFqamR0viaJPFtEbOpyCzEwABphxAhiHghBcjwADzSwTJ8pVdymmazk6j2AbQBdGUQyxSQqmts6KB5qYGQIHnzC+MSZOwB6AGIAC0IIgICgIKBtkBAGU6PRsB8tHBFO9bGhMDh8AADL7FCh-AAk0lc1mxjFm6hIPDAeHmRR+3ik0mhfxG7I5AD0APyzEYwYCIPAAQm4eMSdNi32wjApHJGJHYokQCWVAFFunBqHg-PR5OLsAAhdJ5NxXRY8GD6FzOMC6HCuRAuIjIRDAdgcSjPfTUPxy9nXCr06UAblZ8vlPNm1gp4YwOkR9QQ6PQWFweFxUvx5Mp1Npwfx2xk4YjIyjHIFQtFFBabU63V6koZ2AoUyiBtlfPZirEKp46s12t1+qziQo5Dk7yt7Vt9uwjudUFd7s4XuoPr9XcDSALY7DgNLZd5IxjQA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li><a href=\"#types-at-runtime\">Types at Runtime</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/10-types-at-runtime/"},"frontmatter":{"title":"Types At Runtime","course":"enterprise-v2","date":"October 27, 2023","description":"We'll add some type guards to our project, and use them as the all-important \"glue\" joining compile-time type-checking and runtime behavior\n"}}},"pageContext":{"slug":"/course/enterprise-v2/10-types-at-runtime/","title":"Types At Runtime","course":"enterprise-v2","order":10,"previous":{"fields":{"slug":"/course/enterprise-v2/09-null-undefined-and-boolean/"},"frontmatter":{"title":"Step 5 - Null, undefined and boolean operators","order":9,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/11-in-repo-packages/"},"frontmatter":{"title":"Local Packages","order":11,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}