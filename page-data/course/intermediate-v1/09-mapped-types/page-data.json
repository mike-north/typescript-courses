{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/09-mapped-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"d55ee4a3-eed7-514f-a041-5e0323a65eaf","excerpt":"Mapped allow types to be defined in other types through a\nmuch more flexible version of an index signature. We’ll\nstudy this type in detail, and demonstrate how…","html":"<p>Mapped allow types to be defined in other types through a\nmuch more flexible version of an index signature. We’ll\nstudy this type in detail, and demonstrate how it makes\nlanguage features like indexed access types and conditional\ntypes even more powerful!</p>\n<h2 id=\"the-basics\" style=\"position:relative;\"><a href=\"#the-basics\" aria-label=\"the basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The basics</h2>\n<p>If you recall the concept of index signatures allow specification\nof some value type for an arbitrary key. They’re the foundation for\ndictionary types in TypeScript:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Fruit = {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >Fruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Dict&lt;T> = {&#10;    [k: string]: T;&#10;}' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #6E7781\">// &lt;- index signature</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const fruitCatalog: Dict&lt;Fruit>' >fruitCatalog</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Dict&lt;T> = {&#10;    [k: string]: T;&#10;}' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Fruit = {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >Fruit</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const fruitCatalog: Dict&lt;Fruit>' >fruitCatalog</data-lsp>.<data-lsp lsp='Fruit' style='border-bottom: solid 2px lightgrey;'>apple</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>Fruit</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgTgVwJbCgXigbwFBSgOwEMBbCALigGdg4l8BzXKAYwHsAbVuC62hp4oUqUK+BMQBGEONgC+2bKEhQAIkmbAAPABUAfOixQA2gGseNOvQC6FbVFlQA9I6iaAtFDoATCAA8qSPREwAhwEAps+NRQAGaIKADChMCEnPQUahqa8MjA+hiY8nG5SSlpAHSEYGDs4c54DY0NAHoA-EA'>Try</a></div></pre>\n<p>What if we didn’t want <em>just any key</em> to be used to store fruits\nin our <code>fruitCatalog</code> object, but a specific subset of keys.</p>\n<p>You could do this with a map type. We’ll stop calling our collection\na <code>Dict</code>, since that would imply that we could still use arbitrary keys. Let’s\ncall this a <code>Record</code> instead. How about <code>MyRecord</code>…</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Fruit = {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >Fruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// mapped type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MyRecord = {&#10;    apple: Fruit;&#10;    cherry: Fruit;&#10;}' >MyRecord</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) FruitKey' >FruitKey</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"apple\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cherry\"</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Fruit = {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >Fruit</data-lsp></span><span style=\"color: #24292F\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printFruitCatalog(fruitCatalog: MyRecord): void' >printFruitCatalog</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) fruitCatalog: MyRecord' >fruitCatalog</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MyRecord = {&#10;    apple: Fruit;&#10;    cherry: Fruit;&#10;}' >MyRecord</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) fruitCatalog: MyRecord' >fruitCatalog</data-lsp>.<data-lsp lsp='(property) cherry: Fruit' >cherry</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) fruitCatalog: MyRecord' >fruitCatalog</data-lsp>.<data-lsp lsp='(property) apple: Fruit' style='border-bottom: solid 2px lightgrey;'>apple</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                </span><span class='popover'><div class='arrow'></div>(property) apple: Fruit</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) fruitCatalog: MyRecord' >fruitCatalog</data-lsp>.<data-err><data-lsp lsp='any' >pineapple</data-lsp></data-err></span></div><span class=\"error\"><span>Property 'pineapple' does not exist on type 'MyRecord'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'pineapple' does not exist on type 'MyRecord'.</span><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAXATwAdJQAxaAVwEt9QBeUAb11FADsBDAW0lUT5oNDgHM2oAMZwANggFCR49jy6IUnKjwBGMXAF9cuEKFXFSAE1BFSBEmQCyhAEqRp0K02agA2pVr4ANKQhKAioABEXOYykBGgAD6RkgAWMNCEEQC6qP50oIa4AGZUHJL4NHAcoMTCHPh5+ADCXPhccqIAFEXUdC1tHahOru4WAJQsEj0B-e1wogB0qemEU73NrXOL0cSxEibsh0fsAHoA-Gszmx0LxCKQO3v6QA'>Try</a></div></pre>\n<p>The thing that <em>looks like</em> an index signature is what makes this a mapped type:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{ [FruitKey </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"apple\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cherry\"</span><span style=\"color: #24292F\">]: </span><span style=\"color: #CF222E\">...</span><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>Let’s compare this to a true index signature so that we can see the differences</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{ [nameDoesntMatter: string]: </span><span style=\"color: #CF222E\">...</span><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>Notice:</p>\n<ul>\n<li>The <code>in</code> keyword in the mapped type</li>\n<li>Index signatures can be on <em>all <code>string</code>s</em> or <em>all <code>number</code>s</em>, but not some\nsubset of strings or numbers</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MyRecord = {}' >MyRecord</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-err><data-lsp lsp='(parameter) key: \"apple\" | \"cherry\"' >key</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"apple\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cherry\"</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Fruit = {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >Fruit</data-lsp></span><span style=\"color: #24292F\"> }</span></div><span class=\"error\"><span>An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead.</span><span class=\"code\">1337</span></span><span class=\"error-behind\">An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwGYMHYBQAXATwAdJQAxaAVwEt9QBeUAb11FADsBDAW0lUT5oNDgHM2oAMZwANggFCR49jy6IUnKjwBGMXAF9cuEGAC05yVXznTBEmQCyhAEqRp0ACaMWoANoBrSEJUACIuYmIZSBDQAB9QEMkACxhoQhCAXVRKWnp9IA'>Try</a></div></pre>\n<h3 id=\"record\" style=\"position:relative;\"><a href=\"#record\" aria-label=\"record permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Record</h3>\n<p>If make our type a bit more generalized with some type params\ninstead of hardcoding <code>Fruit</code> and <code>\"apple\" | \"cherry\"</code> as shown below,\nwe’ll arrive at a <em>built-in utility type</em> that comes with TypeScript.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- type MyRecord = { [FruitKey in \"apple\" | \"cherry\"]: Fruit }</span></div><div class='line'><span style=\"color: #116329\">+ type MyRecord&lt;KeyType, ValueType&gt; = { [Key in KeyType]: ValueType }</span></div></code></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type MyRecord&lt;KeyType extends string, ValueType> = { [Key in KeyType]: ValueType; }' >MyRecord</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) KeyType in type MyRecord&lt;KeyType extends string, ValueType>' >KeyType</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type MyRecord&lt;KeyType extends string, ValueType>' >ValueType</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) KeyType in type MyRecord&lt;KeyType extends string, ValueType>' >KeyType</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type MyRecord&lt;KeyType extends string, ValueType>' >ValueType</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwGYMHYBQAXATwAdJQAxaAVwEt9QBeUAb11FADsBDAW0lUT5oNDgHM2oAMZwANggFCR49jy6IUnKjwBGMXAF9cuEGAC05yVXznTBEmQCyhAEqRp0ACYAeANKRCACr2oJAAHviQHB6IoILCYgA0oABqXDJUkEGkAHyMLBIA2n6EoCKgxVmQALqoqemZ9gZAA'>Try</a></div></pre>\n<p>Here’s the built-in TypeScript type, which matches this pretty much exactly:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Construct a type with a set of properties K of type T</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Record</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">K</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">K</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>You may notice the <code>keyof any</code> difference. As you can see below, it’s\njust <code>string | number | symbol</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let anyKey: string | number | symbol' style='border-bottom: solid 2px lightgrey;'>anyKey</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let anyKey: string | number | symbol</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAhgdgngaRHAXBA1sg9gM2vAKAHoiIyyA9AfiA'>Try</a></div></pre>\n<h2 id=\"use-with-indexed-access-types\" style=\"position:relative;\"><a href=\"#use-with-indexed-access-types\" aria-label=\"use with indexed access types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use with indexed access types</h2>\n<p>Mapped types work <em>beautifully</em> with indexed access types, because\nthe <em>index</em> can be used when defining the value type.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PartOfWindow = {&#10;    document: Document;&#10;    navigator: Navigator;&#10;    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number;&#10;}' style='border-bottom: solid 2px lightgrey;'>PartOfWindow</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>type PartOfWindow = {\n    document: Document;\n    navigator: Navigator;\n    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) =&gt; number;\n}</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"document\"</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"navigator\"</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"setTimeout\"</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Window' >Window</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACghgJ2AeQGYHUCWA7AJgewHcoBeKAbwCgooB6WmqAPQH5qoBtAaQhCh3Y0APlABEBAMYBXALYRswUYKgjR2OADdMAczjB8CJYxViAzhGAAVTHPxTFAXQBcULHiLdeDygF8gA'>Try</a></div></pre>\n<p>We couldn’t have written any equivalent of <code>Window[Key]</code> using regular\nindex signatures. What we end up with, in a sense, is almost as if\n<strong>the mapped type loops over all of the possible keys, and determines\nthe appropriate value type\nfor each key</strong></p>\n<p>Let’s make this a little more generalized through the use of type params.\nFirst, we should let the caller define which keys they’d like to use. We’ll call\nthis type <code>PickWindowProperties</code> because we get to specify which things from\n<code>Window</code> we’d like</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PickWindowProperties&lt;Keys extends keyof Window> = { [Key in Keys]: Window[Key]; }' >PickWindowProperties</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickWindowProperties&lt;Keys extends keyof Window>' >Keys</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Window' >Window</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickWindowProperties&lt;Keys extends keyof Window>' >Keys</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Window' >Window</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PartOfWindow = {&#10;    document: Document;&#10;    navigator: Navigator;&#10;    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number;&#10;}' >PartOfWindow</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PickWindowProperties&lt;Keys extends keyof Window> = { [Key in Keys]: Window[Key]; }' >PickWindowProperties</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"document\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"navigator\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"setTimeout\"</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type PartOfWindow = {\n    document: Document;\n    navigator: Navigator;\n    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) =&gt; number;\n}</span></div><div class='line'><span style=\"color: #24292F\">&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACglgYwNYHU4DsAmB7A7jAJ20gODggGcAeAaQhAqggA9gItGl7sAzKNLHgB8UALxQA3gCgoUANp0QUDFEUUAugC5+GHLgX11UgL5SA9GahgCEYGQgEAtHADm6bDamhIsAIakAeR4BPTFYRFRdPEJiB3tqc0tZWQA9AH4ZKAAiHAQAVwBbdmAsqAAfbPRfADdXX2APUoqsilsAFTgi7DySqSEgA'>Try</a></div></pre>\n<p>Let’s generalize it one step further by allowing this type to work on anything,\nnot just a <code>Window</code>. Because this is no longer a type that <em>exclusively</em>\nworks with <code>Window</code>, we’ll rename this type to <code>PickProperties</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PickProperties&lt;ValueType, Keys extends keyof ValueType> = { [Key in Keys]: ValueType[Key]; }' >PickProperties</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >Keys</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >Keys</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PartOfWindow = {&#10;    readonly document: Document;&#10;    readonly navigator: Navigator;&#10;    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number;&#10;}' >PartOfWindow</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PickProperties&lt;ValueType, Keys extends keyof ValueType> = { [Key in Keys]: ValueType[Key]; }' >PickProperties</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='interface Window' >Window</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type PartOfWindow = {\n    readonly document: Document;\n    readonly navigator: Navigator;\n    setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) =&gt; number;\n}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"document\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"navigator\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"setTimeout\"</span></div><div class='line'><span style=\"color: #24292F\">&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACglgYwNYwE4HtKuHCBnAHgCgooA1AQwBsBXCAFXAgBoSoBpCEPKCAD2AQAdgBMeSLugBm5anUaQiAPigBeKAG82AbU4gocIRy54AugC5ZtBk11dTRAL5EA9C6hhUEYDgioAtHAA5kLoXkSgkLAU2ADyUgDqhiLoAO5qsIgoGFi+hK7upKQAegD8bEmiaaykAEQpCDQAtsLAtVAAPlC1QhQAbsEUwGHtXbV43vRwLeg0bcpAA'>Try</a></div></pre>\n<h3 id=\"pick\" style=\"position:relative;\"><a href=\"#pick\" aria-label=\"pick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pick</h3>\n<p>We’ve arrived at another built-in TypeScript utility type: <code>Pick</code>. Our <code>PickProperties</code>\nnow matches it exactly (the names of our type params are not of consequence)</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * From T, pick a set of properties whose keys are in the union K</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Pick</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">K</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">K</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PickProperties&lt;ValueType, Keys extends keyof ValueType> = { [Key in Keys]: ValueType[Key]; }' >PickProperties</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >Keys</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Keys in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >Keys</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) ValueType in type PickProperties&lt;ValueType, Keys extends keyof ValueType>' >ValueType</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACglgYwNYwE4HtKuHCBnAHgCgooA1AQwBsBXCAFXAgBoSoBpCEPKCAD2AQAdgBMeSLugBm5anUaQiAPigBeKAG82AbU4gocIRy54AugC5ZtBk11dTRAL5A'>Try</a></div></pre>\n<h2 id=\"mapping-modifiers\" style=\"position:relative;\"><a href=\"#mapping-modifiers\" aria-label=\"mapping modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping modifiers</h2>\n<p>Following our analogy of mapped types feeling like “looping over all keys”,\nthere are a couple of final things we can do to the properties as we\ncreate each type: set whether the value placed there should be <code>readonly</code>\nand/or <code>optional</code></p>\n<p>This is fairly straightforward, and you can see the use of the\n<code>?</code> and <code>readonly</code> in the three more built-in TypeScript utility\ntypes below.</p>\n<p>If there’s a <code>-</code> to the left of <code>readonly</code> or <code>?</code> in a mapped type, that\nindicates <em>removal</em> of this modifier instead of <em>application</em> of the modifier.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Make all properties in T optional</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Partial</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Make all properties in T required</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Required</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">-?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Make all properties in T readonly</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Readonly</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>There is no built-in TypeScript “utility type” for <code>readonly</code> removal,\nbut you could implement one if you needed to (not necessarily a good idea though)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type NotReadonly&lt;T> = { -readonly [P in keyof T]: T[P]; }' >NotReadonly</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type NotReadonly&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">-readonly</span><span style=\"color: #24292F\"> [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type NotReadonly&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type NotReadonly&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P' >P</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAcg9sAShAhgEzgOwDYgDwAqAfFALxQDeAUFFALQBOqGOIUA2gApQCWmUAawgg4AMygEAugC4JXSVQC+QA'>Try</a></div></pre>\n<h2 id=\"template-literal-types\" style=\"position:relative;\"><a href=\"#template-literal-types\" aria-label=\"template literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template literal types</h2>\n<p>TypeScript 4.1 brought with it <a href=\"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html\">template literal types</a>.</p>\n<p>Below you can see an example of how we take three things you\ncould find in a painting, and four paint colors you could use.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ArtFeatures = \"cabin\" | \"tree\" | \"sunset\"' >ArtFeatures</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cabin\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tree\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"sunset\"</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Colors = \"darkSienna\" | \"sapGreen\" | \"titaniumWhite\" | \"prussianBlue\"' >Colors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"darkSienna\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"sapGreen\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"titaniumWhite\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"prussianBlue\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAggTsAYhAhsArnCBnKBeKAIgGMUAjASwDtCoAfI4LCWhw7dK7CYQgKFCQoAYQD2AG1FxcePlHpEAJijgBrAMoUIVKin7y22FGADizGnIWFgFYCioV0AWwDqAC1stLbMHHTZsCnsAIXF0FiA'>Try</a></div></pre>\n<p>We can use the <strong>exact same syntax that one would find in an ECMAScript\ntemplate literal</strong>,\nbut in a <em>type expression</em> instead of a <em>value expression</em>, to create a new\ntype that represents every possible combination of these art features and colors</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ArtMethodNames = \"paint_darkSienna_cabin\" | \"paint_darkSienna_tree\" | \"paint_darkSienna_sunset\" | \"paint_sapGreen_cabin\" | \"paint_sapGreen_tree\" | \"paint_sapGreen_sunset\" | \"paint_titaniumWhite_cabin\" | ... 4 more ... | \"paint_prussianBlue_sunset\"' style='border-bottom: solid 2px lightgrey;'>ArtMethodNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`paint_${</span><span style=\"color: #953800\"><data-lsp lsp='type Colors = \"darkSienna\" | \"sapGreen\" | \"titaniumWhite\" | \"prussianBlue\"' >Colors</data-lsp></span><span style=\"color: #0A3069\">}_${</span><span style=\"color: #953800\"><data-lsp lsp='type ArtFeatures = \"cabin\" | \"tree\" | \"sunset\"' >ArtFeatures</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type ArtMethodNames = \"paint_darkSienna_cabin\" | \"paint_darkSienna_tree\" | \"paint_darkSienna_sunset\" | \"paint_sapGreen_cabin\" | \"paint_sapGreen_tree\" | \"paint_sapGreen_sunset\" | \"paint_titaniumWhite_cabin\" | ... 4 more ... | \"paint_prussianBlue_sunset\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAggTsAYhAhsArnCBnKBeKAIgGMUAjASwDtCoAfI4LCWhw7dK7CYQgKFCQoAYQD2AG1FxcePlHpEAJijgBrAMoUIVKin7y22FGADizGnIWFgFYCioV0AWwDqAC1stLbMHHTZsCnsAIXF0LwB6KKgAWjjidGA4mIFwaHhgAFkeN1FFADkUJxx8KAADMBRqYAB9ABIAbzFJaQBfeoaM5DRMHFayvmj5YagAPQB+IA'>Try</a></div></pre>\n<p>While something like <code>\"paint_darkSienna_cabin\"</code> could definitely be the\nname of a class method in JavaScript or TypeScript, it’s more conventional\nto use <code>camelCase</code> instead of <code>snake_case</code></p>\n<p>TypeScript provides a few special types you can use <em>within these\ntemplate literal types</em></p>\n<ul>\n<li><code>UpperCase</code></li>\n<li><code>LowerCase</code></li>\n<li><code>Capitalize</code></li>\n<li><code>Uncapitalize</code></li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ArtMethodNames = \"paintDarkSiennaCabin\" | \"paintDarkSiennaTree\" | \"paintDarkSiennaSunset\" | \"paintSapGreenCabin\" | \"paintSapGreenTree\" | \"paintSapGreenSunset\" | \"paintTitaniumWhiteCabin\" | ... 4 more ... | \"paintPrussianBlueSunset\"' >ArtMethodNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">`paint${</span><span style=\"color: #953800\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #0A3069\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Colors = \"darkSienna\" | \"sapGreen\" | \"titaniumWhite\" | \"prussianBlue\"' >Colors</data-lsp></span><span style=\"color: #0A3069\">&gt;</span><span style=\"color: #0A3069\">}${</span><span style=\"color: #953800\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #0A3069\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type ArtFeatures = \"cabin\" | \"tree\" | \"sunset\"' >ArtFeatures</data-lsp></span><span style=\"color: #0A3069\">&gt;</span><span style=\"color: #0A3069\">}`</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type ArtMethodNames = \"paintDarkSiennaCabin\" | \"paintDarkSiennaTree\" | \"paintDarkSiennaSunset\" | \"paintSapGreenCabin\" | \"paintSapGreenTree\" | \"paintSapGreenSunset\" | \"paintTitaniumWhiteCabin\" | ... 4 more ... | \"paintPrussianBlueSunset\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAggTsAYhAhsArnCBnKBeKAIgGMUAjASwDtCoAfI4LCWhw7dK7CYQgKFCQoAYQD2AG1FxcePlHpEAJijgBrAMoUIVKin7y22FGADizGnIWFgFYCioV0AWwDqAC1stLbMHHTZsCnsAIXF0LwB6KKgAWjjidGA4mL5o3x4bCDgYigBzKikIAXBoeGAAWR43UUUAORQnHHxUiPk2+QA9AH5LAAMwFGpgABIAb2FjWxRxCgAvCAAeMUlpAD4AXzGJsCmZ+YWy5DRMHA3eoA'>Try</a></div></pre>\n<p>There we go. <code>paintDarkSiennaCabin</code> is much more aligned with\nwhat we’re used to seeing for function names.</p>\n<p>Now, let’s bring this back into the world of Mapped Types,\nto perform some <strong>key mapping</strong>, where the resultant Mapped Type\nhas different property names than the type being “iterated over” during the mapping.</p>\n<p>Note the use of the <code>as</code> keyword in the index signature</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataState' >DataState</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataState.digits: number[]' >digits</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataState.names: string[]' >names</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataState.flags: Record&lt;\"darkMode\" | \"mobile\", boolean>' >flags</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Record&lt;K extends keyof any, T> = { [P in K]: T; }' >Record</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"darkMode\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"mobile\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DataSDK = {&#10;    setDigits: (arg: number[]) => void;&#10;    setNames: (arg: string[]) => void;&#10;    setFlags: (arg: Record&lt;\"darkMode\" | \"mobile\", boolean>) => void;&#10;}' >DataSDK</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// The mapped type</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataState' >DataState</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`set${</span><span style=\"color: #953800\"><data-lsp lsp='type Capitalize&lt;S extends string> = intrinsic' >Capitalize</data-lsp></span><span style=\"color: #0A3069\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #0A3069\">&gt;</span><span style=\"color: #0A3069\">}`</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span></div><div class='line'><span style=\"color: #24292F\">    (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: DataState[K]' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataState' >DataState</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\">]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function load(dataSDK: DataSDK): void' >load</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) dataSDK: DataSDK' >dataSDK</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DataSDK = {&#10;    setDigits: (arg: number[]) => void;&#10;    setNames: (arg: string[]) => void;&#10;    setFlags: (arg: Record&lt;\"darkMode\" | \"mobile\", boolean>) => void;&#10;}' >DataSDK</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) dataSDK: DataSDK' >dataSDK</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(property) setDigits: (arg: number[]) => void' >setDigits</data-lsp></span><span style=\"color: #24292F\">([</span><span style=\"color: #0550AE\">14</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) dataSDK: DataSDK' >dataSDK</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(property) setFlags: (arg: Record&lt;\"darkMode\" | \"mobile\", boolean>) => void' >setFlags</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) darkMode: boolean' >darkMode</data-lsp>: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, <data-err><data-lsp lsp='(property) mobil: boolean' >mobil</data-lsp></data-err>: </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> })</span></div><span class=\"error\"><span>Object literal may only specify known properties, but 'mobil' does not exist in type 'Record&lt;\"darkMode\" | \"mobile\", boolean&gt;'. Did you mean to write 'mobile'?</span><span class=\"code\">2561</span></span><span class=\"error-behind\">Object literal may only specify known properties, but 'mobil' does not exist in type 'Record&lt;\"darkMode\" | \"mobile\", boolean&gt;'. Did you mean to write 'mobile'?</span><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWdOA2ARgCgBLAOwBcYAzAQwGNJQAReq+gZU5tAG8SoUABMyAczJUUoCgFcAtgCMYAbQC6Q2fQWQZiKtEriNW2gBt64mQCVIjBCIA8AIhH1oAawCycEZBdQAB9QFwU4JTJzAIAaUCU4OGj6CgA+EgBfEhIqAE8ABxZ2Ti5WAGlQAF4BLRBQABUACxYFenzCkVA8wtqwfOhIKioyGABaCQoESC1VCspQT0hcuFo2Dm5eFnpEUAADREGAEn4AYTapenMyAC9IJzLUjN31ZC1hAAoPcVRijY5IWbqACUVVSoAAbnAyCJMtlaHIKIxhnAKKBzHB6CJ3u4SuUfutSmUQYJhDjuOUAHQHKisCRSRDvVRELDArRkwlUwYAMUs1ne-FEHh8fkgqEMckgcXCkXMqAY5gOoAyQMyQA'>Try</a></div></pre>\n<p>If you’ve ever written data layer code, where often there are defined\ntypes available, and potentially you have a lot of <code>is*</code>, <code>get*</code> and <code>set*</code>\nmethods, you’re probably starting to see how Mapped Types have the potential\nto provide rich validation across a wide range of data models.</p>\n<h2 id=\"filtering-properties-out\" style=\"position:relative;\"><a href=\"#filtering-properties-out\" aria-label=\"filtering properties out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering properties out</h2>\n<p>We’ve already seen how we could filter properties out of a mapped\ntype, if the filter condition is based on the <em>key</em>.</p>\n<p>Here’s an example using <code>Extract</code> and a template literal type\nto filter for only those members of <code>window.document</code> that begin with <code>\"query\"</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DocKeys = \"queryCommandEnabled\" | \"queryCommandIndeterm\" | \"queryCommandState\" | \"queryCommandSupported\" | \"queryCommandValue\" | \"querySelector\" | \"querySelectorAll\"' >DocKeys</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">`query${</span><span style=\"color: #0550AE\">string</span><span style=\"color: #0A3069\">}`</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type KeyFilteredDoc = {&#10;    queryCommandEnabled: (commandId: string) => boolean;&#10;    queryCommandIndeterm: (commandId: string) => boolean;&#10;    queryCommandState: (commandId: string) => boolean;&#10;    queryCommandSupported: (commandId: string) => boolean;&#10;    queryCommandValue: (commandId: string) => string;&#10;    querySelector: {&#10;        ...;&#10;    };&#10;    querySelectorAll: {&#10;        ...;&#10;    };&#10;}' style='border-bottom: solid 2px lightgrey;'>KeyFilteredDoc</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type KeyFilteredDoc = {\n    queryCommandEnabled: (commandId: string) =&gt; boolean;\n    queryCommandIndeterm: (commandId: string) =&gt; boolean;\n    queryCommandState: (commandId: string) =&gt; boolean;\n    queryCommandSupported: (commandId: string) =&gt; boolean;\n    queryCommandValue: (commandId: string) =&gt; string;\n    querySelector: {\n        ...;\n    };\n    querySelectorAll: {\n        ...;\n    };\n}</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DocKeys = \"queryCommandEnabled\" | \"queryCommandIndeterm\" | \"queryCommandState\" | \"queryCommandSupported\" | \"queryCommandValue\" | \"querySelector\" | \"querySelectorAll\"' >DocKeys</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIg9gYwNIRAZygXigUQB7ABOAhgsADwDWqcAZrIgK4C2EAdsADRQAGAjowiEQAEgDeaIgEs2AcwC+PAHwAoUJCgoQAMSkAbYEIgATeAixQxKqFAD0tm1AB6AfmtQA2kigyGyVGgAugBcfizswF6BKvJAA'>Try</a></div></pre>\n<p>But what if we needed to filter by <em>value</em>? To put this another way,\nwhat if we wanted things to be included or excluded from our mapped type\nbased on <code>Document[K]</code>?</p>\n<p>Our solution has to do with <code>never</code> and conditional types.</p>\n<p><strong>Here we’re using a flawed approach</strong>, where we set the “type of the value”\nto <code>never</code> whenever\nwe want to skip it. This is going to leave us with a type that still has 100%\nof the keys that <code>Document</code> has, with many many values of type <code>never</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// EXAMPLE OF WHAT NOT TO DO. DO NOT FOLLOW THIS EXAMPLE //</span></div><div class='line'><span style=\"color: #6E7781\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ValueFilteredDoc = {&#10;    readonly URL: never;&#10;    alinkColor: never;&#10;    readonly all: never;&#10;    readonly anchors: never;&#10;    readonly applets: never;&#10;    bgColor: never;&#10;    body: never;&#10;    readonly characterSet: never;&#10;    readonly charset: never;&#10;    ... 255 more ...;&#10;    evaluate: never;&#10;}' style='border-bottom: solid 2px lightgrey;'>ValueFilteredDoc</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type ValueFilteredDoc = {\n    readonly URL: never;\n    alinkColor: never;\n    readonly all: never;\n    readonly anchors: never;\n    readonly applets: never;\n    bgColor: never;\n    body: never;\n    readonly characterSet: never;\n    readonly charset: never;\n    ... 255 more ...;\n    evaluate: never;\n}</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  ) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Element' >Element</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Element' >Element</data-lsp></span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function load(doc: ValueFilteredDoc): void' >load</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) doc: ValueFilteredDoc' >doc</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ValueFilteredDoc = {&#10;    readonly URL: never;&#10;    alinkColor: never;&#10;    readonly all: never;&#10;    readonly anchors: never;&#10;    readonly applets: never;&#10;    bgColor: never;&#10;    body: never;&#10;    readonly characterSet: never;&#10;    readonly charset: never;&#10;    ... 255 more ...;&#10;    evaluate: never;&#10;}' >ValueFilteredDoc</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) doc: ValueFilteredDoc' >doc</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) querySelector&lt;\"input\">(selectors: \"input\"): HTMLInputElement | null (+4 overloads)' style='border-bottom: solid 2px lightgrey;'>querySelector</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"input\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(method) querySelector&lt;\"input\"&gt;(selectors: \"input\"): HTMLInputElement | null (+4 overloads)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZXTYFAgAQFEAaBBAsgBQDLMQHkAxRAdQAl0AVRAOUNusMQBFCA6Nlh24w3LkJlE1CgEkAyigw58iEAljKVqqHAAuATwAOAU0QA1AIYAbAK57iAS1Ma9AJz0ATVgHsAxogC8iAN5wiArAQYgAegD8gYgA2gDSiNYAdogA1npabgBmbJ7mALZ6SRoAugBcuR4FRRrxJYh6AB72Sc4AzogAFNFBHH3GDgDmbRXGSVoxJdEAlD4AfCimeoXFiAA+i8s1kz2IEZXVxXW7FUl6AG6OcAC+cHBZ5kkeGtZuKaZuxs6dzp4VJhYrLZ7E5XJ5ZgEgr8PBwAI6WBxaSR6JbPNwOToAImSOnMGkx02iSFCkRuQA'>Try</a></div></pre>\n<p>Click Try and poke at this code in the TypeScript playground. While we’re kind of\n“blocked” from using the things we tried to omit in our mapped type, this\nis quite messy.</p>\n<blockquote>\n<p>A better approach, which will get us a much cleaner result is to filter\nour keys first and then use those keys to build a mapped type</p>\n</blockquote>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Get keys of type T whose values are assignable to type U</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FilteredKeys&lt;T, U> = { [P in keyof T]: T[P] extends U ? P : never; }[keyof T] &amp; keyof T' >FilteredKeys</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type FilteredKeys&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) U in type FilteredKeys&lt;T, U>' >U</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type FilteredKeys&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type FilteredKeys&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P' >P</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) U in type FilteredKeys&lt;T, U>' >U</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'><span style=\"color: #24292F\">}[</span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type FilteredKeys&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type FilteredKeys&lt;T, U>' >T</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type RelevantDocumentKeys = \"adoptNode\" | \"createElement\" | \"createElementNS\" | \"importNode\" | \"appendChild\" | \"insertBefore\" | \"removeChild\" | \"replaceChild\" | \"elementsFromPoint\" | \"querySelector\"' >RelevantDocumentKeys</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FilteredKeys&lt;T, U> = { [P in keyof T]: T[P] extends U ? P : never; }[keyof T] &amp; keyof T' >FilteredKeys</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Element' >Element</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Element' >Element</data-lsp></span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">&gt;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ValueFilteredDoc = {&#10;    adoptNode: &lt;T extends Node>(node: T) => T;&#10;    createElement: {&#10;        &lt;K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];&#10;        &lt;K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];&#10;        (tagName: string, options?: ElementCreationOptions): HTMLElement;&#10;    };&#10;    ... 7 more ...;&#10;    querySelector: {&#10;        ...;&#10;    };&#10;}' style='border-bottom: solid 2px lightgrey;'>ValueFilteredDoc</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface Document' >Document</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type RelevantDocumentKeys = \"adoptNode\" | \"createElement\" | \"createElementNS\" | \"importNode\" | \"appendChild\" | \"insertBefore\" | \"removeChild\" | \"replaceChild\" | \"elementsFromPoint\" | \"querySelector\"' >RelevantDocumentKeys</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type ValueFilteredDoc = {\n    adoptNode: &lt;T extends Node&gt;(node: T) =&gt; T;\n    createElement: {\n        &lt;K extends keyof HTMLElementTagNameMap&gt;(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];\n        &lt;K extends keyof HTMLElementDeprecatedTagNameMap&gt;(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];\n        (tagName: string, options?: ElementCreationOptions): HTMLElement;\n    };\n    ... 7 more ...;\n    querySelector: {\n        ...;\n    };\n}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function load(doc: ValueFilteredDoc): void' >load</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) doc: ValueFilteredDoc' >doc</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ValueFilteredDoc = {&#10;    adoptNode: &lt;T extends Node>(node: T) => T;&#10;    createElement: {&#10;        &lt;K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];&#10;        &lt;K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];&#10;        (tagName: string, options?: ElementCreationOptions): HTMLElement;&#10;    };&#10;    ... 7 more ...;&#10;    querySelector: {&#10;        ...;&#10;    };&#10;}' >ValueFilteredDoc</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) doc: ValueFilteredDoc' >doc</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) querySelector&lt;\"input\">(selectors: \"input\"): HTMLInputElement | null (+4 overloads)' style='border-bottom: solid 2px lightgrey;'>querySelector</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"input\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(method) querySelector&lt;\"input\"&gt;(selectors: \"input\"): HTMLInputElement | null (+4 overloads)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEHEFMBdQa0gTwM6gPYDNTUQB0qACqgDuAFmsgQG4CGANgK6Sq0BOBtyyAlgOYA7WgCN6BaGmx4CAVQBQOfKABiPetEgcAJgGkkyADyEANKBkA+UAF5QAbzmhQAbQAKoHgPhJMRALoAuIldfUEgADw0BLVQZUAB+UDdAgUhqTTkAXycERB9CEIAyBy9crEI5BWlQACVIMToBaAARNABjRgBbSEa9FGsVNQ1tXsNilvauxuNigAoAOgX2PmRA2gFEJ18ASmtLAFExSdgAH1ADyCPNuXMKxQIANQZmVXVNSC1x-pceVrgDcc63Wgplq9TWzTagJ6+huIEcjgAenEKhhGAJWtAeGhPPQ0LQtDMtG1Ao8mJAXkN3uMdvZHETWnMAI7MNiIADKdUgGLQbBmACIPLhGNA+VtinD4UjMkA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#the-basics\">The basics</a></p>\n<ul>\n<li><a href=\"#record\">Record</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#use-with-indexed-access-types\">Use with indexed access types</a></p>\n<ul>\n<li><a href=\"#pick\">Pick</a></li>\n</ul>\n</li>\n<li><a href=\"#mapping-modifiers\">Mapping modifiers</a></li>\n<li><a href=\"#template-literal-types\">Template literal types</a></li>\n<li><a href=\"#filtering-properties-out\">Filtering properties out</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v1/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","course":"intermediate-v1","date":"June 10, 2021","description":"Mapped allow types to be defined in other types through a\nmuch more flexible version of an index signature. We'll\nstudy this type in detail, and demonstrate how it makes\nlanguage features like indexed access types and conditional\ntypes even more powerful!\n"}}},"pageContext":{"slug":"/course/intermediate-v1/09-mapped-types/","title":"Mapped Types","course":"intermediate-v1","order":9,"previous":{"fields":{"slug":"/course/intermediate-v1/08-indexed-access-types/"},"frontmatter":{"title":"Indexed Access Types","order":8,"course":"intermediate-v1","isExercise":null}},"next":null}},
    "staticQueryHashes": ["2785745750","2841359383"]}