{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/07-infer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"ce20344e-4eb8-576c-8dbe-b099b0e20d1e","excerpt":"Conditional types are not just for switching behavior based\non comparison — they can be used with an ‘infer’ keyword\nto access sub-parts of type information…","html":"<p>Conditional types are not just for switching behavior based\non comparison — they can be used with an ‘infer’ keyword\nto access sub-parts of type information within a larger type</p>\n<h2 id=\"type-inference-in-conditional-types\" style=\"position:relative;\"><a href=\"#type-inference-in-conditional-types\" aria-label=\"type inference in conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type inference in conditional types</h2>\n<p>In <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">the same release where conditional types were added to TypeScript</a>\na new <code>infer</code> keyword was added as well. This keyword, which can <em>only</em> be used\nin the context of a condition expression (within a conditional type declaration)\nis an important tool for being able to <em>extract</em> out pieces of type information\nfrom other types.</p>\n<h3 id=\"a-motivating-use-case\" style=\"position:relative;\"><a href=\"#a-motivating-use-case\" aria-label=\"a motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A motivating use case</h3>\n<p><strong>Let’s consider a practical example</strong>: a class whose constructor wants a\ncomplicated options object, but doesn’t export the type for this object as an\ninterface or type alias:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class WebpackCompiler' >WebpackCompiler</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) options: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' >options</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) amd?: false | {&#10;    [index: string]: any;&#10;} | undefined' >amd</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) index: string' >index</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) bail?: boolean | undefined' >bail</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) cache?: boolean | {&#10;    maxGenerations?: number;&#10;    type: \"memory\";&#10;} | undefined' >cache</data-lsp></span><span style=\"color: #CF222E\">?:</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">          </span><span style=\"color: #953800\"><data-lsp lsp='(property) maxGenerations?: number | undefined' >maxGenerations</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">          </span><span style=\"color: #953800\"><data-lsp lsp='(property) type: \"memory\"' >type</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"memory\"</span></div><div class='line'><span style=\"color: #24292F\">        }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) context?: string | undefined' >context</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) dependencies?: string[] | undefined' >dependencies</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) devtool?: string | false | undefined' >devtool</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) entry?: string | undefined' >entry</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) chunkLoading?: string | false | undefined' >chunkLoading</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) dependOn?: string | string[] | undefined' >dependOn</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) layer?: string | null | undefined' >layer</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) runtime?: string | undefined' >runtime</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) wasmLoading?: string | false | undefined' >wasmLoading</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) externalsType?: \"var\" | \"module\" | \"assign\" | \"this\" | \"window\" | \"self\" | \"global\" | \"commonjs\" | \"commonjs2\" | \"commonjs-module\" | \"amd\" | \"amd-require\" | \"umd\" | \"umd2\" | \"jsonp\" | \"system\" | \"promise\" | \"import\" | \"script\" | undefined' >externalsType</data-lsp></span><span style=\"color: #CF222E\">?:</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"var\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"module\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"assign\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"this\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"window\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"self\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"global\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"commonjs\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"commonjs2\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"commonjs-module\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"amd\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"amd-require\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"umd\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"umd2\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"jsonp\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"system\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"promise\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"import\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"script\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ignoreWarnings?: (RegExp | {&#10;    file?: RegExp;&#10;    message?: RegExp;&#10;    module?: RegExp;&#10;})[] | undefined' >ignoreWarnings</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">          </span><span style=\"color: #953800\"><data-lsp lsp='(property) file?: RegExp | undefined' >file</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">          </span><span style=\"color: #953800\"><data-lsp lsp='(property) message?: RegExp | undefined' >message</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">          </span><span style=\"color: #953800\"><data-lsp lsp='(property) module?: RegExp | undefined' >module</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">        }</span></div><div class='line'><span style=\"color: #24292F\">    )[]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) loader?: {&#10;    [index: string]: any;&#10;} | undefined' >loader</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) index: string' >index</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) mode?: \"development\" | \"production\" | \"none\" | undefined' >mode</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"development\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"production\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"none\"</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) name?: string | undefined' >name</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) parallelism?: number | undefined' >parallelism</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) profile?: boolean | undefined' >profile</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) recordsInputPath?: string | false | undefined' >recordsInputPath</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) recordsOutputPath?: string | false | undefined' >recordsOutputPath</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) recordsPath?: string | false | undefined' >recordsPath</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) stats?: boolean | \"none\" | \"summary\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"normal\" | \"detailed\" | \"verbose\" | undefined' >stats</data-lsp></span><span style=\"color: #CF222E\">?:</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"none\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"summary\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"errors-only\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"errors-warnings\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"minimal\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"normal\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"detailed\"</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"verbose\"</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) target?: string | false | string[] | undefined' >target</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) watch?: boolean | undefined' >watch</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">  }) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDqCmAjADmYBrAwgewLbIEsR4AnaAbwChpphsA7CAFxIFdgnsSAKbZJggwgAuCtRrQwuACYB+UQDMwICPGgAfCtADaBetPgAPUcxJ6A5gF1RYegE9oAX3E1EYIvOiJs2YrZe0aAAW8PIBNJrevvD+EhKaVHFJ0LhghgDi8PSkYAJCnvSsuIik4UlMdsjwogBEuPC4XHY1ZTTOcXT0TEZMnqYWAQZV+lnABPAQfSwW2paD8ABunL5TZvTmGtBKKvABWSx2qwMdQaz06AAy2GDSFkfrm9uq88PSAPL09xua-euzAeA7KQCqwQCBNr9zAE2F0CPUvgEAO6QXBXG53EzTB6aJ67OI9Uj0ZQQAAqlVCwjKmhqCzAJBayWpjWkoPgDKS1MgEAI5no7Li1KYQQIEH58WgNURemk2ERYoiEtUIAU8s2NXMIGwbhAqupdFwjXoACtRVSJfrDSaAEy6814S0QAC0zNZtpqUmkbo9jpI8AAjqwCL63UVPWaaqGbeGTQxkG6IHZmA03cgSHgRWzw3DkFwmPHgGZ+C0Ajz6Fx4LA6fQLJNRNwzQAleDmACihmQZsSyQkCiIFOgTdb7corQk9SgYHM-cHbY7o5oLuInhnw+7TgCAEp-nFNTdgaJyDppUZMWsrDZ7Ou4sz+zUDAt4JrkPUujU1ansCyOII+Wqy9kxSJeFT2OCRUBIZRiBAEVcBBYpSjiD9eyXUQoj8ehoXgOgSGkCAAEl6GQVgmAABVyIIvkeYk8QkX1sNwt5iKI0jyMonFqMw+iIDIoU2K2Di4mYXJazNNCYgwxkJX-TNJJqCAilSEhmnDUg0xIJ0GBAZTZNUrgnWREhq3WU1ZNwPQ4WUN0yxIVIdXDAwmHcYgw1kh8SG8VQxUckgp16EDsX4nYISxcxtwkZEmGACjUJ8dDxEcDcKGcRwgA'>Try</a></div></pre>\n<p>If, in our own code, we want to declare a variable to store our configuration\nbefore passing it into the compiler, we’re in trouble. Take a look below\nat how a spelling error around the word <code>watch</code> could create a tricky bug</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const cfg: {&#10;    entry: string;&#10;    wutch: boolean;&#10;}' >cfg</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) entry: string' >entry</data-lsp>: </span><span style=\"color: #0A3069\">\"src/index.ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) wutch: boolean' >wutch</data-lsp>: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// SPELLING ERROR!!</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const compiler: WebpackCompiler' >compiler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor WebpackCompiler(options: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    dependencies?: string[];&#10;    devtool?: string | false;&#10;    entry?: string;&#10;    chunkLoading?: string | false;&#10;    dependOn?: string | string[];&#10;    layer?: null | string;&#10;    runtime?: string;&#10;    wasmLoading?: string | false;&#10;    externalsType?: \"var\" | \"module\" | \"assign\" | \"this\" | \"window\" | \"self\" | \"global\" | \"commonjs\" | \"commonjs2\" | \"commonjs-module\" | \"amd\" | \"amd-require\" | \"umd\" | \"umd2\" | \"jsonp\" | \"system\" | \"promise\" | \"import\" | \"script\";&#10;    ignoreWarnings?: (RegExp | {&#10;        file?: RegExp;&#10;        message?: RegExp;&#10;        module?: RegExp;&#10;    })[];&#10;    loader?: {&#10;        [index: string]: any;&#10;    };&#10;    mode?: \"development\" | \"production\" | \"none\";&#10;    name?: string;&#10;    parallelism?: number;&#10;    profile?: boolean;&#10;    recordsInputPath?: string | false;&#10;    recordsOutputPath?: string | false;&#10;    recordsPath?: string | false;&#10;    stats?: boolean | \"none\" | \"summary\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"normal\" | \"detailed\" | \"verbose\";&#10;    target?: string | false | string[];&#10;    watch?: boolean;&#10;}): WebpackCompiler' >WebpackCompiler</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const cfg: {&#10;    entry: string;&#10;    wutch: boolean;&#10;}' >cfg</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (<data-lsp lsp='var err: unknown' >err</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">`Problem compiling with config</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #0550AE\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) JSON.stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string (+1 overload)' >stringify</data-lsp></span><span style=\"color: #0A3069\">(</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #24292F\"><data-lsp lsp='const cfg: {&#10;    entry: string;&#10;    wutch: boolean;&#10;}' >cfg</data-lsp></span><span style=\"color: #0A3069\">,</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #0550AE\">null</span><span style=\"color: #0A3069\">,</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #0A3069\">\"  \"</span></div><div class='line'><span style=\"color: #0A3069\">    )</span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDqCmAjADmYBrAwgewLbIEsR4AnaAbwChpphsA7CAFxIFdgnsSAKbZJggwgAuCtRrQwuACYB+UQDMwICPGgAfCtADaBetPgAPUcxJ6A5gF1RYegE9oAX3E1EYIvOiJs2YrZe0aAAW8PIBNJrevvD+EhKaVHFJ0LhghgDi8PSkYAJCnvSsuIik4UlMdsjwogBEuPC4XHY1ZTTOAXT0TEZMnqYWAQZV+lnABPAQfSwW2paD8ABunL5TZvTmGtBKKvABWSx2qwNxwEGs9OgAMthg0hZH65vbqpTzw9IA8vQPG5r967MAuA7KQCqwQCBNv9zAE2F0CPUfq84gB3SC4a63e4maaPTTPXZ7QzdEj0ZQQAAqlVCwjKmhqCzAJBayXpjWk4PgLKS9MgEAI5no3Li9KYQQIEGF8WgNRRemk2BRUoiMtUIAUys2NXMIGwbhAmvpdFwjXoACtJXSZcbTRaAEyG614W0QAC07M5jpqUmkXp9rpI8AAjqwCIGvUVfVaapGHdGLQxkF6IHZmA0vcgSHgJVzowjkFwmMngGZ+C0AgL6Fx4LAmfQLJNRNwrQAleDmACihmQVsSyQkCiINOgbc73eR-Zo9SgYHMw9HXZ7rQkHuIngX48nzjiAEpAUCbgYSJ5yDp5UYcWsrDZ7E4AuzhzUDAt4LrkPUujUtZnsByOIIhS1KtsilMlEUvY4JFQEhlGIEAJVwMFilKOIf0HNdRCiPx6FheA6BIaQIAASXoZBWCYAAFXIgh+J5yV2OJA3wwiPnIsjKOo2j8Xo3DmIgKixS4rYeLiZhckbK0sJiHDWRlYDc1kmoICKVISGaaNSCzEg3QYEB1MUzSuDdNFSQbL1cD0BFlC9KsSFSA1owMJh3GIKNFJfEhvFUcs4mckg516CC8WEnYoVxcx91RXJTk8KTYicHcKGcdoAHo0ugV1MuAcjMtdShOmYWgFA2ABeMQaH2NTaggEhgBS89DAAOiYSUABpxBRcjTlEFhWHgVroHSgBlCiO0uS4iIAOXSaAOxbFsPhbABCJbKGcA5ytoIQmC2-AhzIMrshROAkFQDAcD24geGAYqdzWwImFOaBuE0xK+zFLNjqO2aSC05s4gAAworNEGIXBdsIeDHjlMUtvoQdzAAHXoAAScgACkho+SbGuhAgFDsf6khu8x2uSQoITJpIvxlAId0cAHxDuxwgA'>Try</a></div></pre>\n<p>What we really want here is the ability to <em>extract</em> that constructor argument\nout, so that we can obtain a type for it directly. Once we have that type, we’ll\nbe able to change our code above to <code>const cfg: WebpackCompilerOptions</code> and we’ll\nhave more complete validation of this object.</p>\n<h3 id=\"the-infer-keyword\" style=\"position:relative;\"><a href=\"#the-infer-keyword\" aria-label=\"the infer keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>infer</code> keyword</h3>\n<p>The <code>infer</code> keyword gives us an important tool to solve this problem — it lets\nus <strong>extract and obtain</strong> type information from larger types.</p>\n<p>Let’s simplify the problem we aim to solve, by working with a much simpler class:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class FruitStand' >FruitStand</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) fruitNames: string[]' >fruitNames</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiBOBXAlgFwMqrAOwCbQG8AoaaYAe2wlSWFXPgAoAzJNAOTAFsBTCALmjV4ybAHMA2gF0AlIQC+ReUA'>Try</a></div></pre>\n<p>What we want is some kind of thing, where <code>FruitStand</code> is our\ninput, and <code>string[]</code> is our result. Here’s how we can make that happen:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: A' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwg9gOwM7AE4FcDGw6oIKoDmAPDAHxQC8sUEAHsBAgCZJQDeAUFFAhAO5QAFAEMiALigBLBADMIqKHgA0UAHQaxhJJJEIQAbQC6ASl37OAX25QA-EpuS+ANwVA'>Try</a></div></pre>\n<p>First, let’s establish that this works, and then we’ll unpack the syntax\nso that we can understand exactly what’s going on</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: A' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class FruitStand' >FruitStand</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) fruitNames: string[]' >fruitNames</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// our simple example</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let fruits: string[]' style='border-bottom: solid 2px lightgrey;'>fruits</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='class FruitStand' >FruitStand</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let fruits: string[]</span></div><div class='line'><span style=\"color: #6E7781\">// our more realistic example</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let compilerOptions: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' style='border-bottom: solid 2px lightgrey;'>compilerOptions</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='class WebpackCompiler' >WebpackCompiler</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>let compilerOptions: {\n    amd?: false | {\n        [index: string]: any;\n    };\n    bail?: boolean;\n    cache?: boolean | {\n        maxGenerations?: number;\n        type: \"memory\";\n    };\n    context?: string;\n    ... 20 more ...;\n    watch?: boolean;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDqCmAjADmYBrAwgewLbIEsR4AnaAbwChpphsA7CAFxIFdgnsSAKbZJggwgAuCtRrQwuACYB+UQDMwICPGgAfCtADaBetPgAPUcxJ6A5gF1RYegE9oAX3E1EYIvOiJs2YrZe0aAAW8PIBNJrevvD+EhKaVHFJ0LhghgDi8PSkYAJCnvSsuIik4UlMdsjwogBEuPC4XHY1ZTTOAXT0TEZMnqYWAQZV+lnABPAQfSwW2paD8ABunL5TZvTmGtBKKvABWSx2qwNxwEGs9OgAMthg0hZH65vbqpTzw9IA8vQPG5r967MAuA7KQCqwQCBNv9zAE2F0CPUfq84gB3SC4a63e4maaPTTPXZ7QzdEj0ZQQAAqlVCwjKmhqCzAJBayXpjWk4PgLKS9MgEAI5no3Li9KYQQIEGF8WgNRRemk2BRUoiMtUIAUys2NXMIGwbhAmvpdFwjXoACtJXSZcbTRaAEyG614W0QAC07M5jpqUmkXp9rpI8AAjqwCIGvUVfVaapGHdGLQxkF6IHZmA0vcgSHgJVzowjkFwmMngGZ+C0AgL6Fx4LAmfQLJNRNwrQAleDmACihmQVsSyQkCiINOgbc73eR-Zo9SgYHMw9HXZ7rQkHuIngX48nzjiAEpAUCbgYSJ5yDp5UYcWsrDZ7E4AuzhzUDAt4LrkPUujUtZnsByOIIhS1KtsilMlEUvY4JFQEhlGIEAJVwMFilKOIf0HNdRCiPx6FheA6BIaQIAASXoZBWCYAAFXIgh+J5yV2OJA3wwiPnIsjKOo2j8Xo3DmIgKixS4rYeLiZhckbK0sJiHDWRlYDc1kmoICKVISGaaNSCzEg3QYEB1MUzSuDdNFSQbL1cD0BFlC9KsSFSA1owMJh3GIKNFJfEhvFUcs4mckg516CC8WEnYoVxcx91RXJTk8KTYicHcKGcZwAHo0ugV1MuAcjMtdSgKiqaAcEYFh2E4EgAEF-IAHkwAA+aAAF4iugHoskIsQaGyFFoG4JlzFEPQFFIaAKp3G87EobdoFkUbxFEbIPNeUA+WgAAxNgCCYABlZz9E62ghFKjguG4BRNqYAA5KQJiCiLLES8hksodLsFYMh+XwYhWsMKRkGIShiCYLYLpEIqjrYE7Kpqgr4GwBR1ou3bbGkOqXpS5IAD1ZHR6A3rIRpA2gQNlAlARgB+v6AaBw78CHEgPn4ACweK0wyq4KrzGq2H4bgJBUAwHA6eIEg0fSuJsaAA'>Try</a></div></pre>\n<p>Ok, this is great — let’s take a close look at how we did it\nby stepping through the syntax</p>\n<p>First, we are creating a generic type, with a type param <code>C</code>\nwhich could be <em>anything</em>:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ConstructorArg</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\">&gt; ...</span></div></code></div></pre>\n<p>Next, we’re beginning to define a conditional type, using the\nternary operator syntax. We want to do something special if <code>C</code> looks\nlike <em>the static side of a class (the type with a constructor)</em>.</p>\n<p><code>{ new (...args: any[]): any }</code> is a type that matches <em>any</em>\nconstructor signature, regardless of what arguments it may take, and\nwhat it instantiates:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ConstructorArg</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}...</span></div></code></div></pre>\n<p>Next, <strong>we want to “collect” the first constructor argument</strong>. This is\nwhere the new <code>infer</code> keyword comes into play.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- new (...args: any[]): any</span></div><div class='line'><span style=\"color: #116329\">+ new (arg: infer A, ...args: any[]): any</span></div></code></div></pre>\n<p>It kind of looks like we’re using a new type param (<code>A</code>) without\nincluding it next to <code>&#x3C;C></code> in the type parameter list. We also\nhave an <code>infer</code> keyword to the left of <code>A</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ConstructorArg</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">arg</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">A</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> ...</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> ...</span></div></code></div></pre>\n<p>We should take note that our <em>condition</em> for this conditional type\nhas changed. It will no longer match <em>zero-argument constructors</em>,\nbut that’s fine because there’s nothing to extract in that case.</p>\n<p>In the case where our condition matches type <code>C</code>, we’ll return the argument\nof type <code>A</code> that we “extracted” using that <code>infer</code> keyword.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ConstructorArg</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">C</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">arg</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">A</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">A</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> ...</span></div></code></div></pre>\n<p>And finally, in the case where type <code>C</code> is <em>not a class</em> we need\nto decide which type to “emit”. Ideally this will be something that,\nwhen used in a Union type (<code>|</code>), will kind of “disappear”.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// for type `X` we're trying to figure out, we want...</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">;string </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> number </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">X</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// should just be `string | number`</span></div></code></div></pre>\n<p>What about <code>any</code>? Let’s see how that behaves</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myValue: any' style='border-bottom: solid 2px lightgrey;'>myValue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let myValue: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngagQ2AVxALggZzAJwJYB2A5hAD4QHJQBGIOZECBMAUAPRsRcB6A-EA'>Try</a></div></pre>\n<p>That’s not just the wrong result, it’s kind of the <em>opposite</em> result\nof what I was looking for. <code>any</code>, when used in a Union type, kind of\nswallows everything else in the union.</p>\n<p>If <code>any</code> gives us the opposite of what we want, maybe the opposite of\n<code>any</code> (<code>never</code>) will give us <em>exactly what we’re looking for</em>?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myValue: string | number' style='border-bottom: solid 2px lightgrey;'>myValue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let myValue: string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngagQ2AVxALggZzAJwJYB2A5hAD4QHJQBGIOZFIAbnQFAD07E3AegPxA'>Try</a></div></pre>\n<p>Great! Let’s go back to our <code>ConstructorArg&#x3C;C></code> type and add this in</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: A' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwg9gOwM7AE4FcDGw6oIKoDmAPDAHxQC8sUEAHsBAgCZJQDeAUFFAhAO5QAFAEMiALigBLBADMIqKHgA0UAHQaxhJJJEIQAbQC6ASl37OAX25QA-EpuS+ANwVA'>Try</a></div></pre>\n<p>And we’re done!</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let dateFirst: string | number | Date' style='border-bottom: solid 2px lightgrey;'>dateFirst</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let dateFirst: string | number | Date</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let promiseFirst: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void' style='border-bottom: solid 2px lightgrey;'>promiseFirst</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>let promiseFirst: (resolve: (value: unknown) =&gt; void, reject: (reason?: any) =&gt; void) =&gt; void</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let webpackCfg: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' style='border-bottom: solid 2px lightgrey;'>webpackCfg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='class WebpackCompiler' >WebpackCompiler</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let webpackCfg: {\n    amd?: false | {\n        [index: string]: any;\n    };\n    bail?: boolean;\n    cache?: boolean | {\n        maxGenerations?: number;\n        type: \"memory\";\n    };\n    context?: string;\n    ... 20 more ...;\n    watch?: boolean;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDqCmAjADmYBrAwgewLbIEsR4AnaAbwChpphsA7CAFxIFdgnsSAKbZJggwgAuCtRrQwuACYB+UQDMwICPGgAfCtADaBetPgAPUcxJ6A5gF1RYegE9oAX3E1EYIvOiJs2YrZe0aAAW8PIBNJrevvD+EhKaVHFJ0LhghgDi8PSkYAJCnvSsuIik4UlMdsjwogBEuPC4XHY1ZTTOAXT0TEZMnqYWAQZV+lnABPAQfSwW2paD8ABunL5TZvTmGtBKKvABWSx2qwNxwEGs9OgAMthg0hZH65vbqpTzw9IA8vQPG5r967MAuA7KQCqwQCBNv9zAE2F0CPUfq84gB3SC4a63e4maaPTTPXZ7QzdEj0ZQQAAqlVCwjKmhqCzAJBayXpjWk4PgLKS9MgEAI5no3Li9KYQQIEGF8WgNRRemk2BRUoiMtUIAUys2NXMIGwbhAmvpdFwjXoACtJXSZcbTRaAEyG614W0QAC07M5jpqUmkXp9rpI8AAjqwCIGvUVfVaapGHdGLQxkF6IHZmA0vcgSHgJVzowjkFwmMngGZ+C0AgL6Fx4LAmfQLJNRNwrQAleDmACihmQVsSyQkCiINOgbc73eR-Zo9SgYHMw9HXZ7rQkHuIngX48nzjiAEpAUCbgYSJ5yDp5UYcWsrDZ7E4AuzhzUDAt4LrkPUujUtZnsByOIIhS1KtsilMlEUvY4JFQEhlGIEAJVwMFilKOIf0HNdRCiPx6FheA6BIaQIAASXoZBWCYAAFXIgh+J5yV2OJA3wwiPnIsjKOo2j8Xo3DmIgKixS4rYeLiZhckbK0sJiHDWRlYDc1kmoICKVISGaaNSCzEg3QYEB1MUzSuDdNFSQbL1cD0BFlC9KsSFSA1owMJh3GIKNFJfEhvFUcs4mckg516CC8WEnYoVxcx91RXJTk8KTYicHcKGcdoKiqaAcEYFh2E4EgAEF-IAHkwAA+aAAF50ugHoskIsQaGyFFoG4JlzFEPQFFIaBcoAGmgAA6AaWpESR7FmHcbzsSht2gWQuvEURsg814AHpVugV0NuAciNtdV5iCYaBpFyeAADEw2YUQMtMbKuHy8wCtS+BsAUaAABFjuKyg1poAA9WRKH26Afws1Qzu0phLqELKOFuwrHue6AKKzEH4E+77fv+gH4AOlEkFQDBMAUVr0qhtgYbyuHqQRhAUDQLA8EIYgSDR5aJD+oA'>Try</a></div></pre>\n<p>Awesome! Now if we go back to the original thing we were trying to do, we get some\nimproved type safety</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">-const cfg = {</span></div><div class='line'><span style=\"color: #116329\">+const cfg: ConstructorArg&lt;typeof WebpackCompiler&gt; = {</span></div><div class='line'><span style=\"color: #24292F\">  entry: \"src/index.ts\",</span></div><div class='line'><span style=\"color: #24292F\">  wutch: true, // SPELLING ERROR!!</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type ConstructorArg&lt;C>' >C</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: A' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A' >A</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const cfg: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' >cfg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ConstructorArg&lt;C> = C extends new (arg: infer A, ...args: any[]) => any ? A : never' >ConstructorArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='class WebpackCompiler' >WebpackCompiler</data-lsp>> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) entry?: string | undefined' >entry</data-lsp>: </span><span style=\"color: #0A3069\">\"src/index.ts\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-err><data-lsp lsp='(property) wutch: boolean' >wutch</data-lsp></data-err>: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// SPELLING ERROR!!</span></div><span class=\"error\"><span>Object literal may only specify known properties, but 'wutch' does not exist in type '{ amd?: false | { [index: string]: any; } | undefined; bail?: boolean | undefined; cache?: boolean | { maxGenerations?: number | undefined; type: \"memory\"; } | undefined; context?: string | undefined; ... 20 more ...; watch?: boolean | undefined; }'. Did you mean to write 'watch'?</span><span class=\"code\">2561</span></span><span class=\"error-behind\">Object literal may only specify known properties, but 'wutch' does not exist in type '{ amd?: false | { [index: string]: any; } | undefined; bail?: boolean | undefined; cache?: boolean | { maxGenerations?: number | undefined; type: \"memory\"; } | undefined; context?: string | undefined; ... 20 more ...; watch?: boolean | undefined; }'. Did you mean to write 'watch'?</span><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const compiler: WebpackCompiler' >compiler</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor WebpackCompiler(options: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    dependencies?: string[];&#10;    devtool?: string | false;&#10;    entry?: string;&#10;    chunkLoading?: string | false;&#10;    dependOn?: string | string[];&#10;    layer?: null | string;&#10;    runtime?: string;&#10;    wasmLoading?: string | false;&#10;    externalsType?: \"var\" | \"module\" | \"assign\" | \"this\" | \"window\" | \"self\" | \"global\" | \"commonjs\" | \"commonjs2\" | \"commonjs-module\" | \"amd\" | \"amd-require\" | \"umd\" | \"umd2\" | \"jsonp\" | \"system\" | \"promise\" | \"import\" | \"script\";&#10;    ignoreWarnings?: (RegExp | {&#10;        file?: RegExp;&#10;        message?: RegExp;&#10;        module?: RegExp;&#10;    })[];&#10;    loader?: {&#10;        [index: string]: any;&#10;    };&#10;    mode?: \"development\" | \"production\" | \"none\";&#10;    name?: string;&#10;    parallelism?: number;&#10;    profile?: boolean;&#10;    recordsInputPath?: string | false;&#10;    recordsOutputPath?: string | false;&#10;    recordsPath?: string | false;&#10;    stats?: boolean | \"none\" | \"summary\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"normal\" | \"detailed\" | \"verbose\";&#10;    target?: string | false | string[];&#10;    watch?: boolean;&#10;}): WebpackCompiler' >WebpackCompiler</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const cfg: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' >cfg</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (<data-lsp lsp='var err: unknown' >err</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">`Problem compiling with config</span><span style=\"color: #0550AE\">\\n</span><span style=\"color: #0A3069\">${</span><span style=\"color: #0550AE\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) JSON.stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string (+1 overload)' >stringify</data-lsp></span><span style=\"color: #0A3069\">(</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #24292F\"><data-lsp lsp='const cfg: {&#10;    amd?: false | {&#10;        [index: string]: any;&#10;    };&#10;    bail?: boolean;&#10;    cache?: boolean | {&#10;        maxGenerations?: number;&#10;        type: \"memory\";&#10;    };&#10;    context?: string;&#10;    ... 20 more ...;&#10;    watch?: boolean;&#10;}' >cfg</data-lsp></span><span style=\"color: #0A3069\">,</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #0550AE\">null</span><span style=\"color: #0A3069\">,</span></div><div class='line'><span style=\"color: #0A3069\">      </span><span style=\"color: #0A3069\">\"  \"</span></div><div class='line'><span style=\"color: #0A3069\">    )</span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQVgGwCMAUAMYA2AhooqAOqQBGADpaQNYDCcAtswJbkYoAN7FQoUnAB2iAC7QArqTkIAFHGZz+MlKPETQlHgBMA-KgBmlcokigAPqNABtftJOQAHqnnR3AOYAuqiU0gCeoAC+BhKMlIIWoIxwcEJhsZJsABaQFpkSTilpkBmGhk5i5dWgPJReAOKQ0jCU2rpJ0oo8jDAF1XLhzJCoAEQ8kDwI4aP9EjGZUtJy3nJJfoGZnsMezaT8kIjrCoEuQVuQAG6qacf+0gGOoNa2kJnNCuF3m+Wk2YrSdgAGTglBMgW+DyeLzsxAuOxMAHlpJDHk4Ng8zpkqOEYJ1FORyE8MQFMkplvwJqi4eUAO7UHggsEQ3wnKFOGFvd5eFbQaQ2RAAFSGeWQ-Sco0ulGgsxqEqmJgJkFl1Ql1EQ-AC0hV5Qlcmy-EQOoqoFGtPcJjgtONhVNdnIlhtT1GAXIcHi5CdEqkPCm0gAVkbxaafX7A2gvSHeGHEABaBVKyOjYwmJMp2PQSAAR0U-EzSe6qeDo0LEeLgZkzCTiHC8kmSeY8B4huVxcpzAQcmrpH8WlmmU10gQkDo0ukgSOqDUwYASpAAgBRLzMYNVGqGSyCUWgOeL5c09cSCY0SgBbe7pcruaGBNCJIX-eHmLlACUWOxoM80CSIlcFu8rL3MEoQRNEmQKtuoyeJckBuswEzLKMzqNnAioqDo2rOkOLTGvyVKAT8hisNANhCOQho8PiPR9OUKGbneqDFOk0hkpAUjQCYiAAJLSMwihyAACm02SotCApvOUmbsZxiL8XxgnCaJHLiax0mIEJ+pKc8KnlPIbSTsGTGlCxcqmthramaMiDdHU0AzMWMDwEgsYyOQ9mWY5CBxvSfITkmzbjnUnrFkO0BBUmnhyAkQhFpZMHQCkdj9uUUXQGeawEey2mvMSbIBO+dJtH8SRGWU0QvqIMQLCAYCxnVpD8XVsbEIMwygNwsgKMoqjQAAgmlAA8nAAHygAAvO1oCrM0nH6BILS0qAajSgEqDuJYwi9QANKAAB0+0rXoYThGcL4geExDPqAZigL1BioC08Vwks8iSJYq3tboXUqAg-UBANrWQHAlj0EwrAcNwfBbtAo0TWuHx2WMiDQKQwD-l4u1yEaW0GLS-F-KgXWQDtICgAAygJC5AkCXEAHINKAC4zjOiIzgAhGzl0tXZc2SF9fNQ0I0DjaAC2gywbBcLwAhC2opDvS+l1ZHIfxLY5FVrvq8CLWLC6wOomQAAYCfAjBCDwAsy4EoDmvqfPSJuAQADrSAAJCIABSZOIrTu0kvwljhNONTywEOM1F0hLh9USGmpkL5RIbBiK1EQA'>Try</a></div></pre>\n<p><img class=\"emoji-icon\" alt=\"emoji-tada\" data-icon=\"emoji-tada\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-tada\"> Success!</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#type-inference-in-conditional-types\">Type inference in conditional types</a></p>\n<ul>\n<li><a href=\"#a-motivating-use-case\">A motivating use case</a></li>\n<li><a href=\"#the-infer-keyword\">The <code>infer</code> keyword</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/intermediate-v1/07-infer/"},"frontmatter":{"title":"Inference with conditional types","course":"intermediate-v1","date":"June 10, 2021","description":"Conditional types are not just for switching behavior based\non comparison -- they can be used with an 'infer' keyword\nto access sub-parts of type information within a larger type\n"}}},"pageContext":{"slug":"/course/intermediate-v1/07-infer/","title":"Inference with conditional types","course":"intermediate-v1","order":7,"previous":{"fields":{"slug":"/course/intermediate-v1/06-extract-exclude/"},"frontmatter":{"title":"Extract and Exclude","order":6,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/08-indexed-access-types/"},"frontmatter":{"title":"Indexed Access Types","order":8,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}