{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/02-declaration-merging/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"c53d9e83-3ffa-517f-8164-6454f11543ee","excerpt":"We have different types of “named things” in TypeScript, including values and functions (and occasionally things that can be used as both). By the end of this…","html":"<p>We have different types of “named things” in TypeScript, including values and functions (and occasionally things that can be used as both). <strong>By the end of this\nchapter, you’ll have a solid understanding of how to examine and understand these entities in TypeScript.</strong></p>\n<p>In order to truly understand how types and values “stack” on\neach other, we’ll first tackle the concept of declaration merging.\nOften when people grasp how TypeScript handles this, they never look\nat the language the same way again.</p>\n<p>Many things can be <em>declared with a name and referenced later</em>\nin the TypeScript world, this includes variables and interfaces\nas we can see below\n<br/>\n<br/>\n<br/></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Fruit' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>interface Fruit</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const banana: Fruit' style='border-bottom: solid 2px lightgrey;'>banana</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const banana: Fruit</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) Fruit.name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) Fruit.color: string' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgGJQK7DMg3gKGWQHpijzkA9AfkORDgFsIAuZAZzClAHM7G47dmxAZGAI2h0EAewA2MqG07cQfAL758skJ2Ti4DBm3RYcAXjx1SFGnQbM2AIgNG4TgDTT5i5wE8IOQUAd09+QWFkAEYADgBmL3UgA'>Try</a></div></pre>\n<p>Let’s coin a term here and call <code>banana</code> and <code>Fruit</code> both\n<strong>identifiers</strong><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, in that they provide a named reference\nto some information (be it a value, or a type)</p>\n<h2 id=\"stacking-multiple-things-on-an-identifier\" style=\"position:relative;\"><a href=\"#stacking-multiple-things-on-an-identifier\" aria-label=\"stacking multiple things on an identifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stacking multiple things on an identifier</h2>\n<p>It may seem a little silly, but what if we renamed\n<code>banana</code> to <code>Fruit</code>. What do you think would happen?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Fruit' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>interface Fruit</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const Fruit: {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const Fruit: {\n    name: string;\n    color: string;\n    mass: number;\n}</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) color: string' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) mass: number' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) interface Fruit&#10;(alias) const Fruit: {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}&#10;export Fruit' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp> }</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(alias) interface Fruit\n(alias) const Fruit: {\n    name: string;\n    color: string;\n    mass: number;\n}\nexport Fruit</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgGJQK7DMg3gKGWQHpijzkA9AfkORDgFsIAuZAZzClAHM7G47dmxAZGAI2h0EAewA2MqG07cQfAL758skJzSZsyALx46pCjToNmbAETi4DBrYA00+YrsBPCHIUB3V35BYWQARgAOAGY3TXwIAA8AB0UcXH0sHE1zCnIaIA'>Try</a></div></pre>\n<p>This is probably surprising for some readers — especially\nthe tooltip on the <code>export</code>.</p>\n<p>in fact, there’s a third kind of thing we can stack on this\ncalled a <code>namespace</code> (we’ll talk more about this later)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit&#10;interface Fruit&#10;namespace Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit&#10;interface Fruit&#10;namespace Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) Fruit.name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) Fruit.color: string' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the namespace</span></div><div class='line'><span style=\"color: #CF222E\">namespace</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit&#10;namespace Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function createFruit(): Fruit' >createFruit</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit&#10;interface Fruit&#10;namespace Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// the type</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='class Fruit&#10;namespace Fruit' >Fruit</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// the class</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit&#10;interface Fruit&#10;namespace Fruit' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>class Fruit\ninterface Fruit\nnamespace Fruit</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) class Fruit&#10;(alias) interface Fruit&#10;(alias) namespace Fruit&#10;export Fruit' style='border-bottom: solid 2px lightgrey;'>Fruit</data-lsp> }</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(alias) class Fruit\n(alias) interface Fruit\n(alias) namespace Fruit\nexport Fruit</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCsBGd29NcAoYgYwBsBDRRUAMWgFcBLAF1AG9jRRE2qbFmVBlokQZABCVAHZyqACgCUqRqw7devcWybRZXUPIC2kVACIARgvkWANKLgUElgJ6QKLgO4PQJmhRQHAAOAGZQAF8eKOJo4hBQNgALSGMqM0QAByoySGJTSGzctPV2LhiAMyZZMiE4QzEJNkgythU1ZnKtbUSUtLY3LPztUF19QzaAOibJGXl5FVA+1NFqWhjo+JZZFuhKkoYuzRjE0dAAPQB+GMLUfmgdgHMYgNpUWSYTKxgYsmdXHw2I9ZC94pAAB5ZBCaI4aWJnc6XK5AA'>Try</a></div></pre>\n<p>I propose that in the situation above, we have one identifier that’s three things in one:</p>\n<ul>\n<li>a value (class)</li>\n<li>a type</li>\n<li>a namespace</li>\n</ul>\n<p>Proving this hypothesis will be easier if we have some way <strong>to tell what’s on an identifier</strong></p>\n<h2 id=\"how-to-tell-whats-on-an-identifier\" style=\"position:relative;\"><a href=\"#how-to-tell-whats-on-an-identifier\" aria-label=\"how to tell whats on an identifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to tell what’s on an identifier</h2>\n<p>Tooltips, and attempts to use identifiers in certain positions are\na great mechanism of understanding what we’re dealing with</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const is_a_value: 4' >is_a_value</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type is_a_type = {}' >is_a_type</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'><span style=\"color: #CF222E\">namespace</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='namespace is_a_namespace' >is_a_namespace</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const foo: 17' >foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">17</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a value</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const x: 4' >x</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const is_a_value: 4' >is_a_value</data-lsp> </span><span style=\"color: #6E7781\">// the value position (RHS of =).</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a type</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const y: is_a_type' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type is_a_type = {}' >is_a_type</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #6E7781\">// the type position (LHS of = ).</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a namespace (hover over is_a_namespace symbol)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='namespace is_a_namespace' >is_a_namespace</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAlhA+gQ0QN2QGwK4FMYC8MALAFBQCeADvgiopTYTAN4C+pYyAtrhFcmC0kqLr36D8LUjBihIsAGYgQzAIwB2Uh1IB6XTAAWIAO4woqqHyUgATjGQwMOXKXnQYAD2Z1UzvDD65ob4-vhUIBBwUHDgMAAUAEoAEgDKMCCKhACUAHSkegbGZhbm1jDK9o6Mru6wFABc8CIM1PhE7IEGUCHmbTARUTFx8QAyaRlZRHkFQcXmluWVDjBifAJCCcZouPYgO-a+iGsSmxAU3ABGIJjZpEcnG7hAA'>Try</a></div></pre>\n<p>Let’s look at some failing cases to convince ourselves that these tests work</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const is_a_value: 4' >is_a_value</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type is_a_type = {}' >is_a_type</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a value</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const x: any' >x</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-err><data-lsp lsp='any' >is_a_type</data-lsp></data-err></span></div><span class=\"error\"><span>'is_a_type' only refers to a type, but is being used as a value here.</span><span class=\"code\">2693</span></span><span class=\"error-behind\">'is_a_type' only refers to a type, but is being used as a value here.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a type</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const y: is_a_value' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-err><data-lsp lsp='type is_a_value = /*unresolved*/ any' >is_a_value</data-lsp></data-err></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><span class=\"error\"><span>'is_a_value' refers to a value, but is being used as a type here. Did you mean 'typeof is_a_value'?</span><span class=\"code\">2749</span></span><span class=\"error-behind\">'is_a_value' refers to a value, but is being used as a type here. Did you mean 'typeof is_a_value'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYCcBmdB2AFiwCgBjOAO0QBdQBLRAfQEMmA3FgGwFdJQAvKEIkaATwAO-Rqybipg0AG8AviRIhQACzgB3UDTgHItUADMEoFqE69I5KqYAeimW3n2NYHfsPHTFtBWBpL2FNR0YqhuHNx8iqpAA'>Try</a></div></pre>\n<p>The <code>namespace</code> test is a bit self-explanatory, so we’ve left that out, but hopefully this is convincing enough</p>\n<h2 id=\"a-short-aside-whats-the-point-namespace\" style=\"position:relative;\"><a href=\"#a-short-aside-whats-the-point-namespace\" aria-label=\"a short aside whats the point namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A short aside: what’s the point <code>namespace</code>?</h2>\n<p>Do any of you remember using <a href=\"https://jquery.com/\">jQuery</a>?</p>\n<p>To describe the way this library works using type information, you need to be able to handle cases like</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='namespace $&#10;function $(selector: string): NodeListOf&lt;Element>' >$</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='function $.ajax(arg: {&#10;    url: string;&#10;    data: any;&#10;    success: (response: any) => void;&#10;}): Promise&lt;any>' >ajax</data-lsp></span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) url: string' >url</data-lsp>: </span><span style=\"color: #0A3069\">\"/api/getWeather\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) data: any' >data</data-lsp>: {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(property) zipcode: number' >zipcode</data-lsp>: </span><span style=\"color: #0550AE\">97201</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) success: (response: any) => void' >success</data-lsp></span><span style=\"color: #24292F\">: </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) result: any' >result</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='function $(selector: string): NodeListOf&lt;Element>&#10;namespace $' >$</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"#weather-temp\"</span><span style=\"color: #24292F\">)[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">].<data-lsp lsp='(property) Element.innerHTML: string' >innerHTML</data-lsp> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"&lt;strong&gt;\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) result: any' >result</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"&lt;/strong&gt; degrees\"</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">})</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function $(selector: string): NodeListOf&lt;Element>&#10;namespace $' >$</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"h1.title\"</span><span style=\"color: #24292F\">).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) NodeListOf&lt;Element>.forEach(callbackfn: (value: Element, key: number, parent: NodeListOf&lt;Element>) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) node: Element' >node</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) node: Element' >node</data-lsp>.<data-lsp lsp='(property) Element.tagName: string' style='border-bottom: solid 2px lightgrey;'>tagName</data-lsp> </span><span style=\"color: #6E7781\">// \"h1\"</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>(property) Element.tagName: string</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEgBQGcCmAbT04BOAXIulATGAOYCUJAcnACaYAyMZA8sADwCiuALaYwUAHyIA3gChEiApiggCSJnAghhogHQBHEJgIBPAMo48UQgEFs2DOfwEa0gL7SwAQ2HoADh4iYKFKyiJgAHj6EUIigkLAIiB4AVh5hqB4EVCQycnLK2CRkFNQhckweUB4kHmBGpaQgEAHo6CSoCr4IWNW1NIgAvBIAbnAwTCEudIgACgRwghyYPDVGEjm5CkoqM3MLWNodcNhDmKjOcm5u0gD0t4gAtI8aUI-30sjayamo6-kkAETXDw+GDXKiKADqmAqAAtDP8ADQhcqVbL1ABeMB8EGYmBIAE4AOwAJgADABGJEXKkNJqYFokWLQeBIdr0kDYKB9dZyND-ADEAHdoVA4QR7lBMIIfP8aABtUkAXW0lDAhgAEgAVACyrAG9Tk-x4RQQVDE-0QAGp5OzOVbEEbribqBIWFQFPT-hMkZN3qh-jDydpYFBcLLtMBCHx-DDUKgwLi+oNgnIEyxgx4qPQvIE7gHyV65HdcgA9AD8rhoQA'>Try</a></div></pre>\n<p>We could define a function and a namespace that “stack” like\nthis, so that <code>$</code> could simultaneously be invoked directly, and\nserve as a namespace for things like <a href=\"https://api.jquery.com/jQuery.ajax/\"><code>$.ajax</code></a>,\n<a href=\"https://api.jquery.com/jQuery.getJSON/\"><code>$.getJSON</code></a> and so on…</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function $(selector: string): NodeListOf&lt;Element>&#10;namespace $' >$</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) selector: string' >selector</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface NodeListOf&lt;TNode extends Node>' >NodeListOf</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface Element' >Element</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='var document: Document' >document</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ParentNode.querySelectorAll&lt;Element>(selectors: string): NodeListOf&lt;Element> (+4 overloads)' >querySelectorAll</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) selector: string' >selector</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">namespace</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='namespace $&#10;function $(selector: string): NodeListOf&lt;Element>' >$</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function $.ajax(arg: {&#10;    url: string;&#10;    data: any;&#10;    success: (response: any) => void;&#10;}): Promise&lt;any>' >ajax</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: {&#10;    url: string;&#10;    data: any;&#10;    success: (response: any) => void;&#10;}' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) data: any' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) success: (response: any) => void' >success</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) response: any' >response</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'><span style=\"color: #24292F\">  })</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) PromiseConstructor.resolve(): Promise&lt;void> (+2 overloads)' >resolve</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEgBQGcCmAbT04BOAXIulATGAOYCUJAcnACaYAyMZA8sADwCiuALaYwUAHyIA3gChEiApiggCSJnAghhogHQBHEJgIBPAMo48UQgEFs2DOfwEa0gL7SwAQ2HoADh4iYKFKyiJgAHj6EUIigkLAIiB4AVh5hqB4EVCQycnLK2CRkFNQhckweUB4kHmBGpaQgEAHo6CSoCr4IWNW1NIgAvBIAbnAwTCEudIgACgRwghyYPDVGEjm5CkoqM3MLWNodcNhDmKjOcm4uQA'>Try</a></div></pre>\n<p>Generally, writing code in this way is a bit outdated, left over from\nthe days where we’d refer to libraries through a single global variable.\nWith this in mind, let’s not give <code>namespace</code> too much more thought for now.</p>\n<h2 id=\"a-look-back-on-class\" style=\"position:relative;\"><a href=\"#a-look-back-on-class\" aria-label=\"a look back on class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A look back on <code>class</code></h2>\n<p>With our new knowledge of “things that can stack on an identifier”, let’s\ntake another close look at a <code>class</code> in TypeScript</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.name?: string | undefined' >name</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.mass?: number | undefined' >mass</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.color?: string | undefined' >color</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) Fruit.name?: string | undefined' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) Fruit.color?: string | undefined' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) Fruit.mass?: number | undefined' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiBOBXAlgF2gbwFDWgOzAFsBTAfgC5oJV5k8BzHaQyCC-RQgI2PieAD2IAfHbVaDJtTCpkwaMHjEZxAEJgCBABQBKSghTpsuXEtSJ4eTPiLFKAIi4bn9gDQKhIhwE9iIYQDubsyslACMABwAzNAAvkzxsUA'>Try</a></div></pre>\n<p>and let’s apply our <code>type</code> and <code>value</code> tests to this <code>Fruit</code> identifier</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// how to test for a value</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const valueTest: typeof Fruit' >valueTest</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Fruit' >Fruit</data-lsp> </span><span style=\"color: #6E7781\">// Fruit is a value!</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const valueTest: typeof Fruit' >valueTest</data-lsp>.<data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>c</span>all</span></li><li class=''><span><span class='result-found'>c</span>aller</span></li><li class=''><span><span class='result-found'>c</span>reateBanana</span></li></ul></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// how to test for a type</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let typeTest: Fruit' >typeTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// Fruit is a type!</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let typeTest: Fruit' >typeTest</data-lsp>.<data-lsp lsp='(property) Fruit.color?: string | undefined' >color</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>c</span>olor</span></li></ul></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiBOBXAlgF2gbwFDWgOzAFsBTAfgC5oJV5k8BzHaQyCC-RQgI2PieAD2IAfHbVaDJtTCpkwaMHjEZxAEJgCBABQBKSghTpsuXEtSJ4eTPiLFKAIi4bn9gDQKhIhwE9iIYQDubsyslACMABwAzNAAvkzx8QD0KdAAtBnAiKgZaVipABYCAdCoAqXE1NAAZiLQYNAAbmAgiMRYgnhVza3EACqV6AC8cEho0KkG48gwDT1tAIRY8-2DAHSKyqhqzgT5SSaHuAB6AD5Y+9BFJWUVVbXw9aXeAA7tIMToqK+r1Ppjw0wsXqszw3gmBym6BmT2+byWcN+qA2nj4qSOJ1OQA'>Try</a></div></pre>\n<p>So it seems that <strong>classes are both a type and a value</strong>.</p>\n<p>The word completions for the letter <code>c</code> above are a clue as to what’s going on:</p>\n<ul>\n<li><em>When <code>Fruit</code> is used as a type</em>, it describes the type of an instance of Fruit</li>\n<li><em>When <code>Fruit</code> is used as a value</em>, it can both act as the constructor (e.g., <code>new Fruit()</code>) and holds the “static side” of the class (<code>createBanana()</code> in this case)</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>TypeScript internally calls this a <code>ts.Symbol</code>, not to be confused with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">JavaScript concept of the same name</a>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#stacking-multiple-things-on-an-identifier\">Stacking multiple things on an identifier</a></li>\n<li><a href=\"#how-to-tell-whats-on-an-identifier\">How to tell what’s on an identifier</a></li>\n<li><a href=\"#a-short-aside-whats-the-point-namespace\">A short aside: what’s the point <code>namespace</code>?</a></li>\n<li><a href=\"#a-look-back-on-class\">A look back on <code>class</code></a></li>\n</ul>","fields":{"slug":"/course/intermediate-v1/02-declaration-merging/"},"frontmatter":{"title":"Declaration Merging","course":"intermediate-v1","date":"June 10, 2021","description":"In order to truly understand how types and values \"stack\" on\neach other, we'll first tackle the concept of declaration merging.\nOften when people grasp how TypeScript handles this, they never look\nat the language the same way again\n"}}},"pageContext":{"slug":"/course/intermediate-v1/02-declaration-merging/","title":"Declaration Merging","course":"intermediate-v1","order":2,"previous":{"fields":{"slug":"/course/intermediate-v1/01-project-setup/"},"frontmatter":{"title":"Intro","order":1,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/03-modules/"},"frontmatter":{"title":"Modules & CJS interop","order":3,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}