{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/04-type-queries/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"3fca015e-b525-511f-9b31-31a45a4b37a6","excerpt":"Type queries allow us to obtain type information from values, which\nis an incredibly important capability — particularly when working\nwith libraries that may…","html":"<p>Type queries allow us to obtain type information from values, which\nis an incredibly important capability — particularly when working\nwith libraries that may not expose type information in a way that’s\nmost useful for you</p>\n<h2 id=\"keyof\" style=\"position:relative;\"><a href=\"#keyof\" aria-label=\"keyof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>keyof</code></h2>\n<p>The <code>keyof</code> type query allows us to obtain type representing\nall property keys on a given interface</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' style='border-bottom: solid 2px lightgrey;'>DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type DatePropertyNames = keyof Date</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAFATge0i0A5OBbCAZygF4oBrCENAM1gQgCgB6Zqd9gPQH4g'>Try</a></div></pre>\n<p>Not all keys are <code>string</code>s, so we can separate out\nthose keys that are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/symbol\"><code>symbol</code></a>s and those that are <code>string</code>s\nusing the intersection operator (<code>&#x26;</code>).</p>\n<p>If you remember your geometry, <strong>it may be useful to think of this\nas kind of like a dot product</strong>, in that when we use the intersection\noperator, we’re left only with the sub-part of the <code>keyof Date</code>\nthat also is included by <code>string</code> or <code>symbol</code>, respectively.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateStringPropertyNames = \"toString\" | \"toDateString\" | \"toTimeString\" | \"toLocaleString\" | \"toLocaleDateString\" | \"toLocaleTimeString\" | \"valueOf\" | \"getTime\" | \"getFullYear\" | \"getUTCFullYear\" | ... 33 more ... | \"getVarDate\"' style='border-bottom: solid 2px lightgrey;'>DateStringPropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>type DateStringPropertyNames = \"toString\" | \"toDateString\" | \"toTimeString\" | \"toLocaleString\" | \"toLocaleDateString\" | \"toLocaleTimeString\" | \"valueOf\" | \"getTime\" | \"getFullYear\" | \"getUTCFullYear\" | ... 33 more ... | \"getVarDate\"</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DateSymbolPropertyNames = typeof Symbol.toPrimitive' style='border-bottom: solid 2px lightgrey;'>DateSymbolPropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DatePropertyNames = keyof Date' >DatePropertyNames</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">symbol</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>type DateSymbolPropertyNames = typeof Symbol.toPrimitive</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIghsCAFATge0i0A5OBbCAZygF4oBrCENAM1gQgChHRJ7EBlYFASwDsA5qgwQsIXAWJl4iYZhz4iUAGRRC3fgMYB6bVH1QAegH4W4aDIgcQeAEZoANnNELJpdsnTzxi4qsI29g46egYmQA'>Try</a></div></pre>\n<p>Interesting! this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a> property\nis the only non-string. <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h2 id=\"typeof\" style=\"position:relative;\"><a href=\"#typeof\" aria-label=\"typeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>typeof</code></h2>\n<p>The <code>typeof</code> type query allows you to extract a type from a value. An example is shown below</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const apiResponse: [Response, string]' >apiResponse</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) PromiseConstructor.all&lt;[Promise&lt;Response>, Promise&lt;string>]>(values: [Promise&lt;Response>, Promise&lt;string>]): Promise&lt;[Response, string]> (+1 overload)' >all</data-lsp></span><span style=\"color: #24292F\">([</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetch(input: RequestInfo | URL, init?: RequestInit): Promise&lt;Response>' >fetch</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"https://example.com\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) PromiseConstructor.resolve&lt;string>(value: string): Promise&lt;string> (+2 overloads)' >resolve</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Titanium White\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  ])</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ApiResponseType = [Response, string]' style='border-bottom: solid 2px lightgrey;'>ApiResponseType</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const apiResponse: [Response, string]' >apiResponse</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type ApiResponseType = [Response, string]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/IYZwngdgxgBAZgV2gFwJYHsIwLbFRACgEoYBvAKBhikxGRmAAdUAlAUxEdrZgF4GA7nnoAFAE7psqEGwB0wADYKCAbUpV4bZFAAWBAEQ7kyRiABcAegtsAHsGyMFcmtn1EANOqrjJ0uWI50BQA3NgMAFVRkYAhUBGwYAHUdKLY3TyoAXSJydWQwRh4AQWZ2Tm5wgp5+fML0OAZSji4IGXUrDRgAPQB+cgBfIA'>Try</a></div></pre>\n<p>A common use of <code>typeof</code> is to obtain a type representing the “static site” of a class (meaning: constructor, <code>static</code> properties, and other things not present on an <em>instance</em> of the class)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.mass: number' >mass</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Fruit.color: string' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  ) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Fruit(name: string, mass: number, color: string): Fruit' >Fruit</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">108</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const MyFruit: typeof Fruit' style='border-bottom: solid 2px lightgrey;'>MyFruit</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Fruit' >Fruit</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const MyFruit: typeof Fruit</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const banana: Fruit' style='border-bottom: solid 2px lightgrey;'>banana</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='class Fruit' >Fruit</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Fruit.createBanana(): Fruit' >createBanana</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const banana: Fruit</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiBOBXAlgF2gbwFDWsA9gHYSpLCr7wAUOu0ADogEYjLDTwCmYAJkSAE9ohMAFtOALmgl4yQgHMANLVyMWbDtz6FB0UZAhTCiUU07xldBs1bsuvfkIIhKUmXPm0AlJgC+WWhIwVA1ge1ROACEwEREqH2wrLlREeEJhTgB3OCQ0KgAiJhji-MVoAEYABgAOMvyBThAXTPyvWn9-LAJidABZAQQUdABeHKGsAHoJq2gAPQB+LqISaCLYsGhRwbQAOjDuCOj1+MnpqwWgA'>Try</a></div></pre>\n<p><code>MyFruit</code>, the class (constructor) is of type <code>typeof Fruit</code>, where instances are of type <code>Fruit</code></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>If you’re curious about this property, try running the following in your terminal <code>node -e \"console.log(new Date()[Symbol.toPrimitive]('string'))\"</code></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#keyof\"><code>keyof</code></a></li>\n<li><a href=\"#typeof\"><code>typeof</code></a></li>\n</ul>","fields":{"slug":"/course/intermediate-v1/04-type-queries/"},"frontmatter":{"title":"Type Queries","course":"intermediate-v1","date":"June 10, 2021","description":"Type queries allow us to obtain type information from values.\nAs we work toward building our own \"standard library\" of\nutility types, we'll need this important tool in our toolbox\n"}}},"pageContext":{"slug":"/course/intermediate-v1/04-type-queries/","title":"Type Queries","course":"intermediate-v1","order":4,"previous":{"fields":{"slug":"/course/intermediate-v1/03-modules/"},"frontmatter":{"title":"Modules & CJS interop","order":3,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/05-conditional-types/"},"frontmatter":{"title":"Conditional Types","order":5,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}