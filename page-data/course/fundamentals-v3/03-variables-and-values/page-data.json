{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v3/03-variables-and-values/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"c2a483de-9212-534a-900b-6130f46f9c20","excerpt":"Now that we have compiled a simple TypeScript program, let’s look at\nthe basics of the programming language. Variable Declarations & Inference In JavaScript we…","html":"<p>Now that we have compiled a simple TypeScript program, let’s look at\nthe basics of the programming language.</p>\n<h2 id=\"variable-declarations--inference\" style=\"position:relative;\"><a href=\"#variable-declarations--inference\" aria-label=\"variable declarations  inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Declarations &#x26; Inference</h2>\n<p>In JavaScript we declare variables all the time with <code>let</code> and <code>const</code> like this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let age: number' style='border-bottom: solid 2px lightgrey;'>age</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let age: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAhg5iEF4IDYBQB6dFsD0D8QA'>Try</a></div></pre>\n<p>As we can see, TypeScript is able to <a href=\"https://www.typescriptlang.org/docs/handbook/type-inference.html\">infer</a> that <code>age</code> is a number, based on the\nfact that we’re initializing it with a value <em>as we are declaring it</em>.</p>\n<p>If we try to give <code>age</code> a value that is <em>incompatible</em> with <code>number</code>, we get an error</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let age: number' >age</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let age: number' >age</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"not a number\"</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAQwHNJQBeUANh3MpoCIA7OYk0VgVwFsARjGZA'>Try</a></div></pre>\n<p><strong>In TypeScript, variables are “born” with their types.</strong> Although\nthere are ways of making them more specific in certain branches of code,\nthere’s no (safe) way of changing <code>age</code>’s type from <code>number</code> to <code>string</code>.</p>\n<p>Let’s try the same thing with <code>const</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const age: 6' style='border-bottom: solid 2px lightgrey;'>age</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const age: 6</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhgcwKYwLwwGwCgD0OYEEB6A-EA'>Try</a></div></pre>\n<p>Notice that the type of this variable is not <code>number</code>, it’s <code>6</code>. <strong>TS is able to make\na more specific assumption here</strong>, because:</p>\n<ul>\n<li><code>const</code> variable declarations cannot be reassigned</li>\n<li>the initial value assigned to <code>age</code> is a number, which is an <strong>immutable value type</strong></li>\n</ul>\n<p>Therefore, <code>age</code> will always be <code>6</code> in this program.</p>\n<h3 id=\"literal-types\" style=\"position:relative;\"><a href=\"#literal-types\" aria-label=\"literal types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal Types</h3>\n<p>The type <code>6</code> is called a <strong>literal type</strong>. If our <code>let</code> declaration is a variable\nthat can hold any <code>number</code>, the <code>const</code> declaration is one that can hold only <code>6</code> —\na specific number.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAARUUlEQVR4XuWbeXBb13n2n3PvxUZwhQhSpEQtlCxTErXYlCzJSy1n4rV2GqeVJ3+4mS6TtslMm3/aSdpJG2fSTuup55v2yzTxmsR13CRWaymRKyeyLNFarJWiuIEUN3EBCBIAsS93f3sInhgcs+4kk4Qik1fz07kXuATwPO/7nnPBe8mICL/JoeBXGIwHAJw+fVCuq/NLZRGvZK6doVQqYmcyFRSN+snvj7K5EQC2b4fsdGYZAMwdMzrabAcCh+mZZ0D0K8qU9CsRLuLq1TZlaOhR58GKDNvWB6vWZ1UWblit0Uue3yv0mF/wTIT+Onq+8DdlU+G/LJue/pNUZ+w+b8azWlEKrI2L3+uPOg4dOqRwA1jJ0OVeASLjm11+x9qqrI18rdI1bt91/uzIp2Z+UHhYluyNZS5J8bqdcLtkMElCalKDqlvoLRg4fjScqPa63m/Zbf5oX2vdsQ2E2T978vc9gcNPGdwIEwDhlxi/1DmgmPUX2pTGtkZHw1vH1MF7H2l789Wpv83m1CfW15Vj664GNDZvQFXdBjjL/XC4vGBMgW3r0HOzSEcnEB0bxthgGEOjCagmG9l/n+/Ztodqvp+UDR1DwOuX3zZKLbFcDBDi+9445Nh2AHIQwLXvhz537kzk2dbmGmXPvbehacculK/ZB+ZpBmTvfPGRBIBETm2OBqhhqNEOTPdfwsCVQVztm4EsKyf/4M83/0WDmhgaA5RX32vXSyYsEwMOH251HmpuVjLeGs9Lz3X/SzpdePrj929C62/tpupNexk8mwFWB7I8C0QTh6EUDExSAJYC6T3I37yIsesBvH9uGOPhTPTpP1r/yZaNVVeDKcivnDislUy4xQZ89asPKH/8kN/h9lUo33m242XLMJ565OGtaLlnD1xNO0CsEYAfoPIPhIJJpW0xgkhsGgDinCDM2QGEr1+3L5/qka4NRNNPf27jg9uaKq+/PZ5ljz32tv6LGqD84uKZ9HjbE861Jw6rLxf2/p1e0J964olt2LJvF1zrWkF2PQhVYKwGkEhkXeLIKAXjEMBImOACUTVAJhSfF013+yRXmdM26Grlf74y8YM//fLmj+2oLp9+gc83AIxbY4AQvw3bFTRMGWc3HvzU+LHwlz7xcAtuu7OFnGtbmE31AKsEY1VCtBArKqBkBhZkn0RneADUgOAAPArq7iTpPk2jzOErG159buyFzz7TcmhH0InDTzH70BtkLbkBjMcbh8D8j/mlesW/6ps/7H1u3856bNqxnhxrNjLIqwFUg7FV82KYPN/jJROEYLZgKiCQqARGCsDKQTYDyAJca7G6tZXdM53Ekbe6Hrz045lPZ/xrX56+71EFgLXkJ0LEA9u3y9gA89TRyc/WeOX123esQ8X6NYx56gEunDEfwMoAyGDiH5jMkUoUHxPwfYYi8/tw8ME7XwlUDblmDda1NqOttREXT0W/tGedVrujosDmKnHJDSi+6TagQa9oCnQlPr9zax3qm+tJrqoHwQegSmQenJJwkeoFMIGIkhFi2wFWNNEHkvzwNK1By84mlLmlDX3nZp+MetuNuTZkPJbUAOCgFAj0mYP98Y+5nfCv3+QnV30tI4dvvueZV5S9EFMSKkbBRxnxQcVAvI4XoCpIZT7UNtWhZfMqBK6nPu3HQU8OfmnJ54CGhgxDR5s8OJl/cF1tBarrqiCV1xT7lqECgFOUPhZkfvHavxhWGhYsjaxYQWUglMG1yod1G2rR1R/dQ3ljvRfJIfF9gZasAmpqVLbpnurKXFrf3dBQAW9NJZizDCAPAA5Ks/wigT97iCrgQALICWLl3OhK+LjhZS7ZW0hhewB99rY+LFELiP4/edJN6WyuLmvoq2tWeSGXexlJDoA4KPZ76cMvCvqZpC/cBhPACcnpRkWNF75yF6amCpsBIPHxNonxWLIKaGzsIM1kNRJDlbfcDdnlBJM4TPlgyeMsFkM/XxWU2kesCpBBigOK2wlPuQPhsNrg822Wa8IqIx5LZkBfH0hXbRcDg8MhgzkcAMkAJAFbnHQtARgzAHEwJE53uzhjnKx4nBYUCPuIqpEgyTKcsgSLqKyiYi1LNLhpSVeB7dvB0gWLTCIwxooAgv+tzHPdsAd+F5h5Hkh+EcAwZ5xTPy8eZwDtK6AbnwFFj/4feSJIEgOJt9I0y67PeEjrTUlLZgCfcel+HISRN/KaZmumbsE2LAD2PGQt6mVSJ2FHToPiXYDTEqKaOH7ONs67gGLCGv8uKH5kgV4Sr8s4Fof4YMG2TGQKBiQZqcvxCYqvchHjsWTL4CBfBrUBO8bFz2azhUbSdQAmQBxmLW7lqocgb/wyoEUAec98ubPjAFaLVnAC5gOQG22wNV/50GpJQrwKBgOACUvVkExqKPPJwYmp+fJfsjmAeDRpdVLPYCrBnNLkxGQCZj5HsA2AaQCpopUJIHveFFkGa/w8N6IN0PYAhSoAn+I8xNnJeRjI+sAaPgN41wsTbY5wgkyOCsY0kKmikMkhmdag2xhqdaWkxsGOpZsDGI/J3oh9Y3pCc1fIlwZHE9AyWQYrD1ABgCYyJoLMeavdDYBDmfc9MwPYHhQjPcQpB7QJoHy7OIVgHBsEGyDi6Jw8yM7BLmQxOhLj4q2JYEwdNhW/9Ex70S0sWQWE+TLY3LyWUEbnookCxoamwdMChhyIsgAZgG2ByC75zAfbsRFkRkF2JaAFAdsG5eNFjbbsApx+kfWicIFVFA9kQXYBRiKOQF8ESoX03rmu2KxiRm0AS1cBYiK0H9u+mS70JHocHvnC5atB5KajsJECkBIf2OToJTEA4FwLS+fHKdWwtRmANFi2A7aZB0mrAAZR7hYIptjWOAkAGVAhjd6rNzEdySEtmW+vq1CMXq3KviXXBfSGjKXnCylWzb43OZlEx4VBUD4JhjTIVuezbxsgsjgmCAaY2w/L1EFSGSwjBehxEPOCzDTgXAMCzR9LlhBvgmwdhDSI0pgZHUdv5yQUl3X6nfORrnv3NVovvthhEY+l/n2AffJkh928zqcdPx89Sw6c6ro2huGOGyB7FqBZId4U/cuxOJILBBlM9iIT+AdETj8AW0sCsMHctSLb4mfIANkWYKcAJJBPRNB5fgCJaAZxMl6RYaWnTLd2y64MHT4Me/UWd04jykRM9f9FZ7LZjnMDmBkaBlgQBBVkiwxyQKb4nu8G2QTFdz88G/8QrGwddDUHMKcwTQfxsZh50kAIwzRn0PnedYzfCEN3m9/4QXuwu+l2f24u+wBo6Q0QfP3rw8Z6X3nySHv4JpXbz4zeiOBaew/U9BgYpuZncjKKGSUOmF3MvmWrKKvbD2/9/VBctcV2kaQ5A7SSCWQDSHKCGLoawEjnGPKGeuZ4R+TV2ooqdW9uIiOq8dYYIN6YrLJQakODW//eu6F3mMd4qb9rAt3nOkHWCBipgG0vyKgBkzlg6Cps5oRFBuy558kBkiTYxZ4vriAcE6BxJEKjCJzvQ3QmMdE1nfr7eFrVXJXWDF/6RPZv8cXR9nbYrlQ6JDFmH70y9XzO0N7tOT+EyEg3SAqKNd3gaPMZhgMgC8zhA0wdhp6HzeR5LaJVQARGs7DUUfS/343J0YgeNPNfbL82O23LFLl0KZ4V1zVupQGlKrgQhFrG5FAmY1oDs5l/jCfzscCFPpiFXjBkAZKLlQBTBZMcsAwL2mwPCrEu5DNTIOYU673NIRBs2PYYwgM3MNQdQsahP/f6kcmuareSLyvLxyAm4mVxeVyYgJ6JVMpT6Y6deH86nHOq/zzQO4NQfx9IGhS6JI4OCRJiY5eRiw0Uqzw12QnLMMAYA5HNkcFoBkZmGIEro4jnC53HL0aOrF7tZFkzFeroKJX+LTZgsQn7lNnIxkaP9uZ74RORTL4zcHkcRnoAkhwXv+a2YZEJd3kNyv2tYN71qFq9FUzxgmwbjGQANsgcQSwYxMBAFHEj/82J8XTelN2TY2PQhefLywABvdgBs3GjNxyZLORMh/56oDuGeGgKEgsBTALZCiQ+Vtc2I5MtIJdJwzJ0eMsqMC9JAUMaei6Mwc4gIqn8hePnp6/u2FqZ3Lkzll9o9rIzQGQFbveUdkdrdWo4VLg2m1Ejo71TMLUISbIMYgyKNH+Wp2s6mOyCoWvF8mdQAL7P2CzSsxEM9scgecyfxDOF9KN33ZaYO+8o9f2yM6BkwtwHvfuhtdnukXiovFrunRhNIpeaZZKigIHATB2mztF0KA4nyJZAROI6ggNEMSRn4kjnjEIsp3Xt2VKbHMjpJgC2Eu4REqgmgFmDjEE1ZxXF2cwLSJK4WMRHSQYjBlPX4PA4QHPZdzoBIuQyBiyboomUNXb3I6vURKJDZH+FGDA15abVaianWlY4liggn9WIIEFXdWQyaeSyeeQKGrK5AlLpPNSsCkO3YRgm9IyKqYk0Ulk1Izv0WXkqbvOqohVzmxzxeIAxagc0szOe8khRpJ//ib3pjlrZKMyQOjvBdM1AXs3DW1FFmUSMrRlNE9wDYNCRDp2ki2evSZNRQ1PThUyqL2kDK8UAQbsYZzV3587bbyuo+ipnaKRbBRFcjnLZVeGRUEaQFAmy7kYqoSKv9RggC+mUmzy+Vg/SwXPXx7ozxnbIK/FGSZqLtrbWqT0H7sMnn/wdefNtO2TYGoUmR1Ao5JnicMDj9qCy2g+Pt+aDlkwm4+zYsR8ic+S/ZnGlm/r6YK2oGyUFNgehUNB+8aVvu771rW8jn8/g6rVO9sp3XmP/+v+/ga9/4wW88uqrOHXmDMaDQYhZnr1zuh0vvPgyLl687C79fgxYUQaIjMGyUoVkqiBlsjayOROZOfIykgUJqayEeEbhI0NBtaDbgGYBmYyGgkYwddMuZX6ltYAgFkPkjjvX9W/ZsmXr5OQEyLaw/8B+Ls6ATQCBwelwYHhkBOPjk/B6PEgmU9A0TSWL3i2ZuWIqYDH5XDJ5rfMaerp7MBOJIRgKIdA/gJ5AP8YnQjAMAzXV1WhsbEA2n8f42E3U1lSdiiWTXRCxog3QdeufyisqsHnLZjzwwEHs37sXd+7ZgwP79+HAgbuwfXsL1jatx+qGBrS17cLjn3gSTo/3sdra+ntWvAFEZPn9vq/duXsXFEVGoLeXV0EEmVQK0WgEI6Mj6O+fI4D+QC+uXLqMo28exsTYzROx2Mw7vxYVEAwGX/7u6/+B6109UJxOhKdnMHhjAJOTQRRUHb6aKjRv2oTtra3YsnUb9uw7gLr6ugMNDQ0bV/AfTJSoq6vzPf7bj+ETjz4K3bbg8/mQz98Bm0jcHwwkZhNIJeKwLAMTN29iKhjU4/G4+WthQHBq6tF/f+019N8Ywu5duwHGoGo6XC4XN2MV7/16+Gt9qCz3oqOrD1cuX5wz4nVVVYd+LVogFok8pOt6+ObNEcgKQ31dHabCU7h48SJOn25H++kzuHS1CydPn8Xxt47z54IwDKOfMeZc8QYIlGwm94VUMlkUeL2rC3V+P3bs2IHbb2+Bx+PB8OAgTp54BwP9vShksz8KhULvALBXrAGMB0rhnZi42RXo6304EOgdPsJn+WNHj+Dt/z6Gn7x9DGfPnMLpd3+Max0XMDpy42sDA4G/ApAiIvMjXm8Z/snMYuGSQOE4OS2cPOdezr85HA7GyxyyLKG21o9UKglV1Y4B+AqnmhPmRDkqx+RYC78XEI/lPAkuFO7mVItxF0fmvMENeJBPghWyLNumaXKsAQDvC4OyQjQ4SY76obsu7BXxdViI0IQIg5PiNHGi+Xz+xwC8HEk8lxOiIyLzOYEmHifBMm2BxW3AhDiIrEtCQDmnYYFJMkQIwdMctrDkBcTDZDyIx7I2QJggxEMSItmCsVzAUApNVIgthFsfMoEWXg5bKS2ABYIksS0JoWmxDYEQKVi8T8t9FVjMz7+EsY8SSkTL0YCVj4Tf8PgfdJil2ie6r6IAAAAASUVORK5CYII=\" title=\"emoji-bulb\"> Theme: Inferring with safe specificity</div><div class=\"custom-block-body\"><p>There’s a common idea you’ll see again and again when working with TypeScript.\n<strong>Inference is not so specific as to get in the way of common behavior</strong>.\n<br />\n<br />\nFor example, the <code>let</code> variable declaration above could have assumed <code>age</code> to\nbe of type <code>6</code>, but this would have interfered with our ability to set this\nre-assignable variable to <code>7</code> or <code>8</code>.</p></div></div>\n<h2 id=\"implicit-any-and-type-annotations\" style=\"position:relative;\"><a href=\"#implicit-any-and-type-annotations\" aria-label=\"implicit any and type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implicit <code>any</code> and type annotations</h2>\n<p>Sometimes, we need to declare a variable before it gets initialized, like <code>endTime</code> below:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// between 500 and 1000</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let startTime: Date' >startTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let endTime: any' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: any' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: any' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">}, </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMBYBQJQAjSAFwHdJIA7UDABjtAEMqATUARgbtwGM4qiEqABKAQQByAEQDyAWQD6AdTEBJACoL1quQFFQAXlyhQcpiQAWAOngBXNgAozlmy1ZwAtg4CUoAFS0DL4A1IE8uAA2pKBCTNAk6gCWHpCGoFSQZKBS5pA+kdHUrEkp+GAmoAB6APy4uIikJZBwtiQOPoYAfKAA3sagRU1pPCaDyakG6ZnZufkAvgA0opKyiioaWjq63kA'>Try</a></div></pre>\n<p><code>endTime</code> is “born” without a type, so it ends up being an implicit <code>any</code>.</p>\n<p>TypeScript doesn’t have enough information around the declaration site to infer\nwhat <code>endTime</code> should be, so it gets <strong>the most flexible type: <code>any</code></strong>.</p>\n<p>Think of <code>any</code> as “the normal way JS variables work”, in that you could assign\n<code>endTime</code> to a <code>number</code>, then later a <code>function</code>, then a <code>string</code>.</p>\n<p>If we wanted more safety here, we could add a <strong>type annotation</strong>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// between 500 and 1000</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">500</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let startTime: Date' >startTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let endTime: Date' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: Date</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0550AE\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-err><data-lsp lsp='let endTime: Date' >endTime</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'Date'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'Date'.</span><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let endTime: Date' >endTime</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">}, </span><span style=\"color: #0550AE\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAlAEaQAuA7pJAHagCsADHaAIaUAmoAjA3TgMZyVExUACUAggDkAIgHkAsgH0A6mICSAFQXrVcgKKgAvDlCg5TYgAsAdPACubABRnLNlqzgBbBwEpQAKloGXwBqQJ4cABsSUCEmaGJ1AEsPSENQSkhSUClzSB9I6KpWJJTUHOJIPDATUAA9AH4cHEQSEsg4W2IHH0MAPlAAb2NQIra0nhNR5NSDdMzs3PyAXwAaUUlZRRUNLR1dbyA'>Try</a></div></pre>\n<p>Now, TypeScript will correctly alert us when we try to flip flop between the number <code>0</code> and\na <code>Date</code>.</p>\n<h2 id=\"function-arguments-and-return-values\" style=\"position:relative;\"><a href=\"#function-arguments-and-return-values\" aria-label=\"function arguments and return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function arguments and return values</h2>\n<p>The <code>: foo</code> syntax we’ve just seen for variable type annotations can also be used\nto describe function arguments and return values. In this example it’s not clear,\neven from the implementation of the function, whether <code>add</code> should accept numbers or strings.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: any' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: any' >b</data-lsp> </span><span style=\"color: #6E7781\">// strings? numbers? a mix?</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjQIUJSyzUkAOaUA-KEgN4w6rNOdQ8VAA8TtAL5A'>Try</a></div></pre>\n<p>Here’s what your in-editor tooltip would look like if you were using this function:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: any, b: any): any</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>const result: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjaAX1ogwAWkPoGWQ-trp2lLHOqUGyGwF5OPXgGYhAIgAsX0bpgMsEhIQB6APy08vaOgaCRQA'>Try</a></div></pre>\n<p>Without type annotations, “anything goes” for the arguments passed into <code>add</code>. Why is this a problem?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const p: Promise&lt;unknown>' >p</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&lt;unknown>' >Promise</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp>)</span></div><div class='meta-line'><span class='popover-prefix'>                        </span><span class='popover'><div class='arrow'></div>const result: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQjaAX1ogwAWkPoGWQ-trp2lLHOqUGyGwF5OPXgGYhAIgAsX0RZWNoigLpDUAO6gAAqy0PCoNLzy9o4BIDKZWdk5oAB6APxAA'>Try</a></div></pre>\n<p>If you’ve ever created a <code>Promise</code> using the promise constructor, you may see\nthat we are using a <code>string</code> where we <em>should</em> use a two-argument function. This\nis the kind of thing we’d hope that TypeScript could catch for us.</p>\n<p>Without type annotations, “anything goes” for the arguments passed into <code>add</code>. Why is this a problem?</p>\n<p>Let’s add some type annotations to our function’s arguments:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\"><data-err>&quot;4&quot;</data-err></span><span style=\"color: #24292F\">)</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGoheAL54ytRBXmRERADZGAvA2YsMggERYH4oA'>Try</a></div></pre>\n<p>Great, now we can enforce that only values of type <code>number</code> are passed into the function,\nand TS can now determine the return type automatically:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: number, b: number): number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGoheAL54ytRBXmRERADZGAvA2YsMgrOLwg5rt+4B6AfiA'>Try</a></div></pre>\n<p>If we wanted to specifically state a return type, we could do so using the <code>:foo</code> syntax in one more place</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-err>number</data-err></span><span style=\"color: #24292F\"> {}</span></div><span class=\"error\"><span>A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.</span><span class=\"code\">2355</span></span><span class=\"error-behind\">A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsWBQAzAVwDsBjAFwEs5jQBDAEwYAo7VjCBbAIxgBpQ3dl17QAlMJ4xQAbwC+QA'>Try</a></div></pre>\n<p>This is a great way for code authors to state their intentions up-front. TypeScript will make sure\nthat we live up to this intention, and errors will be surfaced <em>at the location of the function declaration</em>\ninstead of <em>where we use the value returned by the function</em>.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#variable-declarations--inference\">Variable Declarations &#x26; Inference</a></p>\n<ul>\n<li><a href=\"#literal-types\">Literal Types</a></li>\n</ul>\n</li>\n<li><a href=\"#implicit-any-and-type-annotations\">Implicit <code>any</code> and type annotations</a></li>\n<li><a href=\"#function-arguments-and-return-values\">Function arguments and return values</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","course":"fundamentals-v3","date":"June 08, 2021","description":"We will begin our study of the TypeScript language with simple variables\nand functions.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/03-variables-and-values/","title":"Variables and Values","course":"fundamentals-v3","order":3,"previous":{"fields":{"slug":"/course/fundamentals-v3/02-hello-typescript/"},"frontmatter":{"title":"Hello TypeScript","order":2,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/04-objects-arrays-and-tuples/"},"frontmatter":{"title":"Objects, Arrays and Tuples","order":4,"course":"fundamentals-v3","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}