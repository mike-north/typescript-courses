{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v3/12-type-guards/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"ddd5e7d4-9d99-538f-ad92-222e881d75cb","excerpt":"We’ve explored built-in type guards like typeof and instanceof,\nbut there’s a lot more power in type guards, including the ability\nto define your own! Built-in…","html":"<p>We’ve explored built-in type guards like <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#typeof-type-guards\">typeof</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#instanceof-narrowing\">instanceof</a>,\nbut there’s a lot more power in type guards, including the ability\nto define your own!</p>\n<h2 id=\"built-in-type-guards\" style=\"position:relative;\"><a href=\"#built-in-type-guards\" aria-label=\"built in type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in type guards</h2>\n<p>There are a bunch of type guards that are included with TypeScript. Below is an\nillustrative example of a wide variety of them:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: Date | [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp></span><span style=\"color: #CF222E\">:</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"pineapple\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> [number]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) dateRange: [Date, Date]' >dateRange</data-lsp></span><span style=\"color: #24292F\">: [</span><span style=\"color: #0550AE\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\">] }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// instanceof</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let value: Date | [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: Date' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: Date</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// typeof</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | \"pineapple\" | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: \"pineapple\"' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: \"pineapple\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Specific value check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | null | undefined' >value</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: null' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: null</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Truthy/falsy check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;} | undefined' >value</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: undefined' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: undefined</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Some built-in functions</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ArrayConstructor.isArray(arg: any): arg is any[]' >isArray</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let value: [number] | {&#10;    dateRange: [Date, Date];&#10;}' >value</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: [number]' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: [number]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// Property presence check</span></div><div class='line'><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0A3069\">\"dateRange\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let value: {&#10;    dateRange: [Date, Date];&#10;}' >value</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: {&#10;    dateRange: [Date, Date];&#10;}' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: {\n    dateRange: [Date, Date];\n}</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let value: never' style='border-bottom: solid 2px lightgrey;'>value</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let value: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAbghsCuIBcAoCEA+EAiMwjUwgDt5hhCt5iATEAMwEtiQbKIAiAB2ZBi66gO7ANqkAtgCMQAJwC67AN4QaeEACUYxAObIII3PgA0ONXIgBfFCgD0NiMwDOYLQGMQAe3opG9CAApYBBAHYmc3Tz9DEABKCEVCIMRCOwgAPQB+FCtUsABPLkiUEGBHEN8A-MKvaDhECABeJs5nGWZtDjiE9CSCdFTM7Nt7AGVC119GV1rgiFcACxBXAGti0vK-QLqQpoaSMmAuxO2U+0Gc+wAVGXgwebybejhHPLnFlbWyh02AQl6jnonfpnLIXCAjDziEKSeCMYBgAC0zAg9GorjAjA8YU+GwCAEEZDIYHkAHSMRwEol5LbBGIAmbJYHpUHDCAABRkHkKMnyEC4MhAZWI7jeS1WJS+FX8HFU+E0OhAHFCDNi8WOwVOzOyEAlIW6Ks15yAA'>Try</a></div></pre>\n<h2 id=\"user-defined-type-guards\" style=\"position:relative;\"><a href=\"#user-defined-type-guards\" aria-label=\"user defined type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User-defined type guards</h2>\n<p>If we lived in a world where we only had the type guards we’ve seen so far,\nwe’d quickly run into problems as our use of built-in type guards become more complex.</p>\n<p>For example, how would we validate objects that are type-equivalent with our <code>CarLike</code> interface below?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: {}' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown>' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown>' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown> &amp; Record&lt;\"model\", unknown>' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown> &amp; Record&lt;\"model\", unknown>' >maybeCar</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown> &amp; Record&lt;\"model\", unknown> &amp; Record&lt;\"year\", unknown>' >maybeCar</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: object &amp; Record&lt;\"make\", unknown> &amp; Record&lt;\"model\", unknown> &amp; Record&lt;\"year\", unknown>' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: object & Record&lt;\"make\", unknown&gt; & Record&lt;\"model\", unknown&gt; & Record&lt;\"year\", unknown&gt;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFCqRbUBO561oAwmcwDKoBrDgG9aoUPDJDilLMwYBzMROgATashlzFy-NR7FIAV3gAjFrQC+tWsmpYJZfOe7NiRyAJgB3SDZCgWAAWHApGPKr0JKAAFMqSztSuoABkKcpY+IjU0NEJLjygALwloABE0KYAVtToWGWp6eJlkkINDI6JyWkZWTl5TgXMANotUtRlALrFpWWy8pAKDT3N8Goa7ZCdQ4292bnbSTyja+rIUzNF5fOKy03lejybh933mfsDXcdlj8wXJVcysYzCwyrQAJSgUTifJHZjKAIAPQA-FYgA'>Try</a></div></pre>\n<p>Validating this type <em>might</em> be possible, but it would almost certainly involve casting.</p>\n<p>Even if this did work, it is getting messy enough that we’d want to refactor it out into a function or something, so that it could be reused across our codebase.</p>\n<p>Let’s see what happens when we try to do this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): any' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): any' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: unknown' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: unknown</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFCqRbUBO561oAwmcwDKoBrDgG9aoUPDJDilLMwYBzMROgATashlzFy-NR7FIAV3gAjFrQC+tWsmpYJZfOe7NiRyAJgB3SDZCgWAAWHApGPKq0JB7oWKjQkKColK78QgAUAG4URtQAKtB51LLEZAQAlKCi4sz2RsyJ6cri2ci5BUWyoABk3c2B+IjU0CSgre2FxQ4AvLOgAETQpgBW1LHzPX3i4vOSQhsMYzn5k129-ViDw6PjJ51YANq7UtTzALqgs9MLsvKQChtztsFvA1BoDolbh0ppsLlcRkc2ncpk9QepkO9PnN5r9FICttt5noeBDERN7rDgZchgioadHkT9MxMV8FsYzCx5spylZ-GAjJRFIEQqAwhF6KN0slUoJqOlJM5qK5ypVqo5Fa5lAEAHoAfisQA'>Try</a></div></pre>\n<p>As you can see, the broken/imperfect narrowing effect of this conditional has disappeared.</p>\n<blockquote>\n<p>As things stand right now, TypeScript seems to have no idea that\nthe return value of <code>isCarLike</code> has anything to do with the type of <code>valueToTest</code></p>\n</blockquote>\n<h3 id=\"value-is-foo\" style=\"position:relative;\"><a href=\"#value-is-foo\" aria-label=\"value is foo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>value is Foo</code></h3>\n<p>The first kind of user-defined type guard we will review is an <code>is</code> type guard. It is perfectly suited for our example above\nbecause it’s meant to work in cooperation with a control flow statement of some sort, to indicate that different branches\nof the “flow” will be taken based on an evaluation of <code>valueToTest</code>’s type. <strong>Pay very close attention to <code>isCarLike</code>’s return type</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): valueToTest is CarLike' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isCarLike(valueToTest: any): valueToTest is CarLike' >isCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let maybeCar: CarLike' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let maybeCar: CarLike</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJygGWAaxQbwChlkBbOPALmQGcwpQBzYsgewBMIAbauhkZiQCeEDNRABXUgCNohAL6FCXCGDJwhs9FGoSQOEKwDuIJQHozyMAAsUjCRnaEYehGGCsQyYDW3Y8ABQsAG5wXBIQACqskRB01HAgQoQAlNSh4VExcWo+aBj+BCxQqhJQXkEkJBkR0bF0yABkjSwkYEIADhCsMMg1WfVqALwjyABErNIAVhBuY00tVePkePOgfWG12Q3NrVad3b39dTkA2mMrEGMAusgjQ+N8TPO7Sxcc3Gtex9tqr1XtLo9DaZE50c6kD5cG53UZjJ4CF6LKpjEQYL4graDBZ7QGHTEDM6o0RQGH3caSGTQMYsFIKcyWCQ0JhWWzIeyOQjAXoBHx+XAQALkTQQbQpFLIIgkYVaDAsCzIAB6AH4FEA'>Try</a></div></pre>\n<h3 id=\"asserts-value-is-foo\" style=\"position:relative;\"><a href=\"#asserts-value-is-foo\" aria-label=\"asserts value is foo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>asserts value is Foo</code></h3>\n<p>There is another approach we could take that eliminates the need for a conditional. <strong>Pay very close attention to <code>assertsIsCarLike</code>’s return type</strong>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) CarLike.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// the guard</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function assertsIsCarLike(valueToTest: any): asserts valueToTest is CarLike' >assertsIsCarLike</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">asserts</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface CarLike' >CarLike</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">      <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"object\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"make\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"model\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp> </span><span style=\"color: #CF222E\">&&</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp>[</span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span></div><div class='line'><span style=\"color: #24292F\">    )</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">`Value does not appear to be a CarLike${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) valueToTest: any' >valueToTest</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">    )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// using the guard</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let maybeCar: unknown' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let maybeCar: unknown</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function assertsIsCarLike(valueToTest: any): asserts valueToTest is CarLike' >assertsIsCarLike</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let maybeCar: unknown' >maybeCar</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let maybeCar: CarLike' style='border-bottom: solid 2px lightgrey;'>maybeCar</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let maybeCar: CarLike</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJygGWAaxQbwChlkBbOPALmQGcwpQBzYsgewBMIAbauhkZiQCeEDNRABXUgCNohAL6FCXCGDJwhs9FGoSQOEKwDuIJQHozyMAAsUjCRnaEYehGGCsQyODRrQwNACSNNrYeAAULABucFwSEAAqrAkQdNRwIEKEAJTpvv40yDFxicmpasCFobgELMAwyJEkJACETc0kxfFJKXTIAGT9LB1gQgAOEKwNXaW9agC8i8gARKzSAFYQbssDQx0ky+R4O6BFsd1lfYPDzaMTU2clPeUA2ocUEMsAusiL8yt8Jg7a77FakDjcE5eGbPK57fZ3SbTc6zV6HCFcb6-JbLQECYHwjrLEQYKGPC5zXY3EiIh4wy5gN4kqBYv4rSQyaDLG7ZFi8kbWKDGZAgCBGZAAUSgQqg7Q6AAMAGoo5DsVipEWsNRwMYTDBWVjIWTeNAYMIQAAk+Hpc3k8p5CnMlgkNCYVlsyHsjkI5E0EG0hAsyAAegB+Qg+PxQALBaoRX1aDC8hP+jCByxhoA'>Try</a></div></pre>\n<p>Conceptually, what’s going on behind the scenes is very similar. By using this special\nsyntax to describe the return type, we are informing TypeScript that <strong>if <code>assertsIsCarLike</code> throws an error,\nit should be taken as an indication that the <code>valueToTest</code> is NOT type-equivalent to <code>CarLike</code></strong>.</p>\n<p>Therefore, if we get past the assertion and keep executing code on the next line,\nthe type changes from <code>unknown</code> to <code>CarLike</code>.</p>\n<h3 id=\"writing-high-quality-guards\" style=\"position:relative;\"><a href=\"#writing-high-quality-guards\" aria-label=\"writing high quality guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing high-quality guards</h3>\n<p>Type guards can be thought of as part of the “glue” that connects compile-time\ntype-checking with the execution of your program at runtime. It’s of great\nimportance that these are designed well, as TypeScript will take you at your word\nwhen you make a claim about what the return value (or throw/no-throw behavior) indicates.</p>\n<p>Let’s look at a <strong>bad example</strong> of a type guard:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">is</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) val: any' >val</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const empty: \"\"' >empty</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const zero: 0' >zero</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const zero: 0' >zero</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const zero: never' style='border-bottom: solid 2px lightgrey;'>zero</data-lsp>) </span><span style=\"color: #6E7781\">// is it really impossible to get here?</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>const zero: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function isNull(val: any): val is null' >isNull</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const empty: \"\"' >empty</data-lsp>)) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const empty: never' style='border-bottom: solid 2px lightgrey;'>empty</data-lsp>) </span><span style=\"color: #6E7781\">// is it really impossible to get here?</span></div><div class='meta-line'><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>const empty: never</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAzgORAG0wCgG4CGmAXIgWAJ4CUphmyKiYW9A3gFCKIBOAplCG5IAhHXYBfduwgIUURLwC2ABygVEAXkQAibdNnyAXr25xNiAAzsYwRDlQZsOY6apVEHLjLAo4mXgB0mHAA5s4mcO4A9FEMyPJ8RJjqMCpwKCgwAEb+iFBmIfyIABYmvAD8nIgxXLV1iAB6lZI2dg4sOEqq1O6eiN6+-kGhnSpq0bGo8Ty8SSlpGdm5+YiF8qV8lVw19fVNEkA'>Try</a></div></pre>\n<p>Click <code>Try</code> on this snippet and run this in the TypeScript playground. We see both <code>0</code> and <code>\"\"</code> logged to the console.</p>\n<p>Common mistakes like forgetting about the possibilities of strings and numbers being falsy\ncan create false confidence in the correctness of your code. <strong>“Untruths” in your type guards\nwill propagate quickly through your codebase and cause problems that are quite difficult to solve</strong>.</p>\n<p>In cases where the rest of your code relies on a particular value being of a certain type,\nmake sure to <code>throw</code> an error so that unexpected behavior is <strong>LOUD</strong> instead of <small>quiet</small>.</p>","tableOfContents":"<ul>\n<li><a href=\"#built-in-type-guards\">Built-in type guards</a></li>\n<li>\n<p><a href=\"#user-defined-type-guards\">User-defined type guards</a></p>\n<ul>\n<li><a href=\"#value-is-foo\"><code>value is Foo</code></a></li>\n<li><a href=\"#asserts-value-is-foo\"><code>asserts value is Foo</code></a></li>\n<li><a href=\"#writing-high-quality-guards\">Writing high-quality guards</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/12-type-guards/"},"frontmatter":{"title":"Type guards and narrowing","course":"fundamentals-v3","date":"June 08, 2021","description":"We have explored built-in type guards like typeof and instanceof,\nbut there's a lot more power in type guards, including the ability\nto define your own!\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/12-type-guards/","title":"Type guards and narrowing","course":"fundamentals-v3","order":12,"previous":{"fields":{"slug":"/course/fundamentals-v3/11-top-and-bottom-types/"},"frontmatter":{"title":"Top and bottom types","order":11,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/13-nullish-values/"},"frontmatter":{"title":"Nullish values","order":13,"course":"fundamentals-v3","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}