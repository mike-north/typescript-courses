{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v3/11-top-and-bottom-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"ab5e24e8-0967-5aa1-ac86-4d95e1346616","excerpt":"Types describe sets of allowed values Let’s imagine that types describe a set of allowed values that a value might be. For example: x could be either item from…","html":"<h2 id=\"types-describe-sets-of-allowed-values\" style=\"position:relative;\"><a href=\"#types-describe-sets-of-allowed-values\" aria-label=\"types describe sets of allowed values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types describe sets of allowed values</h2>\n<p>Let’s imagine that types describe a set of allowed values that a value might be.</p>\n<p>For example:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div></code></div></pre>\n<p>x could be either item from the following set <code>{true, false}</code>. Let’s look at another example:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">y</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div></code></div></pre>\n<p>y could be <strong>any number</strong>. If we wanted to get technical and express this in terms of <a href=\"https://en.wikipedia.org/wiki/Set-builder_notation\">set builder notation</a>, this would be <code>{y | y is a number}</code><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>Let’s look at a few more, just for completeness:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let a: 5 | 6 | 7' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// anything in { 5, 6, 7 }</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let b: null' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// anything in { null }</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let c: {&#10;    favoriteFruit?: \"pineapple\";&#10;}' >c</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) favoriteFruit?: \"pineapple\" | undefined' style='border-bottom: solid 2px lightgrey;'>favoriteFruit</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"pineapple\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// { \"pineapple\", undefined }</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(property) favoriteFruit?: \"pineapple\" | undefined</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAhgXBCsEA+EBsyIHYIHofQDsBPMACwEsCBzCSiAbwQBo0XsBfAKFEgCM4CAV2DBc+KMTKUadRkJEQuPCAGM49ThAgAzKADcA9gCdyYEADEjg0wH44AIgAOlEFEePQ9sQwhOXbjxB7FkECABMQbRcwxU1vAD0bTnYgA'>Try</a></div></pre>\n<p>Hopefully this makes sense. Now we are ready to continue…</p>\n<h2 id=\"top-types\" style=\"position:relative;\"><a href=\"#top-types\" aria-label=\"top types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top types</h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Top_type\">top type</a> (symbol: <code>⊤</code>) is a type that describes <strong>any possible value allowed by the system</strong>.\nTo use our set theory mental model, we could describe this as <code>{x| x could be anything }</code></p>\n<p>TypeScript provides two of these types: <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any\"><code>any</code></a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown\"><code>unknown</code></a>.</p>\n<h3 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h3>\n<p>You can think of values with an <code>any</code> type as “playing by the usual JavaScript rules”.\nHere’s an illustrative example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: any' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Download some more ram\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>.<data-lsp lsp='(property) document: Document' >document</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBDAdgTwgXggBYAoGEBZEfCAIgBEB7Ad02AfQBMIBnBgWyp8GAJyrD0fGqThJQ1JvEwdmAOmUBjAK4DMYaeVlUC3cABV4AhprBA'>Try</a></div></pre>\n<p><code>any</code> typed values provide none of the safety we typically expect from TypeScript.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: any' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">14</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>it</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>is</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>possible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>to</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>access</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>any</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>deep</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>property</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBDAdgTwgXggEYAWAKBhAWRADp4w6BnGgBwHtHGlQaw2b0AY0EhOAnDQAmIEC1YAnNixDyw2UgHoNEHbr37dAPQD8QA'>Try</a></div></pre>\n<p>It’s important to understand that <code>any</code> is not necessarily a problem — sometimes\nit’s exactly the right type to use for a particular situation.</p>\n<p>For example, <code>console.log</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' style='border-bottom: solid 2px lightgrey;'>log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>, </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">, <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp>, </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(method) Console.log(...data: any[]): void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgziA2CmB00QHMAUB3AlmAJidANAAQAKATiALaYSzG0AuAKppbCAK4PEBEAZiBA8AlACgA9OKLSZRAHoB+IA'>Try</a></div></pre>\n<p>We can see here that <code>any</code> is not always a “bug” or a “problem” — it just indicates <em>maximal flexibility</em> and <em>the absence of type checking validation</em>.</p>\n<h3 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code></h3>\n<p>Like <code>any</code>, unknown can <em>accept</em> any value:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: unknown' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Download some more ram\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>.<data-lsp lsp='(property) document: Document' >document</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBXAdga0wewHdMIBeCAFgCgYQFkRSIAiAEUM2DwEMATCAZzwBbBkLwAnBuK5Cm1OElCMC8TD0IA6dQGN0IzGHm1FDMv3AAVeCLzowQA'>Try</a></div></pre>\n<p>However, <code>unknown</code> is different from <code>any</code> in a very important way:</p>\n<blockquote>\n<p>Values with an <code>unknown</code> type cannot be <em>used</em> without first\napplying a type guard</p>\n</blockquote>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">14</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>it</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>is</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>possible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>to</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>access</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>any</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>deep</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>property</data-lsp></data-err></span></div><span class=\"error\"><span>'myUnknown' is of type 'unknown'.</span><span class=\"code\">18046</span></span><span class=\"error-behind\">'myUnknown' is of type 'unknown'.</span><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// This code runs for { myUnknown| anything }</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// This code runs for { myUnknown| all strings }</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let myUnknown: string' style='border-bottom: solid 2px lightgrey;'>myUnknown</data-lsp>, </span><span style=\"color: #0A3069\">\"is a string\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>                 </span><span class='popover'><div class='arrow'></div>let myUnknown: string</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// This code runs for { myUnknown| all numbers }</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let myUnknown: number' style='border-bottom: solid 2px lightgrey;'>myUnknown</data-lsp>, </span><span style=\"color: #0A3069\">\"is a number\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>                 </span><span class='popover'><div class='arrow'></div>let myUnknown: number</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// this would run for \"the leftovers\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//       { myUnknown| anything except string or numbers }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsBGUOAOABgBYA2AKABtIAXUAWwE8BVAOwGs24B3N1AK6dufUAF58JCs3ZdebAHQBLWssQKADnESIlAIxoLacBQEMAxucg6zbJgoAmkSBs3wNMWkwohQf-wEAegD8FD5gACoAFkqIoOZwTqDQQnEAZgigAN6MrMLyAD6gpna0MWwA5qAAvhRKaaAAFF4ecA0y+aJi3aAARIi00EqVvQCU2RR+vtGx8YmQyamgGdDZubIibEWmVFSgA0OVcbV+CWyIcIZUcBWNHXJ8ADR9s6b7g8MVY5OgvgH-fhCFGqoEgVEQC3qTRakDa606bHEPV6bAEDD0MDGEymkRicQSSRS52WmRy902212oFR6Jgxx+ZwuVxudzyDzYz16r2paIx0G+OIBAKBILBEOxvzAZVmPDgAioDkWiJWfTKCxoaWMADc6b0fn9-mS2RTiqVylVIAAPKwaegHT6gTI0vn06pAA'>Try</a></div></pre>\n<h3 id=\"practical-use-of-top-types\" style=\"position:relative;\"><a href=\"#practical-use-of-top-types\" aria-label=\"practical use of top types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Practical use of top types</h3>\n<p>You will run into places where top types come in handy <em>very often</em>. In particular,\nif you ever convert a project from JavaScript to TypeScript, it’s very convenient\nto be able to incrementally add increasingly strong types. A lot of things will\nbe <code>any</code> until you get a chance to give them some attention.</p>\n<p><code>unknown</code> is great for values received at runtime (e.g., your data layer). By\nobligating consumers of these values to perform some light validation before using them,\nerrors are caught earlier, and can often be surfaced with more context.</p>\n<h2 id=\"bottom-type-never\" style=\"position:relative;\"><a href=\"#bottom-type-never\" aria-label=\"bottom type never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bottom type: <code>never</code></h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Bottom_type\">bottom type</a> (symbol: <code>⊥</code>) is a type that describes <strong>no possible value allowed by the system</strong>.\nTo use our set theory mental model, we could describe this as “any value from the following set: <code>{ }</code> (intentionally empty)”</p>\n<p>TypeScript provides one bottom type: <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#never\"><code>never</code></a>.</p>\n<p>At first glance, this may appear to be an <em>extremely abstract</em> and <em>pointless</em> concept, but there’s\none use case that should convince you otherwise. Let’s take a look at this scenario below.</p>\n<h3 id=\"exhaustive-conditionals\" style=\"position:relative;\"><a href=\"#exhaustive-conditionals\" aria-label=\"exhaustive conditionals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exhaustive conditionals</h3>\n<p>Let’s consider the following scenario:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"vroom\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"dragging something\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function obtainRandomVehicle(): any' >obtainRandomVehicle</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const neverValue: never' >neverValue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: never' >myVehicle</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABHARlAhjMAldYAmcAtgGoCmAFjBADZkAUAlAFyJ4CeiA3gFCKIAnMlBACkXAL5sAzmzDseEngHpViALSaIIKJvU9a6abIDC6Adz6J8AmADcGjS-34QE0uHQB0NOAHN6ACI7AThiQMYrJSVDY0QAFQEQCABrZ0QoOAB3JnTXd08yH38gm3Q-Pyw-RA8iYSowPwioxR4odgAHMkRyKlpugF4EpNTEAB9EMwEeHjooRCJ2Xuo6VmX+xCHUDCxcAmJ1uiYZtXiKbrIADwp0EGlYB0Q3AhhYBHQaHhhgRHpFw+6WHueAgZDgP0SyRSTl4-H+lBWRUyOScpxGKUUiDINGkgJ+fyWCI2QIwkDBPymMKs8L63hs9kciDUU0x2Nx6TUADkAKIASXiAAludgAIRWZ73RBgMgOAQkD4gMisaWyzYLQm0siKIA'>Try</a></div></pre>\n<p>Now, leaving the conditional exactly as-is, let’s add <code>Boat</code> as a vehicle type:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"vroom\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"dragging something\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Boat' >Boat</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Boat.isFloating(): boolean' >isFloating</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck | Boat' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Boat' >Boat</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck | Boat' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function obtainRandomVehicle(): any' >obtainRandomVehicle</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car | Boat' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-err><data-lsp lsp='const neverValue: never' >neverValue</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></span></div><span class=\"error\"><span>Type 'Boat' is not assignable to type 'never'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Boat' is not assignable to type 'never'.</span><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDgCMyBDCogJUaIBM4BbANUgALCiQA2kABQBKVBwCeoAN45QoaJDIFoNRQF9QjRAaJycunCDABaGyQJkbVnGMNGAwo2hKVoTtAoAbpJS3qqqJNSIcOIAdKJwAOYSAEQB8LzJUj7m5i6IRgAq0AQkANahoGRwAO7SFeGR0ZBxiSl+jAkJLAmgUTwawkQJmdlmzqKuoABCcIxkFRSIAGLxc911ymFqGlo0ZMWQo+ZkcgAOkKACwmIXALygRSXlAD6gHl6vM3M4OOLzPHIriJxKggTdQPd6EwWOwuLwweJpD8QA9BBdIAAPQSMAiIShBUARLgUSjURiiHAUPCgCQAhEXFh4jgkSBwamPMohTagOlCYHNKq1EIojmlMygSCiRAM6m0wF88GMpikVnU95cny866xPyBYKgFHvcWS6UVFEAOQAogBJAoACUtrAAhD4iXjQERIEFoHxyQRIKhPd6ITz5drDrogA'>Try</a></div></pre>\n<p>Effectively, what has happened here is that we have been alerted to the fact that\na new possibility for <code>Vehicle</code> has been introduced. As a result, we don’t\nend up with the type for <code>myVehicle</code> as a <code>never</code> in that final <code>else</code> clause.</p>\n<p>I recommend handling this a little more gracefully via an <strong>error subclass</strong>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class UnreachableError' >UnreachableError</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _nvr: never' >_nvr</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) message: string' >message</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car | Boat' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor UnreachableError(_nvr: never, message: string): UnreachableError' >UnreachableError</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    <data-err><data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></data-err>,</span></div><span class=\"error\"><span>Argument of type 'Boat' is not assignable to parameter of type 'never'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'Boat' is not assignable to parameter of type 'never'.</span><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">`Unexpected vehicle type: ${</span><span style=\"color: #24292F\"><data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaHAEYUCGVJASsyQCZwC2ANUgALKmQA2kABQBKVFwCeoAN55QoaJApFodZQF9QzREZIK8+vBOMmAws2gq1obtCoA3aTKfr1ZWohwkgB04nAA5lIARO7w-FEyzpaW1ogmACrQRGQA1j6gFHAA7rL5fgFBkKER0a7M4eFs4aCBfFqiJOEJSRZW4jagAEJwzBT5VIgAYmGjTaWqvhpaOnQUWZA9lhQKAA6QoEKiEvsAvKCZ2XkAPqD2jjfDo3h4kmN8Codikqifx6BnjBYbE4PH4v0ksjwIDAAFo4WQiBQ4TC+gMAKokTTMMjCZgMSQAUVgCFAkAAHhRIDwTET4I4FqB-CREGtsoVoFIAPokWKoEiQTzQAA0oDaaXqkFQLLcnW8DPUiCIew5YsQEsS6mSzxA52E+3JuKILI8+yZ3Co1FozHEeCoBFAUne4P2bBZXDIkDg9ouuTlzidIi+VUKJW8Op9OQspPEiBd9sdH0Df1dLHInvtdz96gDRxCrhNpR1dyjkBj+wZOoAcgSAJLpAASBPYAEJnBRhPAiqB+V2MVicXjCcSOc5s4nc5AhaPQAADDHkvaUSDcUCeCcFXaS0AAEmUOaD+hnzkS+iAA'>Try</a></div></pre>\n<p>Now, one of three things will happen in that final <code>else</code> block</p>\n<ul>\n<li>We will have handled every case before reaching it, and thus we will never enter the final <code>else</code> block</li>\n<li>We will catch upstream code changes that need to be handled in this conditional at compile time (e.g., adding the <code>Boat</code> case)</li>\n<li>If somehow an unexpected value “slip through” and is not caught until we actually run the code, we will get a meaningful error message</li>\n</ul>\n<p>Note that this approach works nicely with a <code>switch</code> statement, when the <code>UnreachableError</code> is thrown from the <code>default</code> case clause.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Technically in JS or TS this would be <code>{ y| -Number.MAX_VALUE &#x3C;= y &#x3C;= Number.MAX_VALUE }</code>, but if you know enough to ask, you probably don’t need this footnote…!</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#types-describe-sets-of-allowed-values\">Types describe sets of allowed values</a></li>\n<li>\n<p><a href=\"#top-types\">Top types</a></p>\n<ul>\n<li><a href=\"#any\"><code>any</code></a></li>\n<li><a href=\"#unknown\"><code>unknown</code></a></li>\n<li><a href=\"#practical-use-of-top-types\">Practical use of top types</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#bottom-type-never\">Bottom type: <code>never</code></a></p>\n<ul>\n<li><a href=\"#exhaustive-conditionals\">Exhaustive conditionals</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/11-top-and-bottom-types/"},"frontmatter":{"title":"Top and bottom types","course":"fundamentals-v3","date":"June 08, 2021","description":"Top types can be anything, bottom types can't be anything. We will also look\nat three \"extreme types\" in TypeScript: any, unknown and never.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/11-top-and-bottom-types/","title":"Top and bottom types","course":"fundamentals-v3","order":11,"previous":{"fields":{"slug":"/course/fundamentals-v3/10-classes/"},"frontmatter":{"title":"Classes","order":10,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/12-type-guards/"},"frontmatter":{"title":"Type guards and narrowing","order":12,"course":"fundamentals-v3","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}