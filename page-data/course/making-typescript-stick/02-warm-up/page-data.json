{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/02-warm-up/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"4c009ce4-c816-5414-8e37-d1b9f3c301bb","excerpt":"Question 1 Compare and contrast the #name and age fields #name is a JS private field, and it’s actually inaccessible outside of the class at runtime. More about…","html":"<h2 id=\"question-1\" style=\"position:relative;\"><a href=\"#question-1\" aria-label=\"question 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 1</h2>\n<p>Compare and contrast the <code>#name</code> and <code>age</code> fields</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Person' >Person</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#name</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Person.age: number' >age</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAYwDYEMDOa4AVhTRAOzgG8AoOOAYgJQFtg4BeOAIhfLjCgEsA3FGAxQBzBswCMpAL5A'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<ul>\n<li><strong><code>#name</code> is a JS private field</strong>, and it’s actually inaccessible outside of the class at runtime. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields#private_fields\">More about JS private fields here.</a></li>\n<li><strong><code>age</code> is a TypeScript private field</strong>, and while type-checking helps ensure we do not access it improperly, at runtime it’s accessible outside the class. <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#private\">More about the TS <code>private</code> access modifier keyword here.</a></li>\n</ul>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-2\" style=\"position:relative;\"><a href=\"#question-2\" aria-label=\"question 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 2</h2>\n<p>Which of the following variables (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>) hold immutable values</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const a: \"Frontend Masters\"' >a</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Frontend Masters\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let b: string' >b</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Frontend Masters\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: {&#10;    learnAt: string;&#10;}' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #0A3069\">\"Frontend Masters\"</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let d: {&#10;    learnAt: string;&#10;}' >d</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #0A3069\">\"Frontend Masters\"</span><span style=\"color: #24292F\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const e: Readonly&lt;{&#10;    learnAt: \"Frontend Masters\";&#10;}>' >e</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ObjectConstructor.freeze&lt;{&#10;    learnAt: \"Frontend Masters\";&#10;}, string | number | bigint | boolean | symbol>(o: {&#10;    learnAt: \"Frontend Masters\";&#10;}): Readonly&lt;{&#10;    learnAt: \"Frontend Masters\";&#10;}> (+2 overloads)' >freeze</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) learnAt: \"Frontend Masters\"' >learnAt</data-lsp>: </span><span style=\"color: #0A3069\">\"Frontend Masters\"</span><span style=\"color: #24292F\"> })</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhjAvDARAMQE7igUzAExgFk5ocMIUAoAGx1gCMlVNs9CSyLqrRJZgzAN4w6cDGACCUAFwssYXAWKlc3GAF9a9GIWQixE6XPQKlHVeUqaqvcNBg5mAeQYArHMCgA6AGYYcHAAvHAAKAxxxKVl5NmVONWsNAEogA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p><strong><code>a</code>, <code>b</code> and <code>e</code> hold immutable values</strong>. Remember, <code>const</code> and <code>let</code>\ndiffer in terms of whether variables can be reassigned, but that has nothing\nto do with whether the values they hold can be modified.</p>\n<p><code>Object.freeze</code> prevents properties of an object from being changed, and\nprevents new properties from being added. This effectively is a “shallow immutability”.</p>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-3\" style=\"position:relative;\"><a href=\"#question-3\" aria-label=\"question 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 3</h2>\n<p>What’s the missing line of code that should replace <code>/* ??? */</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">str</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"hello\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> val </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">/* ??? */</span></div><div class='line'><span style=\"color: #24292F\">  console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(val) </span><span style=\"color: #6E7781\">// ['h', 'e', 'l', 'l', 'o']</span></div></code></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const str: \"hello\"' >str</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"hello\"</span></div><div class='line highlight'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: string[]' >val</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const str: \"hello\"' >str</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)' >split</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">)</span></div><div class='line dim'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let val: string[]' >val</data-lsp>) </span><span style=\"color: #6E7781\">// [&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBNBOMC8MBEALApgG2yVAUNprAG4CG2ycU8AdBAA7YCWUAFKqgJQGiQhidPAHN2FbNxgB6aTADaAcnSKANDEWY1G7NsW71ikIoC6QA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-4\" style=\"position:relative;\"><a href=\"#question-4\" aria-label=\"question 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 4</h2>\n<p>What’s the missing line of code that should replace <code>/* ??? */</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">str</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"hello\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> val </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">/* ??? */</span></div><div class='line'><span style=\"color: #24292F\">  console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(val)</span></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * {</span></div><div class='line'><span style=\"color: #6E7781\"> *   '0': 'h',</span></div><div class='line'><span style=\"color: #6E7781\"> *   '1': 'e',</span></div><div class='line'><span style=\"color: #6E7781\"> *   '2': 'l',</span></div><div class='line'><span style=\"color: #6E7781\"> *   '3': 'l',</span></div><div class='line'><span style=\"color: #6E7781\"> *   '4': 'o'</span></div><div class='line'><span style=\"color: #6E7781\"> * }</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div></code></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const str: \"hello\"' >str</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"hello\"</span></div><div class='line highlight'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: {&#10;    [n: number]: string;&#10;    length: number;&#10;    toString(): string;&#10;    toLocaleString(): string;&#10;    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions &amp; Intl.DateTimeFormatOptions): string;&#10;    ... 28 more ...;&#10;    [Symbol.unscopables]: {&#10;        ...;&#10;    };&#10;}' >val</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #CF222E\">...</span><span style=\"color: #24292F\"><data-lsp lsp='const str: \"hello\"' >str</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)' >split</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">) }</span></div><div class='line dim'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let val: {&#10;    [n: number]: string;&#10;    length: number;&#10;    toString(): string;&#10;    toLocaleString(): string;&#10;    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions &amp; Intl.DateTimeFormatOptions): string;&#10;    ... 28 more ...;&#10;    [Symbol.unscopables]: {&#10;        ...;&#10;    };&#10;}' >val</data-lsp>)</span></div><div class='line dim'><span style=\"color: #6E7781\">/**</span></div><div class='line dim'><span style=\"color: #6E7781\"> * {</span></div><div class='line dim'><span style=\"color: #6E7781\"> *   &apos;0&apos;: &apos;h&apos;,</span></div><div class='line dim'><span style=\"color: #6E7781\"> *   &apos;1&apos;: &apos;e&apos;,</span></div><div class='line dim'><span style=\"color: #6E7781\"> *   &apos;2&apos;: &apos;l&apos;,</span></div><div class='line dim'><span style=\"color: #6E7781\"> *   &apos;3&apos;: &apos;l&apos;,</span></div><div class='line dim'><span style=\"color: #6E7781\"> *   &apos;4&apos;: &apos;o&apos;</span></div><div class='line dim'><span style=\"color: #6E7781\"> * }</span></div><div class='line dim'><span style=\"color: #6E7781\"> */</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBNBOMC8MBEALApgG2yVAUNprAG4CG2yMA3jAHSML0QAO2AllABSqoCUMAL4FQkEMXp4A5twrZ+BAPQAqFQRgraGrTBgByAAz6AXAfT6ANDr0GAjKYOYrNvfoBMj-dhebb+gGYvH2s-NwAWLxB9GxFNJSA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-5\" style=\"position:relative;\"><a href=\"#question-5\" aria-label=\"question 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 5</h2>\n<p>Look at the types of <code>first</code> and <code>second</code> below, as well as the compile error\nmessages. What does your mental model tell you about how <code>string</code> and <code>String</code>\nare different?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let first: never' >first</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let second: String &amp; Number' >second</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface String' >String</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Number' >Number</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let first: never' >first</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"abc\"</span></div><span class=\"error\"><span>Type '\"abc\"' is not assignable to type 'never'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '\"abc\"' is not assignable to type 'never'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let second: String &amp; Number' >second</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"abc\"</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'String & Number'.\n  Type 'string' is not assignable to type 'Number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'String & Number'.\n  Type 'string' is not assignable to type 'Number'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let second: String &amp; Number' >second</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var String: StringConstructor&#10;new (value?: any) => String' >String</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"abc\"</span><span style=\"color: #24292F\">)</span></div><span class=\"error\"><span>Type 'String' is not assignable to type 'String & Number'.\n  Type 'String' is missing the following properties from type 'Number': toFixed, toExponential, toPrecision</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'String' is not assignable to type 'String & Number'.\n  Type 'String' is missing the following properties from type 'Number': toFixed, toExponential, toPrecision</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vVgDAFAA2kALqAGYCWSpqip0VAdgOagBkozArgLYAjGMTKhEkAMZxmAE1QBlRi3ZcAcvyHQCBarVABeUACIAhgIlGC4qbIPGzFq5Oky7zSAHdQipmwAUpuZGAJRAA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\nSome things you may observe.\n<ul>\n<li><strong>When using the primitive types <code>string</code> and <code>number</code> we can see that the union\nof these two types results in a <code>never</code></strong>. In other words, there is no <code>string</code> that\ncan be also regarded as a <code>number</code>, and no <code>number</code> that can also be regarded as a `string</li>\n<li><strong>When using the interface types <code>String</code> and <code>Number</code>, we can see that the union does\n<em>not</em> result in a <code>never</code></strong>.</li>\n</ul>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-6\" style=\"position:relative;\"><a href=\"#question-6\" aria-label=\"question 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 6</h2>\n<p>Continuing the example from question 3. Explain what’s happening here.</p>\n<p>Why is <code>second = bar</code> type-checking, but <code>first = bar</code> is not?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let first: never' >first</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let second: String &amp; Number' >second</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface String' >String</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Number' >Number</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-err><data-lsp lsp='interface Foo' >Foo</data-lsp></data-err></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface String' >String</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='interface Number' >Number</data-lsp></span><span style=\"color: #24292F\"> {}</span></div><span class=\"error\"><span>Interface 'Foo' cannot simultaneously extend types 'String' and 'Number'.\n  Named property 'toString' of types 'String' and 'Number' are not identical.</span><span class=\"code\">2320</span></span><span class=\"error-behind\">Interface 'Foo' cannot simultaneously extend types 'String' and 'Number'.\n  Named property 'toString' of types 'String' and 'Number' are not identical.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Bar' >Bar</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface String' >String</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='interface Number' >Number</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Bar.valueOf(): never' >valueOf</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Bar.toString(): string' >toString</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let bar: Bar' >bar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Bar' >Bar</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">...new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Number: NumberConstructor&#10;new (value?: any) => Number' >Number</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">...new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var String: StringConstructor&#10;new (value?: any) => String' >String</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"abc\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">...</span><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Bar.valueOf(): never' >valueOf</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let second: String &amp; Number' >second</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let bar: Bar' >bar</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let first: never' >first</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let bar: Bar' >bar</data-lsp></span></div><span class=\"error\"><span>Type 'Bar' is not assignable to type 'never'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Bar' is not assignable to type 'never'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vVgDAFAA2kALqAGYCWSpqip0VAdgOagBkozArgLYAjGMTKhEkAMZxmAE1QBlRi3ZcAcvyHQCBFqRgUAhhMigAYnDihIADz2zEoRUzYAaUOsExQAbwC+23X0jEwAhA2grW0h7RyVXdw0vbwJQUAA3AyIeSAB5CgAKAEpUZkg04VTSOCdlIvo41gJ-EXIBcNQwiIBeHxTQADpB0oB3BM9ofIAWQpc+wf6R2OdWfIAiAwEJVZm5weTU1Iys3ILC3oOD6DIeaGZQVdXQAwdS8q0L31nUz6aCcSlZKAem0tNRaEDQCCgA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\nSome things you may observe.\n<ul>\n<li>It seems like we can create an interface <code>Bar</code> that\nthat has just the right shape to both comply with the <code>String</code> and <code>Number</code>\ninterfaces</li>\n<li>We can also successfully create a value <code>bar</code>, with only a little cheating via\ncasting (<code>as never</code>)</li>\n<li>This is why we want to stay away from the interfaces corresponding to primitive types,\nand stick to <code>string</code> and <code>number</code></li>\n</ul>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"question-7\" style=\"position:relative;\"><a href=\"#question-7\" aria-label=\"question 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 7</h2>\n<p>In what order will the animal names below be printed to the console?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(): Promise&lt;any>' >getData</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"elephant\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const p: Promise&lt;any>' >p</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;any>(executor: (resolve: (value: any) => void, reject: (reason?: any) => void) => void) => Promise&lt;any>' >Promise</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) resolve: (value: any) => void' >resolve</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"giraffe\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) resolve: (value: any) => void' >resolve</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"lion\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"zebra\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"koala\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const p: Promise&lt;any>' >p</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"cat\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getData(): Promise&lt;any>' >getData</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const result: any' >result</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"dog\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292F\">().</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;void>.then&lt;void, never>(onfulfilled?: ((value: void) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"moose\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQCIEMpYBQCUiA3gFCKIQIDOcANqgHR1zJ4BEqDADgBZZgo7AuUo0oibogC8iMKgDuiAAoAnOAFsY1VHjyrUtOgDdURaQD4SoilTBGmLNu2QxVWYMFTCbiA0dMOOngwHwpbGnpHVg4AL1QAI3cwxABfEQj7KOYY9gBrOCw6LBSDKBBVJG5SVNIsagBPSERQSFgERA0sGDBCa0yHHOcIHBS7agl-EDoJWSwFbok0TBx8DLEshiH9Q2moEVrx7KcOABNWHy6ewkYoXlRevst+jcGT9g04OB0fdKA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p>Answer: <strong>dog, cat, elephant, giraffe, zebra, koala, lion, moose</strong></p>\n<ul>\n<li>Are you surprised that <code>giraffe</code> and <code>zebra</code> happen so early? Remember\nthat <code>Promise</code> executors are invoked synchronously in the <code>Promise</code> constructor</li>\n<li>Are you surprised that <code>lion</code> happens so late? Remember that a <code>resolve</code> is\nnot a <code>return</code>. Just because a <code>Promise</code> has resolved, doesn’t mean the\ncorresponding <code>.then</code> (or <code>await</code> is called immediately)</li>\n</ul>\n</details>","tableOfContents":"<ul>\n<li><a href=\"#question-1\">Question 1</a></li>\n<li><a href=\"#question-2\">Question 2</a></li>\n<li><a href=\"#question-3\">Question 3</a></li>\n<li><a href=\"#question-4\">Question 4</a></li>\n<li><a href=\"#question-5\">Question 5</a></li>\n<li><a href=\"#question-6\">Question 6</a></li>\n<li><a href=\"#question-7\">Question 7</a></li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/02-warm-up/"},"frontmatter":{"title":"JS/TS Warm-up Quiz","course":"making-typescript-stick","date":"March 22, 2022","description":"Before jumping in, let's get those neurons firing by taking a quick\nquiz. Remember, wrong answers aren't anything more than an indication\nof where you need a little more practice!\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/02-warm-up/","title":"JS/TS Warm-up Quiz","course":"making-typescript-stick","order":2,"previous":{"fields":{"slug":"/course/making-typescript-stick/01-intro/"},"frontmatter":{"title":"Intro","order":1,"course":"making-typescript-stick","isExercise":null}},"next":{"fields":{"slug":"/course/making-typescript-stick/03-recent-updates-to-typescript/"},"frontmatter":{"title":"Recent updates to TypeScript","order":3,"course":"making-typescript-stick","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}