{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/11-covariance-contravariance/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"fefc84bf-df4b-5557-9204-c34a2b81ab36","excerpt":"Let’s imagine the following situation We’re writing software that controls machinery at a snack-making factory. Let’s start with a base class and two subclasses…","html":"<p>Let’s imagine the following situation</p>\n<p>We’re writing software that controls machinery at a snack-making factory. Let’s start with a base class and two subclasses\n<br />\n<br />\n<br /></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">protected</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Snack.petFriendly: boolean' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Pretzel.salted: boolean' >salted</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) salted: boolean' >salted</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.petFriendly: false' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.chocolateType: \"dark\" | \"milk\" | \"white\"' >chocolateType</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;milk&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;white&apos;</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1oAcBOA9gC4CmwpAJtMAfBEXgK7kF4AUW2ujARiAJbBoeEmAq0QAT1wkiAMTz8S8ClIBc0HgQIhR8AJToAvhhMZQkGAAURRAF4kQ0EgA9SKmAiSpM2GnQZmIlY2HF4BIRExCWkIMBBKaABeaECSQ18uCEYcEnYAQjiEkgp9ThMzCyhoAGFtZCVnN2UKT0QUdE4wvkFhUXF4KRl5RRb1aAAzeIgSZMnpkk5-eiYWdk5sboi+6MHpYAALAhpwUgAVSVyNAHIKMDxka+gAH2hrgFt+EEeXt4B3A78UjXDIbaDZXLsKYgGZlbAVIA'>Try</a></div></pre>\n<p>The object oriented inheritance at play makes it pretty easy to understand which of these is a subtype of the other. <code>Cookie</code> is a subtype of <code>Snack</code>, or in other words</p>\n<blockquote>\n<p>All <code>Cookie</code>s are also <code>Snack</code>s, but not all <code>Snack</code>s are <code>Cookie</code>s</p>\n</blockquote>\n<h2 id=\"covariance\" style=\"position:relative;\"><a href=\"#covariance\" aria-label=\"covariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Covariance</h2>\n<p>Our factory needs to model machines that <em>produce</em> these items. We plan for there to be many types of snacks, so we should build a generalized abstraction for a <code>Producer&#x3C;T></code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgApQPYBMCuSoA8AKgHzIDeAUMsgA6a5IBcyAFAJTIC8ZRA3JQC+QA'>Try</a></div></pre>\n<p>We start out with two kinds of machines</p>\n<ul>\n<li><code>snackProducer</code> - which makes <code>Pretzel</code>s and <code>Cookies</code>s at random</li>\n<li><code>cookieProducer</code> - which makes only <code>Cookies</code></li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;Cookie>.produce: () => Cookie' >produce</data-lsp></span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const COOKIE_TO_PRETZEL_RATIO: 0.5' >COOKIE_TO_PRETZEL_RATIO</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducer: Producer&lt;Snack>' >snackProducer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;Snack>.produce: () => Snack' >produce</data-lsp></span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const COOKIE_TO_PRETZEL_RATIO: 0.5' >COOKIE_TO_PRETZEL_RATIO</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"milk\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Pretzel(salted?: boolean): Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1oAcBOA9gC4CmwpAJtMAfBEXgK7kF4AUW2ujARiAJbBoeEmAq0QAT1wkiAMTz8S8ClIBc0HgQIhR8AJToAvhhOhIMAAoiiALxIhoJAB6kVMBElSZsNOg2YiVjYcXgEhETEJaQgwEEpoAF5oAJJDHy4IRhwSdgBCWPiSCn1OEzNwKGgAYW1kJSdXZQoPRBR0TlC+QWFRcXgpGXlFZvVoADM4iBIkiamSTj96JhZ2Tmwu8N6ogelgAAsCGnBSABVJHI0AcgowPGQr6AAfaCuAW34QB+fXgHd9-ikK7pdbQLI5diTEDTUrYcoYfjwUh4SbAGbWAgUZi5AA8pwAfB0NoQsWiNGxDIlCacANymDAAeiZ0AAtGzgIwiGyWRhdERqHUlBjSbkNMLsXgcbUCPUSITkhl8JjseTKYT4CRfjVBSQ2Dc7g9SkY6RglvzqgB5C0AaQAkgBRAD6pwtjssACV7acAFr2gAyjvdAEFTraLbMAAwAOgArBhebIwW1kOK0XgxSSJTjPCh5UTcJmydAKUlCQBZMBEfZRvBgFQEN4lwmWm0O52uj1e30B4Ohi2ggD80A1WulsrYACIPl8J7CuBoR9BrLJ7CA2KkjTSgA'>Try</a></div></pre>\n<p>Great! Let’s try assignments in both directions of <code>snackProducer</code> and <code>cookieProducer</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let snackProducer: Producer&lt;Snack>' >snackProducer</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp> </span><span style=\"color: #6E7781\">// ✅</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducer: Producer&lt;Snack>' >snackProducer</data-lsp> </span><span style=\"color: #6E7781\">// ❌</span></div><span class=\"error\"><span>Type 'Producer&lt;Snack&gt;' is not assignable to type 'Producer&lt;Cookie&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Producer&lt;Snack&gt;' is not assignable to type 'Producer&lt;Cookie&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQAHeAF0jy4BNQ8cSog7QArjwQAKZizZiARgQCWeUNEhFeQggE82kDgDFoyyJV57UCuHAKbKASkYBfHG8IkyABQ0cAXpAEoJAAHlwWZFQ09EwsgsKiEhzSrIoqahpaOvqIRAR8oAC8oEmQznFyiGKsMFIAhHkFkLyOsm4exKSgAMK2tGYh4ea8UdR0jLJpSqrqmtqUegbGpiNWoABm+YiQxZvbkLIJIuKS0DJy8jOZ8zkCABZwgsRcACq6tagA5LxE0LRfUAAH1AXwAtsoCADgaCAO73ZRcL4VWQsaq1c5bAg7NosDo4ZSULjQLZ4Xa+OC8CQwAA8rwAfJMWOxKdTUFJnEVGa8ANzuHA4ewcAT9MwUqlk6CocXU6A0vpwAaQRklSosiWQdmcxmUSCw3qiyBSH5-AFtFx8oWgRDjWgyyXS+AauXROgqplsJ1s0Ac4qMgCyRA49wAdNAiBY4GDfYyAAwhgCsoAA-KBdfqFUqpAAiCFQ7POVDp0C+QyBAhSMrmvkgMAAWgbeDEHAbdZwNpi9pge0EirFXsloBAoEAoOT4Q1d6B7Dt0SdDsCAGXIgA'>Try</a></div></pre>\n<p>Interesting! We can see that if we need a <code>snackProducer</code>, a <code>cookieProducer</code> will certainly meet our need, but if we must have a <code>cookieProducer</code> we can’t be sure that any <code>snackProducer</code> will suffice.</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>Producer&#x3C;Cookie></code></td>\n<td>--- is a ---></td>\n<td><code>Producer&#x3C;Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Because both of these arrows flow in the same direction, we would say <code>Producer&#x3C;T></code> is <em>covariant</em> on <code>T</code></strong></p>\n</blockquote>\n<p>TypeScript 5 gives us the ability to <em>state</em> that we intend <code>Producer&#x3C;T></code> to be (and remain) <em>covariant on <code>T</code></em> using the <code>out</code> keyword before the typeParam.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;out T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">out</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;out T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;out T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;out T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgApQPYBMCuSoA8GOYyAKgHzIDeAUMsgA6a5IBcyAFAJTIC8VMgG5aAXyA'>Try</a></div></pre>\n<h2 id=\"contravariance\" style=\"position:relative;\"><a href=\"#contravariance\" aria-label=\"contravariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contravariance</h2>\n<p>Now we need to model things that <em>package</em> our snacks. Let’s make a <code>Packager&#x3C;T></code> interface that describes packagers.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAqINZwObQDwAqAfMgN4BQyyADpjhAFzIAUwkAtkwQJTIC8JAG4B7YABMA3OQC+QA'>Try</a></div></pre>\n<p>Let’s imagine we have two kinds of machines</p>\n<ul>\n<li><code>cookiePackager</code> - a cheaper machine that only is suitable for packaging cookies</li>\n<li><code>snackPackager</code> - a more expensive machine that not only packages cookies properly, but it can package pretzels and other snacks too!</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;Cookie>.package: (item: Cookie) => void' >package</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: Cookie' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;Snack>.package: (item: Snack) => void' >package</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: Snack' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) item: Snack' >item</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\"> ) {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package cookie */</span></div><div class='line'><span style=\"color: #24292F\">    } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) item: Snack' >item</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package pretzel */</span></div><div class='line'><span style=\"color: #24292F\">    } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package other snacks? */</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp></span></div><span class=\"error\"><span>Type 'Packager&lt;Cookie&gt;' is not assignable to type 'Packager&lt;Snack&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Packager&lt;Cookie&gt;' is not assignable to type 'Packager&lt;Snack&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQAHeAF0jy4BNQ8cSog7QArjwQAKZizZiARgQCWeUNEhFeQggE82kDgDFoyyJV57UCuHAKbKASkYBfHG8IkyABQ0cAXpAEoJAAHlwWZFQ09EwsgsKiEhzSrIoqahpaOvqIRAR8oAC8oEmQznFyiGKsMFIAhHkFkLyOsm4exKSgAMK2tGYh4ea8UdR0jLJpSqrqmtqUegbGpiNWoABm+YiQxZvbkLIJIuKS0DJy8jOZ8zkCABZwgsRcACq6tagA5LxE0LRfUAAH1AXwAtsoCADgaCAO73ZRcL4VWQsaq1c5bAg7NosDo4ZSULjQLZ4XbeGJEADmMAAPK8AHyTFisSk01BSRGQMGoV7OIpMgBucGUvAA3O4cCAwABaOV4MQcOUynD2DgCfpmCl0akwVDa2i66C0vpwAaQJklSqsnU0zlcHm9TXlVzuCWqwygRDjWgGo36tl06J0S3MtiB+3c1DB2goy7KDagSNg0CEkREShkuCJ03m0Bxy6gYAAKlAfppGrNg2LwFRoBcIWxuwTSa5KbTHAzWcTvkMgQIBcuJbLgbYfn7oBrdYbQR2YaHpfLuzgHHuMC9PsQAH5J7XLm48W6cPhnUvoHtvTEzxLL3Qz3tBFXIGegA'>Try</a></div></pre>\n<p>If we need to package a bunch of <code>Cookie</code>s, our fancy <code>snackPackager</code> will certainly do the job. However, if we have a mix of <code>Pretzel</code>s, <code>Cookie</code>s and other <code>Snack</code>s, the <code>cookiePackager</code> machine, which only knows how to handle cookies, will not meet our needs.</p>\n<p>Let’s build a table like we did for covariance</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>Packager&#x3C;Cookie></code></td>\n<td>&#x3C;--- is a ---</td>\n<td><code>Packager&#x3C;Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Because these arrows flow in opposite directions, we would say <code>Packager&#x3C;T></code> is <em>contravariant</em> on <code>T</code></strong></p>\n</blockquote>\n<p>TypeScript 5 gives us the ability to <em>state</em> that we intend <code>Packager&#x3C;T></code> to be (and remain) <em>covariant on <code>T</code></em> using the <code>in</code> keyword before the typeParam.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;in T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;in T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: in T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAqINZwObQDyjIAqAfMgN4BQyyADpjhAFzIAUwkAti0QJTIBeMgDcA9sAAmAbkoBfIA'>Try</a></div></pre>\n<h2 id=\"invariance\" style=\"position:relative;\"><a href=\"#invariance\" aria-label=\"invariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invariance</h2>\n<p>What happens if we merge these <code>Producer&#x3C;T></code> and <code>Packager&#x3C;T></code> interfaces together?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerPackager&lt;T>' >ProducerPackager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerPackager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerPackager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerPackager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1oAcBOA9gC4CmwpAJtMAfBEXgK7kF4AUW2ujARiAJbBoeEmAq0QAT1wkiAMTz8S8ClIBc0HgQIhR8AJToAvhhOhIMAAoiiALxIhoJAB6kVMBElSZsNOg2YiVjYcXgEhETEJaQgwEEpoAF5oAJJDHy4IRhwSdgBCWPiSCn1OEzNwKGgAYW1kJSdXZQoPRBR0TlC+QWFRcXgpGXlFZvVoADM4iBIkiamSTj96JhZ2Tmwu8N6ogelgAAsCGnBSABVJHI0AcgowPGQr6AAfaCuAW34QB+fXgHd9-ikK7pdbQLI5diTEDTUrYcoYAD0SOgAFo0cBGEQ0SiMPx4KQ8JNgDNrAQKMxcpYvGAAOa5AA8pwAfB0NtS6Ro2ICSG8NKdDIkWQA3Aj8CgAbk6hHJxM5ApZp0lRiAA'>Try</a></div></pre>\n<p>These machines have <em>independent features</em> that allow them to produce <em>and</em> package food items.</p>\n<ul>\n<li><code>cookieProducerPackager</code> - makes only cookies, and packages only cookies</li>\n<li><code>snackProducerPackager</code> - makes a variety of different snacks, and has the ability to package any snack</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducerPackager: ProducerPackager&lt;Cookie>' >cookieProducerPackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerPackager&lt;T>' >ProducerPackager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;Cookie>.produce: () => Cookie' >produce</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;Cookie>.package: (item: Cookie) => void' >package</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: Cookie' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducerPackager: ProducerPackager&lt;Snack>' >snackProducerPackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerPackager&lt;T>' >ProducerPackager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;Snack>.produce: () => Snack' >produce</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"milk\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Pretzel(salted?: boolean): Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerPackager&lt;Snack>.package: (item: Snack) => void' >package</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: Snack' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) item: Snack' >item</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\"> ) {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package cookie */</span></div><div class='line'><span style=\"color: #24292F\">    } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) item: Snack' >item</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package pretzel */</span></div><div class='line'><span style=\"color: #24292F\">    } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">/* Package other snacks? */</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let snackProducerPackager: ProducerPackager&lt;Snack>' >snackProducerPackager</data-lsp></data-err></span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducerPackager: ProducerPackager&lt;Cookie>' >cookieProducerPackager</data-lsp></span></div><span class=\"error\"><span>Type 'ProducerPackager&lt;Cookie&gt;' is not assignable to type 'ProducerPackager&lt;Snack&gt;'.\n  Types of property 'package' are incompatible.\n    Type '(item: Cookie) =&gt; void' is not assignable to type '(item: Snack) =&gt; void'.\n      Types of parameters 'item' and 'item' are incompatible.\n        Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'ProducerPackager&lt;Cookie&gt;' is not assignable to type 'ProducerPackager&lt;Snack&gt;'.\n  Types of property 'package' are incompatible.\n    Type '(item: Cookie) =&gt; void' is not assignable to type '(item: Snack) =&gt; void'.\n      Types of parameters 'item' and 'item' are incompatible.\n        Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let cookieProducerPackager: ProducerPackager&lt;Cookie>' >cookieProducerPackager</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducerPackager: ProducerPackager&lt;Snack>' >snackProducerPackager</data-lsp></span></div><span class=\"error\"><span>Type 'ProducerPackager&lt;Snack&gt;' is not assignable to type 'ProducerPackager&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'ProducerPackager&lt;Snack&gt;' is not assignable to type 'ProducerPackager&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlDjVICgQJTZYdZLQAmAZk87sQAbAIaRIoAMoZhiANagA3nVChiraKWSkAJqER4YsNMjYAKZStVoARoKShYpYdryDCq0qgSkM2t1WscHEEnDABKRQBfOmihUXEABUdoAC9SQVBSAA8NX3EpGXklFX0MQ2NoM2IbO0QHJxcMN1BIYUENXQBeaiNSCOLLSDQyWFMAQlb2nTCLaNiRMVAAYSDZeFJMnJ9tfOk5RQtq23tHZ1d3Mi91339QADM2yA3uh8Eni1Lyk1GLFSPa+pnJruRAACxw+hEGiIZCoAHJtMJYLI4aAAD6gOEAW3gghR6MxAHdQfANHD+r8WsNmKZXk8Zio5nR4BgNLAHogNkkcNpjMwEoVhABzZgAHnwAD4Dn9WLzOVRTBFOlL8IdBSKFaTSFiqPglVKAG44eDaGIMRgAWitiDQ0CtFroIWgelW625cv56uYVHdfNgArkwrFKxwa1IUu6AzUPL5iullmSaFgGFAGFIhOWrtIpgRSJRDNAkQANGrAyLTEihVQQ2H+kzHZ4WntZL7Of6vbAfbK-QHZEHYKKCnII-Hox64wMVInk6AALLCaCggB0sGEvhwWLjUoADEuAKyUlQAflT6czofWpgARDi8VeC5ZQFQ0xmkp40oJTDQ+rMS38vaYWo6pIzYUo+8B3KAgEaFioAsjAa6cjgkE1usoBgY+oDAAAVKAvZBi6F4bNhwCUpEmRvBsEFQUBcFlNAiGkMheHJB+GGPjheFeqorHpKAJFkRRTzxhxuH4SKoA4IuzBNoUkAngJj7RIyZp0JAzatp6ZbMN0+hEZp7babAAhZgZ4kyd06mFGZHZAA'>Try</a></div></pre>\n<p>Looks like assignment fails in <em>both</em> directions.</p>\n<ul>\n<li>The first one fails because the <code>package</code> types are not type equivalent</li>\n<li>The second one fails because of <code>produce</code>.</li>\n</ul>\n<p>Where this leaves us is that <code>ProducerPackager&#x3C;T></code> for <code>T = Snack</code> and <code>T = Cookie</code> are not reusable in either direction — it’s as if these types (<code>ProducerPackager&#x3C;Cooke></code> and <code>ProducerPackager&#x3C;Snack></code>) are totally unrelated.</p>\n<p>Let’s make our table one more time</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>ProducerPackager&#x3C;Cookie></code></td>\n<td>x x x x x x</td>\n<td><code>ProducerPackager&#x3C;Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>This means that <code>ProducerPackager&#x3C;T></code> is <em>invariant</em> on <code>T</code>. <strong>Invariance means <em>neither</em> covariance nor contravariance.</strong></p>\n</blockquote>\n<h2 id=\"bivariance\" style=\"position:relative;\"><a href=\"#bivariance\" aria-label=\"bivariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bivariance</h2>\n<p>For completeness, let’s explore one more example. Imagine we have two employees who are assigned to quality control.</p>\n<p>One employee, represented by <code>cookieQualityCheck</code> is relatively new to the company. They only know how to inspect cookies.</p>\n<p>Another employee, represented by <code>snackQualityCheck</code> has been with the company for a long time, and can effectively inspect any food product that the company produces.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) cookie: Cookie' >cookie</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.1</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function snackQualityCheck(snack: Snack): boolean' >snackQualityCheck</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) snack: Snack' >snack</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='(parameter) snack: Snack' >snack</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) snack: Cookie' >snack</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.16</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// pretzel case</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1oAcBOA9gC4CmwpAJtMAfBEXgK7kF4AUW2ujARiAJbBoeEmAq0QAT1wkiAMTz8S8ClIBc0HgQIhR8AJToAvhhOhIMAAoiiALxIhoJAB6kVMBElSZsNOg2YiVjYcXgEhETEJaQgwEEpoAF5oAJJDHy4IRhwSdgBCWPiSCn1OEzNwKGgAYW1kJSdXZQoPRBR0TlC+QWFRcXgpGXlFZvVoADM4iBIkiamSTj96JhZ2Tmwu8N6ogelgAAsCGnBSABVJHI0AcgowPGQr6AAfaCuAW34QB+fXgHd9-ikK7pdbQLI5diTEDTUrYcoYDAAemR0AAtOjgIwiOjURhxox4OR+LRqHUlABFRhxQGSar7MjINg0Aj1EgaWospT6DRaHR6DrYGyMPDwaAAWTARH2ADo8GAVAQ3mxDAA+aAABmlAEZTAj8YSiMTRRA2shKdSiLT6Sg2CavBpPChuZptLp5QLoPxxtBbabPf55cASARvRzWYYhSLSZySOaBJa6QzfV5YU5oTNI6KJVLZfLxErVRrtQA2aAo-CyeyOYCQBZGIA'>Try</a></div></pre>\n<p>We can see that the <code>snackQualityCheck</code> even calls <code>cookieQualityCheck</code>. It can do everything <code>cookieQualityCheck</code> can do <em>and more</em>.</p>\n<p>Our quality control employees go through a process where they check some quantity of food products, and then put them into the appropriate packaging machines we discussed above.</p>\n<p>Let’s represent this part of our process as a function which takes a bunch of <code>uncheckedItems</code> and a <code>qualityCheck</code> callback as arguments. This function returns a bunch of inspected food products (with those that didn’t pass inspection removed).</p>\n<p>We’ll call this function <code>PrepareFoodPackage&#x3C;T></code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// A function type for preparing a bunch of food items</span></div><div class='line'><span style=\"color: #6E7781\">// for shipment. The function must be passed a callback</span></div><div class='line'><span style=\"color: #6E7781\">// that will be used to check the quality of each item.</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PrepareFoodPackage&lt;T> = (uncheckedItems: T[], qualityCheck: (arg: T) => boolean) => T[]' >PrepareFoodPackage</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type PrepareFoodPackage&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) uncheckedItems: T[]' >uncheckedItems</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type PrepareFoodPackage&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">[],</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) qualityCheck: (arg: T) => boolean' >qualityCheck</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type PrepareFoodPackage&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type PrepareFoodPackage&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEEFQMwVwOwMYBcCWB7OokE8AOBTaNAJ1F2P1wENiU4BzUK0AI3gQAtQ0oi0ATUCiT4AtgGcAUCCKlxHFLlH44SAHSgAKh0KxEqDKFExxSVoWrjx+QcwRUANg5ZUEAa2lgkHKmYDuKE7moCY2WGignPjuWDqgAI4wjsLY3Lz4rlzCYmqSOASgAAoU1BQAYmgCha5uVPT4ADyaAHygALygABSSoCGIOu42AJIiEgBcWgDaALoAND0JSQ4pAMIDbhOdNPQTmgCU7a0slQ4ZcJIHba2aM0A'>Try</a></div></pre>\n<p>Let’s create two of these <code>PrepareFoodPackage</code> functions</p>\n<ul>\n<li><code>prepareSnacks</code> - Can prepare a bunch of different snacks for shipment</li>\n<li><code>prepareCookies</code> - Can prepare <em>only</em> a bunch of cookies for shipment</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Prepare a bunch of snacks for shipment</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let prepareSnacks: PrepareFoodPackage&lt;Snack>' >prepareSnacks</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PrepareFoodPackage&lt;T> = (uncheckedItems: T[], qualityCheck: (arg: T) => boolean) => T[]' >PrepareFoodPackage</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">  (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) uncheckedItems: Snack[]' >uncheckedItems</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) callback: (arg: Snack) => boolean' >callback</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) uncheckedItems: Snack[]' >uncheckedItems</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;Snack>.filter(predicate: (value: Snack, index: number, array: Snack[]) => unknown, thisArg?: any): Snack[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) callback: (arg: Snack) => boolean' >callback</data-lsp>)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Prepare a bunch of cookies for shipment</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let prepareCookies: PrepareFoodPackage&lt;Cookie>' >prepareCookies</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PrepareFoodPackage&lt;T> = (uncheckedItems: T[], qualityCheck: (arg: T) => boolean) => T[]' >PrepareFoodPackage</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span></div><div class='line'><span style=\"color: #24292F\">  (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) uncheckedItems: Cookie[]' >uncheckedItems</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) callback: (arg: Cookie) => boolean' >callback</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) uncheckedItems: Cookie[]' >uncheckedItems</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;Cookie>.filter(predicate: (value: Cookie, index: number, array: Cookie[]) => unknown, thisArg?: any): Cookie[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) callback: (arg: Cookie) => boolean' >callback</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1oAcBOA9gC4CmwpAJtMAfBEXgK7kF4AUW2ujARiAJbBoeEmAq0QAT1wkiAMTz8S8ClIBc0HgQIhR8AJToAvhhOhIMAAoiiALxIhoJAB6kVMBElSZsNOg2YiVjYcXgEhETEJaQgwEEpoAF5oAJJDHy4IRhwSdgBCWPiSCn1OEzNwKGgAYW1kJSdXZQoPRBR0TlC+QWFRcXgpGXlFZvVoADM4iBIkiamSTj96JhZ2Tmwu8N6ogelgAAsCGnBSABVJHI0AcgowPGQr6AAfaCuAW34QB+fXgHd9-ikK7pdbQLI5diTEDTUrYcoYIgXGbWEg4O4kOTaCiWLxgADmJAAPKcAHyzDjYRjwA5kZDFACSpDeEA0pwA2gBdAA0nAAjow4oDJNV9rSNGw7njWYZEmStDo9BgZWT2RyMBhxlTyPxaNQ6koAIoCgSIkW0tg0Aj1EgaWpWpT6DTy3RgeAdbA2Rh4N0AWTARH2ADo8K7xG82IYyQAGQMARlM6s11KIOrdEDayCNgtNopQbHTXg0nhQjs02hdboy-HG0HzGeg-H8ruAJAINbt1sMnu9evtJCzJuFueQda8sKc0Jm3d9-qDIZUBHDkegMdjADZoAB6Te4Gz2RzASALEzq7c7gC0l+AjCIl-PGG30BRaJE0DAmi1+2gbbBGZg41YMEARwN5lCIDBdCIXdUXRYtkBZJ8RBfDEsRxFB8SJOCyWSTg2E-WkGSZCAuWoOIQB4MckjJfCUEIkhmUDcZPlIdhDxAcix1PHdn3RN8P2pL8f0ta1-0AiBgNA+BwMg6DkI7JQEJ4kRMQIbFcQJQl5JIbDoFwmi6QoRl6OI0j2IoksqOgfS6IYpiilYsjzOQfQgA'>Try</a></div></pre>\n<p>Finally, let’s examine type-equivalence in both directions</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// NOTE: strictFunctionTypes = false</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const cookies: Cookie[]' >cookies</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;milk&apos;</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;white&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const snacks: (Pretzel | Cookie)[]' >snacks</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Pretzel(salted?: boolean): Pretzel' >Pretzel</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;milk&apos;</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;white&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareSnacks: (uncheckedItems: Snack[], qualityCheck: (arg: Snack) => boolean) => Snack[]' >prepareSnacks</data-lsp></span><span style=\"color: #24292F\"> (<data-lsp lsp='const cookies: Cookie[]' >cookies</data-lsp>, <data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp>)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareSnacks: (uncheckedItems: Snack[], qualityCheck: (arg: Snack) => boolean) => Snack[]' >prepareSnacks</data-lsp></span><span style=\"color: #24292F\"> (<data-lsp lsp='const snacks: (Pretzel | Cookie)[]' >snacks</data-lsp>,  <data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp>)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareCookies: (uncheckedItems: Cookie[], qualityCheck: (arg: Cookie) => boolean) => Cookie[]' >prepareCookies</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const cookies: Cookie[]' >cookies</data-lsp>, <data-lsp lsp='function snackQualityCheck(snack: Snack): boolean' >snackQualityCheck</data-lsp> )</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChF7bJJQBlDWxANagA3s1ChisHNFLJSAE1CI8MWGmQ5YACjHiJaAEb0koWKVry89QhNKoEpDPOtUDOHPXMYAlCIC+zAFsHFwACmbQAF6k9KCkAB4yTly8-EKi4soYqurQmlrEhsaIpuaWGNagkAwyigC8oHBopL4ZepBoZNoAhNX0td66AUHsnKAAwu4C8KRxiY7yKXyCIrqFRiZmFlY2ZPYzTi40DEygDXSMLJkqTRrauuLrxaXbFTaIABY4yuwyRGRUADk8losAEgNAAB9QICALbwejgqEwgDuH3gMkBrQeVU6pG0FyYg3Ew2Y0BIs3CpGIoNIKHc8lCaVoAHNSAAefAAPjOoB04kwn1kAgUAEkZLDKKB8ABtAC6ABpdABHNAMDGEcYfYVULSgllUfC+Oo8tweLzMY082Vy5jMaiC6C4DBKKYzACKauM5K1wq0yhw01IVEmgZm3lc7k8tBdbQiaFgLoAsrRoB8AHSwGOWWFaXw8gAM6YAjIE7Q6sE68FVlgJPeqfdrBFpILWqKlBBHQGbo7HdPBqHzW2lQPBstAY4hSDhB6Gg7544nXWHSPXvZqmwIW7XiXFLqVoAnk6mM1mnDhc-nQEXiwA2UAgCQRaKxRAcFgBO2Pqk0sygWjdoKHygDONZpFw1CaFU6LELCjjQMwnjQE+1K0h2AhSj+tL0jgjLMmy7LoTyDS6FoQHCmKEqQAqSgMPQBhpFaoDkYIlGkJK6bUAiMjaG+9D0YxX5gFhf4AQYQEgYOAZBhBUGQDBcEYAhSEob+pBzjMmFmGpOF4YIrIchppDEaApEsSK8jiux1G0fxDGdmcPLmWxHFcf0+L+nR9kCIMzAgGAAC0QWIGg0BBQFflgAAcgA8vgACiVCqEgqCOs6-zkLyhIsKwNzLjJvIyroGCkCiExuqQWjAqC4LeEq4glWVRlVfCiJYvVoCNeVK5VWiGKkFizC2lkMBgYIXANEVDWlaAVJRDEWhNC0HVdc1cIIrVK0zWtfWYoMtqSKhZjoVw-oVTZ0kel6Gq+p2zCHWpJ1DrWNn5VdDYbsKgwPbSRmQGdK42cOghrjdm6gN4QA'>Try</a></div></pre>\n<p>In this example, we can see that <code>cookieCallback</code> and <code>snackCallback</code> seem to be interchangeable. This is because, in the code snippet above, we had the <code>strictFunctionTypes</code> option in our <code>tsconfig.json</code> turned off.</p>\n<p>Let’s look at what we’d see if we left this option turned on (recommended).</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// NOTE: strictFunctionTypes = true</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareSnacks: (uncheckedItems: Snack[], qualityCheck: (arg: Snack) => boolean) => Snack[]' >prepareSnacks</data-lsp></span><span style=\"color: #24292F\"> (<data-lsp lsp='const cookies: Cookie[]' >cookies</data-lsp>, <data-err><data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp></data-err>)</span></div><span class=\"error\"><span>Argument of type '(cookie: Cookie) =&gt; boolean' is not assignable to parameter of type '(arg: Snack) =&gt; boolean'.\n  Types of parameters 'cookie' and 'arg' are incompatible.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '(cookie: Cookie) =&gt; boolean' is not assignable to parameter of type '(arg: Snack) =&gt; boolean'.\n  Types of parameters 'cookie' and 'arg' are incompatible.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareSnacks: (uncheckedItems: Snack[], qualityCheck: (arg: Snack) => boolean) => Snack[]' >prepareSnacks</data-lsp></span><span style=\"color: #24292F\"> (<data-lsp lsp='const snacks: (Pretzel | Cookie)[]' >snacks</data-lsp>,  <data-err><data-lsp lsp='function cookieQualityCheck(cookie: Cookie): boolean' >cookieQualityCheck</data-lsp></data-err>)</span></div><span class=\"error\"><span>Argument of type '(cookie: Cookie) =&gt; boolean' is not assignable to parameter of type '(arg: Snack) =&gt; boolean'.\n  Types of parameters 'cookie' and 'arg' are incompatible.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '(cookie: Cookie) =&gt; boolean' is not assignable to parameter of type '(arg: Snack) =&gt; boolean'.\n  Types of parameters 'cookie' and 'arg' are incompatible.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let prepareCookies: (uncheckedItems: Cookie[], qualityCheck: (arg: Cookie) => boolean) => Cookie[]' >prepareCookies</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const cookies: Cookie[]' >cookies</data-lsp>, <data-lsp lsp='function snackQualityCheck(snack: Snack): boolean' >snackQualityCheck</data-lsp> )</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlDjVICgQJTZYdZLQAmAZgBYBWOogA2AQ0iRQAZQyjEAa1ABvOqFDFW0UslIATUIjwxYaZGwAUqterQAjYUlCxSo3XmGF1pVAlIZdHlS2ODjCLhgAlMoAvnSxIuKSAArO0ABepMKgpAAeWv6SMnKKKmqGGMam0BbEdg6ITi5uGB6gkKLCWvoAvNQmpFGl1pBoZLDmAITtnXoRVrHxYhKgAMIh8vCk2Xl+uoWyCspWtfaOzq7unmQ+m-6BoABmHZBbvU-CL1bllWbjVmoneqNC4tTyIAAWOEMYi0RDIVAA5LpRLB5AjQAAfUAIgC28GEaMx2IA7uD4FoEYN-m1RsxzO8XnM1As6NASFsUqRiCjSCgQroksVRABzUgAHnwAD5QL1LGpMBDtPI9ABJLQ4jj4ADaAF0ADRWACOaA65MIK3BSqo5hRwqo+Ci3WlwVC4Tojul2p1dDoDwV0FwGAM602AEUTQ42RaleZDDgNqQqGt45sIkEQmFREGhqk0LAgwBZUTQcEAOlgWbcOPMUWlAAZSwBGOI+v1YAN4NoHeTh01Ry0KcyQbtUIoKNOgF2Z7NWeAPUBD7ugeAVaBZxCkHDz5MJqK5-PBlOkXuR80D+SL4pM7IfLb7wvFssV-w4au10ANxsANlAjA03gyLJEHEehYh9RhOW5ZxQFEScFXBUAty7YpJAeNg2jJYgcT8aA6DCaB1GcKDSDHeQOEgnk+RwAUhVFMVSOlWV4KVVV1UgPUDA6YRbCvGVpWYhRWNIDVSwefEtHGYDhG4q9wLACjoNg2x4MQ+c4wTVD0MgTDsIwXD8MIrkeR3TZyKIyj+UFBQRXFEzSEYhcBOVXQ1WE9jOOknjxz40AnKEkSxJmSSuK8+Q5m+Aj1NMmVQC1KwMFIYlVhDUhzCRFE0QiA01ASpK7LSvECUpbLQFy5KjzS0lyVISk6G9CLkIUSRejinLEtATl0kycwaAGEqyvy3F8Uy-r2sGqqKTmb0QDAABaebEDQaB5tmhgwAAOQAeXwABRKhjCQVB-UDOFyBi3qfX-YjSMkWMUvcqLjwjM1o3HOgrp5G6F2HFCOMPBMTxe885g+5w7MgO6j3cn6FEB-slVACIgA'>Try</a></div></pre>\n<h2 id=\"what-variance-helpers-do-for-you\" style=\"position:relative;\"><a href=\"#what-variance-helpers-do-for-you\" aria-label=\"what variance helpers do for you permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What variance helpers do for you</h2>\n<p>There are two reasons to use variance helpers in your code</p>\n<ul>\n<li>If you have recursive types in your project, these hints allow TypeScript to type-check significantly faster. Behinds the scenes, the compiler gets to skip a bunch of work, if it knows that a typeParam is purely <code>in</code> or <code>out</code>.</li>\n<li>It allows you to encode more of your intent, and (where useful) catch any changes to variance <em>in the interface declaration</em> instead of at the places where the interface is used.</li>\n</ul>\n<p>Here’s a comparison of the error experiences, with and without the variance helpers.</p>\n<p>Here’s our working state for <code>Packager&#x3C;T></code> again</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQAHeAF0jy4BNQ8cSog7QArjwQAKZizZiARgQCWeUNEhFeQggE82kDgDFoyyJV57UCuHAKbKASkYBfHG8IkyAYVu0zoJAAHlwWZFQ09EwsrIoqahpaOvqshiZmFlagAGZEBIiQoAC8OXkFsoLCohIc0rIxcarqmtqUegIAFnCCxFwAKrqpqADkvETQtMOgAD6gwwC2ygSTM3MA7h3KXMPO0XKIYqnQUrn5kI6ybm4gYAC093hiHPe3ODjKlFzQuXiFAAqRIgAcxgAB4+gA+RiyViAkGoKRbSDzVB9ZxFKEANzgyl4AG53G97BxQIhqHQAXRgTAAISoSm0anQUEROgQnDEgR+MwMpn0uFg3xwfyQKElMmRXkg6BAA'>Try</a></div></pre>\n<p>And let’s change <code>Packager&#x3C;T></code> so that it becomes invariant on <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-err><data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span></div><span class=\"error\"><span>Type 'Packager&lt;Snack&gt;' is not assignable to type 'Packager&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Packager&lt;Snack&gt;' is not assignable to type 'Packager&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQAHeAF0jy4BNQ8cSog7QArjwQAKZizZiARgQCWeUNEhFeQggE82kDgDFoyyJV57UCuHAKbKASkYBfHG8IkyAYVu0zoJAAHlwWZFQ09EwsrIoqahpaOvqshiZmFlagAGZEBIiQoAC8OXkFsoLCohIc0rIxcarqmtqUegIAFnCCxFwAKrqpqADkvETQtMOgAD6gwwC2ygSTM3MA7h3KXMPO0XKIYqnQUrn5kI6ybm4gYAC093hiHPe3ODjKlFzQuXiFAAqRIgAcxgAB4+gA+RiyViAkGoKRbSDzVB9ZxFKEANzgyl4AG4YfBeBJIAj0VC+gS3Dh7BxQIhqHQAXRgTAAISoZm0VnQUEROgQmmGAR+MxcnmcuFg3xwfyQKElBmRcUg6BAA'>Try</a></div></pre>\n<p>Finally, we’ll add that <code>in</code> keyword</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line highlight'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;in T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><span class=\"error\"><span>Type 'Packager&lt;super-T&gt;' is not assignable to type 'Packager&lt;sub-T&gt;' as implied by variance annotation.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'super-T' is not assignable to type 'sub-T'.</span><span class=\"code\">2636</span></span><span class=\"error-behind\">Type 'Packager&lt;super-T&gt;' is not assignable to type 'Packager&lt;sub-T&gt;' as implied by variance annotation.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'super-T' is not assignable to type 'sub-T'.</span><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;in T>.package: (item: T) => void' >package</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: in T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Packager&lt;in T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Packager&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;in T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePackager: Packager&lt;Cookie>' >cookiePackager</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Packager&lt;in T>' >Packager</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPackager: Packager&lt;Snack>' >snackPackager</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYDMGBQBjAGwENFFQBlAO2PwGtQBvXUUAB3gBdJ9uATUPjhVEnaAFdeCABQtW7cQCNCAS3yhokYn2GEAnu0icAYtBWQqffakVw4hLVQCUTAL653RUuQDCduuagkAAe3Jbk1LQMzKxsSqrqmtq6BmxGpuaW1qAAZsSEiJCgALy5+YVyQiJikpwycrHxahpaOlT6ggAWcEIk3AAqemmoAOR8xNB0I6AAPqAjALYqhFOz8wDunSrcIy4x8ojiadDSeQWQTnLu7iBgALQP+OKcD3e4KlTc0Hn4RQAKUWIAHMYAAeD6gfoAPiYcjYgJBqGk20gC1Q-RcxRhADc4Co+ABuOHwPiSSBIzEw-pE9y4BycUCIGj0AH0YEwACEqFZdHZ0FBkXoULpRkE-nMPL53IRYL8cACkBhpSZUUlIOgQA'>Try</a></div></pre>\n<p>The error is surfaced at <code>Packager&#x3C;T></code>’s declaration site, and is articulated in terms of violating a variance constraint, not the resultant type-checking error that arises from the call site which <em>requires covariance in order to compile</em>.</p>","tableOfContents":"<ul>\n<li><a href=\"#covariance\">Covariance</a></li>\n<li><a href=\"#contravariance\">Contravariance</a></li>\n<li><a href=\"#invariance\">Invariance</a></li>\n<li><a href=\"#bivariance\">Bivariance</a></li>\n<li><a href=\"#what-variance-helpers-do-for-you\">What variance helpers do for you</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v2/11-covariance-contravariance/"},"frontmatter":{"title":"Variance over type params","course":"intermediate-v2","date":"October 25, 2023","description":"Unlock the mysteries of type relationships with a deep dive into covariance, contravariance, and invariance. Learn how these concepts shape type systems, enhance code safety, and influence design decisions in TypeScript projects.\n"}}},"pageContext":{"slug":"/course/intermediate-v2/11-covariance-contravariance/","title":"Variance over type params","course":"intermediate-v2","order":11,"previous":{"fields":{"slug":"/course/intermediate-v2/10-type-registry-revisited/"},"frontmatter":{"title":"Type registry: revisited","order":10,"course":"intermediate-v2","isExercise":null}},"next":null}},
    "staticQueryHashes": ["2785745750","2841359383"]}