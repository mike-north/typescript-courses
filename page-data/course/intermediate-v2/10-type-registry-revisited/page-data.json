{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/10-type-registry-revisited/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"dbaae3cd-418f-57ef-811d-780476233825","excerpt":"In TypeScript Fundamentals v4: Type queries we studied a use case around building a data layer. We’ve covered a couple of concepts in Intermediate TypeScript v…","html":"<p>In <a href=\"../../fundamentals-v4/09-type-queries/index.md#indexed-access-types\">TypeScript Fundamentals v4: Type queries</a> we studied a use case around <em>building a data layer</em>. We’ve covered a couple of concepts in Intermediate TypeScript v2 that will come in handy! Let’s pick up where we left off and finish the job.</p>\n<p>Let’s set the stage again.</p>\n<p>Imagine we’re building a data library for a web applications. Part of this task involves building a function that fetches different types of records from a user’s API. We want to be able to retrieve a record by the name of the kind of record and its ID, <strong>but as the builders of the library, we don’t know the specific types that any given user will need</strong>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Assumption -- our user has set up resources like Book and Magazine</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">// returns a Book</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"bk_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\">// returns a Magazine</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"mz_456\"</span><span style=\"color: #24292F\">)</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">// maybe should refuse to compile</span></div><div class='line'><span style=\"color: #8250DF\">fetchRecord</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"blah\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">)</span></div></code></div></pre>\n<p>Our project (in our course notes) has a file structure like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">data</span><span style=\"color: #CF222E\">/</span></div><div class='line'><span style=\"color: #24292F\">  book.ts       </span><span style=\"color: #6E7781\">// A model for Book records</span></div><div class='line'><span style=\"color: #24292F\">  magazine.ts   </span><span style=\"color: #6E7781\">// A model for Magazine records</span></div><div class='line'><span style=\"color: #24292F\">lib</span><span style=\"color: #CF222E\">/</span></div><div class='line'><span style=\"color: #24292F\">  registry.ts   </span><span style=\"color: #6E7781\">// Our type registry, and a `fetchRecord` function</span></div><div class='line'><span style=\"color: #24292F\">index.ts        </span><span style=\"color: #6E7781\">// Entry point</span></div></code></div></pre>\n<p>You can find it in <code>packages/intermediate-ts-v2/src/10-type-registry-revisited</code>.</p>\n<p>The <code>lib/registry.ts</code> file looks like</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// empty by design</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// the \"& string\" is just a trick to get</span></div><div class='line'><span style=\"color: #6E7781\">// a nicer tooltip to show you in the next step</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: never' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">) {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBASwHY2FAZgQwMbDgEUxkwBUBPMYAJWAHMEBnGKMuAbwCg44B6HuYAFswMVgCNWAE2AMEtJBwC+HPnBgALPACIAZHCZRktLYgZwAVgFcmcTGsPYA1mohxawGCv52kCXFBcIABsYBDAXfXUIAHc4MghLRCQ1TTgkUHgmYDAOUEhYOHRLJGxQiGT0D2x1GmxoSQAKLlsoWgAuOEdgePQCIlIKajpGZlY9AyMAGmaESQ6JpFppgEp2RSA'>Try</a></div></pre>\n<p>You may recall that our <code>book.ts</code> and <code>magazine.ts</code> files look like this</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: data/book.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Book' >Book</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Book.deweyDecimalNumber(): number' >deweyDecimalNumber</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">42</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"../lib/registry\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataTypeRegistry.book: Book' >book</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Book' >Book</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: data/magazine.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Magazine' >Magazine</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Magazine.issueNumber(): number' >issueNumber</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">42</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"../lib/registry\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataTypeRegistry.magazine: Magazine' >magazine</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Magazine' >Magazine</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKW0BGwAneAc2gGcAXAgTwDoKyAoeADwAcB7Ai0aRC+AUjIAxvFAARZBWQAVam3gAlEuSrVGAbwC+zdlx6QArohEVoHRKEjwKIgBYqRXACYAKZAWJYA1vGockJLScgrKqpQ0oABkoJF8xAA0vC5Y8YjEAJSgOowgYAC0RSJGFEUFeWBQcEhomKAuIcC4HBw+9EysnNygIrDIZGSgAEKtPjmMoA3wAO7+EvAi0KjIsAByRqi4gm6ZWIib2wQTU1NEFEYEVgAsAEyToLq6Lov9RKCoHC5GCKAARLRaMAcPgiKRItQ-idQF0DLx+IJhGJgjJ5IoVOD1NCpi02lhRm0Hk9KhAYAgUOgsI0ZMAVsRkAAvPjwDp6bo8PoDIYAWWQ9KZiHEmge5DIRngGy2Oz2oAOUuOwtOoHOlxu9ymxJenPen2+vwBQJBhAi6ihiph+h6fAEQlE4ikqLCGLUUXNUzpjOZWF5-OZRMY2iAA'>Try</a></div></pre>\n<p>and as a result, the <code>keyof DataTypeRegistry</code> type started to show <code>\"book\" | \"magazine\"</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> {<data-lsp lsp='(alias) function fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp>, <data-lsp lsp='(alias) interface DataTypeRegistry&#10;import DataTypeRegistry' >DataTypeRegistry</data-lsp>} </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;./lib/registry&apos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Foo = \"book\" | \"magazine\"' style='border-bottom: solid 2px lightgrey;'>Foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">keyof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(alias) interface DataTypeRegistry&#10;import DataTypeRegistry' >DataTypeRegistry</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Foo = \"book\" | \"magazine\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKW0BGwAneAc2gGcAXAgTwDoKyAoeADwAcB7Ai0aRC+AUjIAxvFAARZBWQAVam3gAlEuSrVGAbwC+zdlx6QArohEVoHRKEjwKIgBYqRXACYAKZAWJYA1vGockJLScgrKqpQ0oABkoJF8xAA0vC5Y8YjEAJSgOoyMIBAwCCjoWC4hwLgcHD70TKyc3KAisMhkZKAAQtU+OYygoC7wAO7+EvAi0KjIsAByRqi4gm6ZWIgLSwR9AwNEFEYEVgAsAEz9oLq6Qy2e4qgcLkYIoABEtLTAOPhEpJHUL9tQA0DLx+IJhGJgjJ5IoVL91ICBlUalhujVzpd8mAoHAkGhMIMKtNiMgAF58eB1PSNHg3dqgACyyBJ5MQ4k053IZCM8Hmi2Wq1A635Ww5O1AewOxzOA0x11aRFA90ezzeHy+hAi6gBYqB+iafAEQlE4ik0LCcLUUV1A2JZIpWCZLIpGMYugKOOK+KwfCGLCpIDAAFoQyIjBQQ0HGFMaTkbHZHBNXMkzaFYVqaNprAQOKhQABydV4TXwmj5vIUMKgABi1VAAF5QH4AkFUzDwqXqDE4lQEljxQA9AD8QA'>Try</a></div></pre>\n<p>Now our task is to use a mapped type, to make <code>fetchRecord</code> return a <code>Promise</code> that resolves to the correct type. While we’re at it, let’s</p>\n<ul>\n<li>make a <code>fetchRecords</code> function that fetches an array of records (of a single type)</li>\n<li>ensure that when records of type <code>book</code> are fetched, their IDs begin with <code>\"book_\"</code> (and <code>\"magazine_\"</code> for records of type <code>magazine</code>)</li>\n</ul>\n<p>The desired outcome is to get this piece of code to type-check.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) function fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp>, <data-lsp lsp='(alias) function fetchRecords(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecords' >fetchRecords</data-lsp> } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;./lib/registry&apos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myBook: void' >myBook</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"book_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myMagazine: void' >myMagazine</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"magazine_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myBookList: void' >myBookList</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecords(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecords' >fetchRecords</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, [</span><span style=\"color: #0A3069\">\"book_123\"</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myMagazineList: void' >myMagazineList</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecords(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecords' >fetchRecords</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, [</span><span style=\"color: #0A3069\">\"magazine_123\"</span><span style=\"color: #24292F\">])</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">//@ts-expect-error</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"booooook_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">//@ts-expect-error</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecord(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecord' >fetchRecord</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"mag_123\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">//@ts-expect-error</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecords(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecords' >fetchRecords</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"book\"</span><span style=\"color: #24292F\">, [</span><span style=\"color: #0A3069\">\"booooook_123\"</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">//@ts-expect-error</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) fetchRecords(arg: keyof DataTypeRegistry &amp; string, id: string): void&#10;import fetchRecords' >fetchRecords</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"magazine\"</span><span style=\"color: #24292F\">, [</span><span style=\"color: #0A3069\">\"mag_123\"</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWdOB2ADgCgQIAzASwBtIA7AQwFtJUaqAjYaSAcyqIALtACeAOiGISkAB4AHBENBV6QmBUYBjSKAAijIYwAqo+ZABK-QSNEkA3gF8ZCpaAoBXelqFU49d0ghLQALKy0EABMACkZoPlQAa0hROAp9QxMzS2thMVAAMlA81T4AGhVI1BL6PgBKUCcXRWhlT29ff0DgsMgI6EjEWPiklLSMo1NzKwE80ULikVKKqirF6FKGprIwcGo6JlZUSMzgTjg4RMlpORblLRpGRERQACELxMaSUFBIyAB3FJ6PpUZiMGgAOQ8zE4MGidVQ9GhsOgXx+P14Qg80ACWDQ31AzmcfwecV0zDgkQ8dFAACJxOJgBxuLxZrZaWjQLc3Kp1NBNDoJllprlbJyfudLqh3pcCUSdpRaAwWGxfqcwXxGAAvVSQa7NNyk56gACyjE1OvounsBMEiA8kChMLhCNASOdqJt6NAmOxuPxP3lJMevFAFKpNPpjOZPFFYg5Xq5rlaKjUGm0ugMk2yMxs+UTPw12t1qDNFt1cpIznIeyVh1Vqj+sn1IDAAFoO1oPEIO22SKC7o1uqFwlEKhQgiO+lEXo53PBmKAAOTRrixtliJckEhPUTedxeHx+AJg1Tw8WgCL0YRh0Qyz4AXlAjH+jCobUnvX6MVpksStIqX8PgAfQARkwWk6gJH4rxvZhRDLYsrVAJ8XzfD8elHAZolpItLUgAC6Tw3UwIgqDvVg5R4PvAAZGwUOfV932HL8Zxwv9CIAbSAy5SIwWkAF1yPRSjb0Q-C6JvVCmIwqdvyGXDzSQgiKm44irT4wSoOg0AQHAKQ21uPoexgeBoB0idMOnbCeP-QDJQuEDwP44Sfj0gyjJ8QzYAQCzPywn91JUojzU01zdOAfTEEMhRjO8sy-Ks+T2I+LieMc3jnK0nT3OizyTJ88zvUsuS2MU8srTSjVNKEqsgA'>Try</a></div></pre>\n<p>A starting point, containing this code (which will fail to compile once we uncomment it) is in <code>notes/intermediate-ts-v2/src/10-type-registry-revisited/index.ts</code>. <em>Everything</em> we need to change (aside from the un-commenting) in order to make this work is in <code>lib/registry.ts</code>.</p>\n<p>Let’s begin!</p>","tableOfContents":"","fields":{"slug":"/course/intermediate-v2/10-type-registry-revisited/"},"frontmatter":{"title":"Type registry: revisited","course":"intermediate-v2","date":"October 25, 2023","description":"Unlock the mysteries of type relationships with a deep dive into covariance, contravariance, and invariance. Learn how these concepts shape type systems, enhance code safety, and influence design decisions in TypeScript projects.\n"}}},"pageContext":{"slug":"/course/intermediate-v2/10-type-registry-revisited/","title":"Type registry: revisited","course":"intermediate-v2","order":10,"previous":{"fields":{"slug":"/course/intermediate-v2/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","order":9,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/11-covariance-contravariance/"},"frontmatter":{"title":"Variance over type params","order":11,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}