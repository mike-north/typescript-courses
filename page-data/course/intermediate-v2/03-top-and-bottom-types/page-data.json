{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/03-top-and-bottom-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"d31e46c5-5586-5b99-be57-75ceea9e779b","excerpt":"Type systems often have types representing the largest and smallest possible sets of values. These are called top and bottom types. Top types A top type (symbol…","html":"<p>Type systems often have types representing the largest and smallest possible sets of values. These are called top and bottom types.</p>\n<h2 id=\"top-types\" style=\"position:relative;\"><a href=\"#top-types\" aria-label=\"top types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top types</h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Top_type\">top type</a> (symbol: <code>⊤</code>) is a type that describes <strong>any possible value allowed by the system</strong>.\nTo use our set theory mental model, we could describe this as representing the set <code>{ any possible value }</code></p>\n<p>TypeScript provides two of these types: <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any\"><code>any</code></a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown\"><code>unknown</code></a>.</p>\n<h3 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h3>\n<p>You can think of values with an <code>any</code> type as “playing by the usual JavaScript rules”.</p>\n<p>Here’s an illustrative example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: any' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Download some more ram\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>.<data-lsp lsp='(property) document: Document' >document</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBDAdgTwgXggBYAoGEBZEfCAIgBEB7Ad02AfQBMIBnBgWyp8GAJyrD0fGqThJQ1JvEwdmAOmUBjAK4DMYaeVlUC3cABV4AhprBA'>Try</a></div></pre>\n<p><code>any</code> typed values provide none of the safety we typically expect from TypeScript.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: any' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">14</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: any' >flexible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>it</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>is</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>possible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>to</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>access</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>any</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>deep</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>property</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBDAdgTwgXggEYAWAKBhAWRADp4w6BnGgBwHtHGlQaw2b0AY0EhOAnDQAmIEC1YAnNixDyw2UgHoNEHbr37dAPQD8QA'>Try</a></div></pre>\n<p>It’s important to understand that <code>any</code> is not necessarily a problem — sometimes\nit’s exactly the right type to use for a particular situation.</p>\n<p>For example, <code>console.log</code>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' style='border-bottom: solid 2px lightgrey;'>log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>, </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor' >Promise</data-lsp></span><span style=\"color: #24292F\">, <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp>, </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(method) Console.log(...data: any[]): void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgziA2CmB00QHMAUB3AlmAJidANAAQAKATiALaYSzG0AuAKppbCAK4PEBEAZiBA8AlACgA9OKLSZRAHoB+IA'>Try</a></div></pre>\n<p>We can see here that <code>any</code> is not always a “bug” or a “problem” — it just indicates <em>maximal flexibility</em> and <em>the absence of a need to type-check before using the value</em>.</p>\n<h3 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code></h3>\n<p>Like <code>any</code>, unknown can <em>accept</em> any value that is possible to create in JavaScript:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let flexible: unknown' >flexible</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Download some more ram\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var window: Window &amp; typeof globalThis' >window</data-lsp>.<data-lsp lsp='(property) document: Document' >document</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let flexible: unknown' >flexible</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number' >setTimeout</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAZqAeCWAjUAuCBXAdga0wewHdMIBeCAFgCgYQFkRSIAiAEUM2DwEMATCAZzwBbBkLwAnBuK5Cm1OElCMC8TD0IA6dQGN0IzGHm1FDMv3AAVeCLzowQA'>Try</a></div></pre>\n<p>However, <code>unknown</code> is different from <code>any</code> in a very important way:</p>\n<blockquote>\n<p>Values with an <code>unknown</code> type cannot be <em>used</em> without first\napplying a type guard</p>\n</blockquote>\n<p>Sometimes people refer to this property of <code>unknown</code> by describing it as “opaque”.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">14</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>it</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>is</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>possible</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>to</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>access</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>any</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>deep</data-lsp>.<data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>property</data-lsp></data-err></span></div><span class=\"error\"><span>'myUnknown' is of type 'unknown'.</span><span class=\"code\">18046</span></span><span class=\"error-behind\">'myUnknown' is of type 'unknown'.</span><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// This code runs for myUnknown = { all possible values }</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"string\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// This code runs for myUnknown = { all strings }</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myUnknown: string' style='border-bottom: solid 2px lightgrey;'>myUnknown</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let myUnknown: string</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUnknown: unknown' >myUnknown</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"number\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// This code runs for myUnknown = { all numbers }</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myUnknown: number' style='border-bottom: solid 2px lightgrey;'>myUnknown</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let myUnknown: number</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myUnknown: unknown' style='border-bottom: solid 2px lightgrey;'>myUnknown</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let myUnknown: unknown</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// this would run for \"the leftovers\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//       myUnknown = { anything except string or numbers }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsBGUOAOABgBYA2AKABtIAXUAWwE8BVAOwGs24B3N1AK6dufUAF58JCs3ZdebAHQBLWssQKADnESIlAIxoLacBQEMAxucg6zbJgoAmkSBs3wNMWkwohQf-wEAegD8FD5gACoAFkqIoOZwTqDQQnEAZgiMrMLy4qAA3qCmVFSgWjr6NKAAbsUC1qAAvhRKaaAAFF4ecG0yOaJig6AARIi00EpsAObDAJQFFH6+0bHxiZDJqaAZ0FmyImx5hcWlYxPTcc1+fXJ8i6C+QaGNoJBUiButHV2QPXv9h0GEmGbAEDD0MDmCyWkRicQSSRSbHSmRuByORRKoFB4Jgl3uaPk90e-hCFBebw+0P+tzY4VAZJhoFocNAPDgAioDk2hx2IxZGxoaWM1Txw2JYAC12ytIxpjsLMmU1eAA8rBp6GclaBMjiIUgmuSgA'>Try</a></div></pre>\n<p>TypeScript doesn’t (yet) have the ability to articulate a concept like “anything except a number or a string”, so you may notice that the <code>else { }</code> block at the end still has <code>myUnknown</code> as type <code>unknown</code>.</p>\n<h3 id=\"practical-use-of-top-types\" style=\"position:relative;\"><a href=\"#practical-use-of-top-types\" aria-label=\"practical use of top types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Practical use of top types</h3>\n<p>You will run into places where top types come in handy <em>very often</em>. In particular,\nif you ever convert a project from JavaScript to TypeScript, it’s very convenient\nto be able to incrementally add increasingly strong types. A lot of things will\nbe <code>any</code> until you get a chance to give them some attention.</p>\n<p><code>unknown</code> is great for values received at runtime (e.g., your data layer). By\nobligating consumers of these values to perform some light validation before using them,\nerrors are caught earlier, and can often be surfaced with more context.</p>\n<p>Another wise use of <code>unknown</code> is handling throwables in a <code>catch</code> block</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function doSomethingRisky(): string' >doSomethingRisky</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">)  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"ok\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Bad luck!\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Really bad luck\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function doSomethingRisky(): string' >doSomethingRisky</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='var e: unknown' >e</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='var e: unknown' >e</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var e: Error' style='border-bottom: solid 2px lightgrey;'>e</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>var e: Error</span></div><div class='line'><span style=\"color: #24292F\">  } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='var e: unknown' >e</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;string&apos;</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var e: string' style='border-bottom: solid 2px lightgrey;'>e</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>var e: string</span></div><div class='line'><span style=\"color: #24292F\">  } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// Last resort</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.error(...data: any[]): void' >error</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='var e: unknown' style='border-bottom: solid 2px lightgrey;'>e</data-lsp>)</span></div><div class='meta-line'><span class='popover-prefix'>                 </span><span class='popover'><div class='arrow'></div>var e: unknown</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFADMCukDGAXAS2klABNoBlaAWwFN8ALQyAcwCVCUBrATwAoAlKADeaUKEIZQ-ALIBDJgDp48yBRpDQAPlAAGJQFZhoeAyzxSAImjcr40HQA2KOpOlzFjFWo1bdBsagTEgA7qCQdOEISPD8VgBC8mSgTli43ACEVoIOzq7BjGGgVux08k5OvKAARsmp6XZoAL5oaPjw1WISFNT0TCwcXHxCLaC4iriMMnQAXKA43DChkMLd7jOSkCj4arh00NIxyGsOEnRoIBKgAHoA-A7Nji5uUjL4vAAOB9JuALwA0AAch28EGQNO10clzAEnuj2eBXWEiuABl5DtTHQUMh8GdxiQcU46Eo6IhkPw6LkrlDaXTbg8JK1mkA'>Try</a></div></pre>\n<p>It’s a good practice to always throw <code>Error</code> instances, but how sure are you that everything in your <code>node_modules</code> folder does the same? By typing the argument caught by the <code>catch</code> block as unknown, you’re effectively forcing yourself to handle these values in a more robust way.</p>\n<p>There’s a compiler flag <code>useUnknownInCatchVariables</code> that helps enforce this across a project, without requiring any explicit type annotation.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function doSomethingRisky(): string' >doSomethingRisky</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">)  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"ok\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Bad luck!\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Really bad luck\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">try</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function doSomethingRisky(): string' >doSomethingRisky</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">catch</span><span style=\"color: #24292F\"> (<data-lsp lsp='var err: unknown' style='border-bottom: solid 2px lightgrey;'>err</data-lsp>) {</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>var err: unknown</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFcGcFMFUB2BrRB7A7ogkogwgIYAuAxgBYBqBATgJYEBGANrNAFABmkiJRtaiUABM0AZTQBbWETK1EAcwBKtaMgCeACgCUoAN5tQoWh1AaAssTIA6agUQiJ20AD5QABisBWHaGrTI1IIARGjIQQagsExwRibmljZ2Dk6uHt6gMtSYoIiwGKAAotRZ1BpBAEIEQqBMkCTIAIRBWhFRMZnZQYqwBExMaqAMVTV1YWwAvmxsRNQD+oYi4lIyckoq6toToCTE5KawxTrzoCCGZ6AAegD8E0A'>Try</a></div></pre>\n<h3 id=\"almost-top-type-object\" style=\"position:relative;\"><a href=\"#almost-top-type-object\" aria-label=\"almost top type object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Almost top type: <code>object</code></h3>\n<p>The <code>object</code> type represents the set <code>{ all possible values except for primitives }</code>. Primitive value types in JavaScript are <code>{ string, number, boolean, Symbol, null, undefined, BigInt }</code></p>\n<p>It’s important to understand that this is <em>not quite</em> the same concept of the “object types” term used to describe shapes that <code>interface</code>s can model.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val: object' >val</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">object</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) status: string' >status</data-lsp>: </span><span style=\"color: #0A3069\">\"ok\"</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let val: object' >val</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"foo\"</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'object'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'object'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let val: object' >val</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><span class=\"error\"><span>Type 'null' is not assignable to type 'object'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'null' is not assignable to type 'object'.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='let val: object' >val</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"ok\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The type of this value cannot be modeled by an interface</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let response: {&#10;    success: string;&#10;    data: unknown;&#10;} | {&#10;    error: string;&#10;    code: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>response</data-lsp></span><span style=\"color: #CF222E\">:</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let response: {\n    success: string;\n    data: unknown;\n} | {\n    error: string;\n    code: number;\n}</span></div><div class='line'><span style=\"color: #24292F\">    { </span><span style=\"color: #953800\"><data-lsp lsp='(property) success: string' >success</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(property) data: unknown' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) error: string' >error</data-lsp></span><span style=\"color: #24292F\">: string, </span><span style=\"color: #953800\"><data-lsp lsp='(property) code: number' >code</data-lsp></span><span style=\"color: #24292F\">: number }</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) success: string' >success</data-lsp>: </span><span style=\"color: #0A3069\">\"ok\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) data: unknown' >data</data-lsp>: [] }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let val: object' >val</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let response: {&#10;    success: string;&#10;    data: unknown;&#10;}' >response</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUANwEM9U4AjAK0gGNiBeUAb1EULMIFcVQAIjgBrQaAC+OcnlCtBAMzhxB0inNAA7XnjxrZrABQBKOQD4ho1ThCgAKgAtIoQgE8ADs7gKXDgJaIpBS8zgxkmppwxNTOALZwACaQBAmg1K6g4aB+moQwCmQMkPhEoNCQiO5wmoiQyDZgoE2gAHoA-DjN7Jy8DEWIAlzQOQDmADSgCTxkqLyaIpEA7pqSnaAAPt0w8NCoQ6MTDIl1WryxMdCrXU2sHIi9-QLCYhNT3KgA2gC6q-oa5ZVqrUgA'>Try</a></div></pre>\n<h3 id=\"almost-top-type-\" style=\"position:relative;\"><a href=\"#almost-top-type-\" aria-label=\"almost top type  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Almost top type: <code>{}</code></h3>\n<p>The empty object type <code>{}</code> represents the set <code>{ all possible values, except for null and undefined }</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const stringOrNumber: string | number' >stringOrNumber</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let nullableString: string | null' >nullableString</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myObj: {&#10;    a?: number;&#10;    b: string;&#10;}' >myObj</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) a?: number | undefined' >a</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) b: string' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) b: string' >b</data-lsp>: </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\"> }</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let val2: {}' >val2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let val2: {}' >val2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"abc\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let val2: {}' >val2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let val2: {}' >val2</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const stringOrNumber: number' >stringOrNumber</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let val2: {}' >val2</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let nullableString: null' >nullableString</data-lsp></span></div><span class=\"error\"><span>Type 'null' is not assignable to type '{}'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'null' is not assignable to type '{}'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let val2: {}' >val2</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const myObj: {&#10;    a?: number;&#10;    b: string;&#10;}' >myObj</data-lsp>.<data-lsp lsp='(property) a?: number | undefined' >a</data-lsp></span></div><span class=\"error\"><span>Type 'number | undefined' is not assignable to type '{}'.\n  Type 'undefined' is not assignable to type '{}'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number | undefined' is not assignable to type '{}'.\n  Type 'undefined' is not assignable to type '{}'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGM4A7RAF1FOgEtCBzAeWgDkBXAWwCMZULqbQAfUITadooALygALDgA2kMsNmyAhu3kBlElVrdtvAUObKJR5fiKlQrAJ512AK1QBvHKFAqA-KmEcYb0HY9HRocAF9TZ0DUACIAMzg4GNAwnDT5MgA3FVk0FwjJGWzc0xi1PBicYrRTQkgAd1AAERUSSAAKAEoqnJrJHloGFj9oHpLJJVV1SC0Qsb7rO0cAOhUgA'>Try</a></div></pre>\n<p>Based on what we’re seeing here, <code>{} | null | undefined</code> is technically another top type, since now we’re back to a set of <code>{ all possible values }</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let withoutUndefined: {} | null' >withoutUndefined</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">37</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let withUndefined: {} | null | undefined' >withUndefined</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {} </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">38</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let anUnknown: unknown' >anUnknown</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"42\"</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let withoutUndefined: {} | null' >withoutUndefined</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let anUnknown: unknown' >anUnknown</data-lsp> </span><span style=\"color: #6E7781\">// ❌</span></div><span class=\"error\"><span>Type 'unknown' is not assignable to type '{} | null'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'unknown' is not assignable to type '{} | null'.</span><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let withUndefined: {} | null | undefined' >withUndefined</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let anUnknown: unknown' >anUnknown</data-lsp> </span><span style=\"color: #6E7781\">// ✅</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAdwEtCALOAV0IFUA7AE0gDMzHJnUBvAX1AAfUIxp48oALygMAdnxFSFSk1YcuPUAOGjxkkTRbtO3abIAci4gENGTANaM4JRqiNOXjcwCIALGg+OMHkVLQMxhpmMnaOzq6gIKCAMuQ4oaqRpszmsYyeCUmAoORAA'>Try</a></div></pre>\n<p>You can use the type <code>{}</code> in combination with the intersection type operator <code>&#x26;</code> to remove nullability from another type</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type NullableStringOrNumber = string | number | null | undefined' >NullableStringOrNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type StringOrNumber = string | number' style='border-bottom: solid 2px lightgrey;'>StringOrNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type NullableStringOrNumber = string | number | null | undefined' >NullableStringOrNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> {}</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StringOrNumber = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAcgrgGwQQwEYIgZWAJwJYB2A5gPI7wC2qEOUAvFAM66FFQA+UBcVNHXiBPzgEAJhABmhCKIDcAKFCQo2fMTKVqtBvCRoMq1hp5aoAMigBvAL7yA9HahOoAPQD8QA'>Try</a></div></pre>\n<h2 id=\"bottom-type-never\" style=\"position:relative;\"><a href=\"#bottom-type-never\" aria-label=\"bottom type never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bottom type: <code>never</code></h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Bottom_type\">bottom type</a> (symbol: <code>⊥</code>) is a type that describes <strong>no possible value allowed by the system</strong>.\nTo use our set theory mental model, we could describe this as a type representing the set <code>{ }</code> (intentionally empty).</p>\n<p>TypeScript provides one bottom type: <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#never\"><code>never</code></a>.</p>\n<p>At first glance, this may appear to be an <em>extremely abstract</em> and <em>pointless</em> concept, but there’s\none use case that should convince you otherwise. Let’s take a look at this scenario below.</p>\n<h3 id=\"exhaustive-conditionals\" style=\"position:relative;\"><a href=\"#exhaustive-conditionals\" aria-label=\"exhaustive conditionals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exhaustive conditionals</h3>\n<p>Let’s consider the following scenario:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"vroom\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"dragging something\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function obtainRandomVehicle(): any' >obtainRandomVehicle</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const neverValue: never' >neverValue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: never' >myVehicle</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABHARlAhjMAldYAmcAtgGoCmAFjBADZkAUAlAFyJ4CeiA3gFCKIAnMlBACkXAL5sAzmzDseEngHpViALSaIIKJvU9a6abIDC6Adz6J8AmADcGjS-34QE0uHQB0NOAHN6ACI7AThiQMYrJSVDY0QAFQEQCABrZ0QoOAB3JnTXd08yH38gm3Q-Pyw-RA8iYSowPwioxR4odgAHMkRyKlpugF4EpNTEAB9EMwEeHjooRCJ2Xuo6VmX+xCHUDCxcAmJ1uiYZtXiKbrIADwp0EGlYB0Q3AhhYBHQaHhhgRHpFw+6WHueAgZDgP0SyRSTl4-H+lBWRUyOScpxGKUUiDINGkgJ+fyWCI2QIwkDBPymMKs8L63hs9kciDUU0x2Nx6TUADkAKIASXiAAludgAIRWZ73RBgMgOAQkD4gMisaWyzYLQm0siKIA'>Try</a></div></pre>\n<p>Note the assignment in the last <code>else { }</code> block. This will only work if the type of <code>myVehicle</code> is type equivalent to <code>never</code>.</p>\n<p>Now, leaving the conditional exactly as-is, let’s add <code>Boat</code> as a vehicle type:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"vroom\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"dragging something\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Boat' >Boat</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Boat.isFloating(): boolean' >isFloating</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck | Boat' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Boat' >Boat</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Vehicle = Car | Truck | Boat' >Vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function obtainRandomVehicle(): any' >obtainRandomVehicle</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car | Boat' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-err><data-lsp lsp='const neverValue: never' >neverValue</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></span></div><span class=\"error\"><span>Type 'Boat' is not assignable to type 'never'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Boat' is not assignable to type 'never'.</span><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDgCMyBDCogJUaIBM4BbANUgALCiQA2kABQBKVBwCeoAN45QoaJDIFoNRQF9QjRAaJycunCDABaGyQJkbVnGMNGAwo2hKVoTtAoAbpJS3qqqJNSIcOIAdKJwAOYSAEQB8LzJUj7m5i6IRgAq0AQkANahoGRwAO7SFeGR0ZBxiSl+jAkJLAmgUTwawkQJmdlmzqKuoABCcIxkFRSIAGLxc911ymFqGlo0ZMWQo+ZkcgAOkKACwmIXALygRSXlAD6gHl6vM3M4OOLzPHIriJxKggTdQPd6EwWOwuLwweJpD8QA9BBdIAAPQSMAiIShBUARLgUSjURiiHAUPCgCQAhEXFh4jgkSBwamPMohTagOlCYHNKq1EIojmlMygSCiRAM6m0wF88GMpikVnU95cny866xPyBYKgFHvcWS6UVFEAOQAogBJAoACUtrAAhD4iXjQERIEFoHxyQRIKhPd6ITz5drDrogA'>Try</a></div></pre>\n<p>Effectively, what has happened here is that we have been alerted to the fact that\na new possibility for <code>Vehicle</code> has been introduced. As a result, we don’t\nend up with the type for <code>myVehicle</code> as a <code>never</code> in that final <code>else</code> clause.</p>\n<p>I recommend handling this a little more gracefully via an <strong>error subclass</strong>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class UnreachableError' >UnreachableError</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _nvr: never' >_nvr</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) message: string' >message</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// The exhaustive conditional</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Vehicle' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Truck' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Truck.tow(): void' >tow</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Truck</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='let myVehicle: Car | Boat' >myVehicle</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='let myVehicle: Car' >myVehicle</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.drive(): void' >drive</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// Car</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// NEITHER!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">throw</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor UnreachableError(_nvr: never, message: string): UnreachableError' >UnreachableError</data-lsp></span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    <data-err><data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></data-err>,</span></div><span class=\"error\"><span>Argument of type 'Boat' is not assignable to parameter of type 'never'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'Boat' is not assignable to parameter of type 'never'.</span><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">`Unexpected vehicle type: ${</span><span style=\"color: #24292F\"><data-lsp lsp='let myVehicle: Boat' >myVehicle</data-lsp></span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">  )</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaHAEYUCGVJASsyQCZwC2ANUgALKmQA2kABQBKVFwCeoAN55QoaJApFodZQF9QzREZIK8+vBOMmAws2gq1obtCoA3aTKfr1ZWohwkgB04nAA5lIARO7w-FEyzpaW1ogmACrQRGQA1j6gFHAA7rL5fgFBkKER0a7M4eFs4aCBfFqiJOEJSRZW4jagAEJwzBT5VIgAYmGjTaWqvhpaOnQUWZA9lhQKAA6QoEKiEvsAvKCZ2XkAPqD2jjfDo3h4kmN8Codikqifx6BnjBYbE4PH4v0ksjwIDAAFo4WQiBQ4TC+gMAKokTTMMjCZgMSQAUVgCFAkAAHhRIDwTET4I4FqB-CREGtsoVoFIAPokWKoEiQTzQAA0oDaaXqkFQLLcnW8DPUiCIew5YsQEsS6mSzxA52E+3JuKILI8+yZ3Co1FozHEeCoBFAUne4P2bBZXDIkDg9ouuTlzidIi+VUKJW8Op9OQspPEiBd9sdH0Df1dLHInvtdz96gDRxCrhNpR1dyjkBj+wZOoAcgSAJLpAASBPYAEJnBRhPAiqB+V2MVicXjCcSOc5s4nc5AhaPQAADDHkvaUSDcUCeCcFXaS0AAEmUOaD+hnzkS+iAA'>Try</a></div></pre>\n<p>Now, one of three things will happen in that final <code>else</code> block</p>\n<ul>\n<li>We will have handled every case before reaching it, and thus we will never enter the final <code>else</code> block</li>\n<li>We will catch upstream code changes that need to be handled in this conditional at compile time (e.g., adding the <code>Boat</code> case)</li>\n<li>If somehow an unexpected value “slip through” and is not caught until we actually run the code, we will get a meaningful error message</li>\n</ul>\n<p>Note that this approach works nicely with a <code>switch</code> statement, when the <code>UnreachableError</code> is thrown from the <code>default</code> case clause.</p>\n<h2 id=\"unit-types\" style=\"position:relative;\"><a href=\"#unit-types\" aria-label=\"unit types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit types</h2>\n<p>Unit types are types that represent a set of exactly one value. An example of this is a literal type</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let num: 65' style='border-bottom: solid 2px lightgrey;'>num</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">65</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">65</span><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// represents the set { 65 }</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let num: 65</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAdgrgtgLggNgKwQLwvRA9LiAJxAAdiBnEKMciMACxAksgG9sIBfAKHwggB6AfiA'>Try</a></div></pre>\n<p>Nothing other than the specific value <code>65</code> will work with this type.</p>\n<p>In TypeScript, the types <code>null</code> and <code>undefined</code> are both unit types.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myNull: null' >myNull</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUndefined: undefined' >myUndefined</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myNull: null' >myNull</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span></div><span class=\"error\"><span>Type 'undefined' is not assignable to type 'null'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'undefined' is not assignable to type 'null'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myUndefined: undefined' >myUndefined</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><span class=\"error\"><span>Type 'null' is not assignable to type 'undefined'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'null' is not assignable to type 'undefined'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAWwE8A5AVzz1QDsa9QBeUR2-I0sgVXoAmkAGYBLepAGoqgkeMmtQMoWIkCcG8tVqLlctZr6zVCthzxA'>Try</a></div></pre>\n<p>the <code>void</code> type is <em>almost</em> a unit type, but it can check against <code>undefined</code> as well</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVoid: void' >myVoid</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\">() {})()</span><span style=\"color: #6E7781\">// invoking a void-returning IIFE</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myNull: null' >myNull</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myUndefined: undefined' >myUndefined</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let myVoid: void' >myVoid</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myVoid: void' >myVoid</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><span class=\"error\"><span>Type 'null' is not assignable to type 'void'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'null' is not assignable to type 'void'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myUndefined: undefined' >myUndefined</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVoid: void' >myVoid</data-lsp></span></div><span class=\"error\"><span>Type 'void' is not assignable to type 'undefined'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'void' is not assignable to type 'undefined'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let myNull: null' >myNull</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let myVoid: void' >myVoid</data-lsp></span></div><span class=\"error\"><span>Type 'void' is not assignable to type 'null'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'void' is not assignable to type 'null'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAWwE8A1OASwBNUA3G20AXlAAoAzAVwDsAxoWpw+HAJSgA3gF9xEkKGp8mAa2UBzUAENQTOgFpoRHtD6bQASUsAxAKL4ipMgDkeePKj7u8bUN49HYnIAVT5aSC5lSHpQfgiovhi-eMjo2hwccio6FPC0pIzs5j8AvEzQ-MTk9mK6LNcfPzraIA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#top-types\">Top types</a></p>\n<ul>\n<li><a href=\"#any\"><code>any</code></a></li>\n<li><a href=\"#unknown\"><code>unknown</code></a></li>\n<li><a href=\"#practical-use-of-top-types\">Practical use of top types</a></li>\n<li><a href=\"#almost-top-type-object\">Almost top type: <code>object</code></a></li>\n<li><a href=\"#almost-top-type-\">Almost top type: <code>{}</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#bottom-type-never\">Bottom type: <code>never</code></a></p>\n<ul>\n<li><a href=\"#exhaustive-conditionals\">Exhaustive conditionals</a></li>\n</ul>\n</li>\n<li><a href=\"#unit-types\">Unit types</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v2/03-top-and-bottom-types/"},"frontmatter":{"title":"Top and bottom types","course":"intermediate-v2","date":"October 23, 2023","description":"Top types can be anything, bottom types can't be anything. We will also look\nat three \"extreme types\" in TypeScript: any, unknown and never.\n"}}},"pageContext":{"slug":"/course/intermediate-v2/03-top-and-bottom-types/","title":"Top and bottom types","course":"intermediate-v2","order":3,"previous":{"fields":{"slug":"/course/intermediate-v2/02-declaration-merging/"},"frontmatter":{"title":"Declaration Merging","order":2,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/04-nullish-values/"},"frontmatter":{"title":"Nullish values","order":4,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}