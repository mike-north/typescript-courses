{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/08-infer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"f03ef385-0695-55c2-8177-e1b0cfd27ede","excerpt":"Conditional types are not just for switching behavior based on comparison — they can be used with an infer keyword to access sub-parts of type information…","html":"<p>Conditional types are not just for switching behavior based on comparison — they can be used with an <code>infer</code> keyword to access sub-parts of type information within a larger type</p>\n<h2 id=\"type-inference-in-conditional-types\" style=\"position:relative;\"><a href=\"#type-inference-in-conditional-types\" aria-label=\"type inference in conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type inference in conditional types</h2>\n<p>In <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">the same release where conditional types were added to TypeScript</a> a new <code>infer</code> keyword was added as well. This keyword, which can <em>only</em> be used in the context of a condition expression (within a conditional type declaration) is an important tool for being able to <em>extract</em> out pieces of type information from other types.</p>\n<h3 id=\"a-motivating-use-case\" style=\"position:relative;\"><a href=\"#a-motivating-use-case\" aria-label=\"a motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A motivating use case</h3>\n<p><strong>Let’s consider a practical example</strong>: You use a library that provides a well-typed function, but does not expose independent types for the arguments the function takes.</p>\n<p>Let’s imagine that there’s a <code>fruit-market</code> npm package, which only exports a <code>createOrder</code> function.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: fruit-market.ts</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">//////////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">//////////////////////// NOT EXPORTED ////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">//////////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;fuji&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;gala&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;honeycrisp&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;granny smith&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;navel&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;valencia&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;blood orange&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;cara cara&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Allergies = \"peach\" | \"kiwi\" | \"strawberry\" | \"pineapple\"' >Allergies</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;peach&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;kiwi&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;strawberry&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;pineapple&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;green&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;ripe&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;overripe&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) min: number' >min</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) max: number' >max</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Varieties in type FruitOrderItem&lt;Varieties extends string>' >Varieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) variety: Varieties extends string' >variety</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Varieties in type FruitOrderItem&lt;Varieties extends string>' >Varieties</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) pricePerUnit: number' >pricePerUnit</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: number' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) totalPrice: number' >totalPrice</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrder = {&#10;    apples: FruitOrderItem&lt;AppleVarieties>[];&#10;    oranges: FruitOrderItem&lt;OrangeVarieties>[];&#10;    subtotal: number;&#10;    salesTax: number;&#10;    grandTotal: number;&#10;}' >FruitOrder</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) apples: FruitOrderItem&lt;AppleVarieties>[]' >apples</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\">&gt;[];</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) oranges: FruitOrderItem&lt;OrangeVarieties>[]' >oranges</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\">&gt;[];</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) subtotal: number' >subtotal</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) salesTax: number' >salesTax</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) grandTotal: number' >grandTotal</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderPreferences = {&#10;    apples: {&#10;        preferredVarieties: AppleVarieties[];&#10;        avoidSeeds: boolean;&#10;        organicOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    oranges: {&#10;        preferredVarieties: OrangeVarieties[];&#10;        seedlessOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    allergies: Allergies[];&#10;    prefersLocalProduce: boolean;&#10;}' >FruitOrderPreferences</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) apples: {&#10;    preferredVarieties: AppleVarieties[];&#10;    avoidSeeds: boolean;&#10;    organicOnly: boolean;&#10;    ripeness: Ripeness;&#10;    quantity: QuantityRange;&#10;}' >apples</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) preferredVarieties: AppleVarieties[]' >preferredVarieties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) avoidSeeds: boolean' >avoidSeeds</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) organicOnly: boolean' >organicOnly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) ripeness: Ripeness' >ripeness</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: QuantityRange' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    };</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) oranges: {&#10;    preferredVarieties: OrangeVarieties[];&#10;    seedlessOnly: boolean;&#10;    ripeness: Ripeness;&#10;    quantity: QuantityRange;&#10;}' >oranges</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) preferredVarieties: OrangeVarieties[]' >preferredVarieties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) seedlessOnly: boolean' >seedlessOnly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) ripeness: Ripeness' >ripeness</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: QuantityRange' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">    };</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) allergies: Allergies[]' >allergies</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Allergies = \"peach\" | \"kiwi\" | \"strawberry\" | \"pineapple\"' >Allergies</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) prefersLocalProduce: boolean' >prefersLocalProduce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">//////////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////// EXPORTED //////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">//////////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function createOrder(prefs: FruitOrderPreferences): FruitOrder' >createOrder</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) prefs: FruitOrderPreferences' >prefs</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderPreferences = {&#10;    apples: {&#10;        preferredVarieties: AppleVarieties[];&#10;        avoidSeeds: boolean;&#10;        organicOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    oranges: {&#10;        preferredVarieties: OrangeVarieties[];&#10;        seedlessOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    allergies: Allergies[];&#10;    prefersLocalProduce: boolean;&#10;}' >FruitOrderPreferences</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrder = {&#10;    apples: FruitOrderItem&lt;AppleVarieties>[];&#10;    oranges: FruitOrderItem&lt;OrangeVarieties>[];&#10;    subtotal: number;&#10;    salesTax: number;&#10;    grandTotal: number;&#10;}' >FruitOrder</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) prefs: FruitOrderPreferences' >prefs</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">        <data-lsp lsp='(property) apples: FruitOrderItem&lt;AppleVarieties>[]' >apples</data-lsp>: [],</span></div><div class='line'><span style=\"color: #24292F\">        <data-lsp lsp='(property) oranges: FruitOrderItem&lt;OrangeVarieties>[]' >oranges</data-lsp>: [],</span></div><div class='line'><span style=\"color: #24292F\">        <data-lsp lsp='(property) subtotal: number' >subtotal</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        <data-lsp lsp='(property) salesTax: number' >salesTax</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        <data-lsp lsp='(property) grandTotal: number' >grandTotal</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKSAnArtAC4C0qyOA1vIQHSEDOAUIyK2+x519z1y7wNAA5APIAVUAFEAGgAURAJTGSAIqAED+G7Tt0hGhAJ4AHeKACCx4wgBq5aNQf1QAXlABySHgBW0d6AAfDwBzZFhkfyD3AAsAe0R4QwBjHGh6Y0iQnGRERENQelQiaPcAbgMTMxFsxGD4O1THeGc3dxQAN3hYTPd2sKQk6AjAjwAjWFjYgBNQWJq6nqTyZFAl7LKK0wtYBBxgp1cPU2QkkpH3CmgAdz9z+kJsq9H4HBxDHuNoBOQrBA2jLYKaCmBL0FpZeBIHqpUw9WKdV7A+AbTZmACKeByhCIhgUOTqhwA3oxQKTQEVEFhEHhUM8cOUyeTkAAPKk0unlAC+5VRoAAYvgiNUpi8AJKEeCoAA8DQc2OaoHgzIliCmznuqVqAD4iSSyX1GkYsLKmvQGWTjKkkvBZC8AKqIIhs2kvc2kgCOmMQ2KNoGpLvpetJhFihDCsitmD97NdjG5zABZgFBEIwpeusZP2szSwyaFOBFOHFkqllmzJvl9C1AG0ALpu2bzHP8wWpgtiiXS6r4+r2U01+tBgp4UYhsOwZ0cof0fr0MQsyexxnBGpTMShsKLwPx3l5tuFiPwSAvAYKtzEzO-ZsXxkWnBHl73qYVpxYMu2PuVusNzPtWLQKYAGVITVLBRkmBAch-Mk5lCR0khERBYEMMCIPgKCh0ZGEkGaegsCBEFcOgj0vR9FDQAxLEcTxWp4AbeNGTmHs8NAG9b1AS0H1eeBn0-V9QG7WiX2ab9MLJegQIQMFEOQ1DYkgxBiNAbDQRYgicLBJTPSo31KO9aie3ohswl2fZm3MHYXjM+hRMZTjjxwegABlYiWWAI2mPBrTkhSuR5PQAsCvggo4KQ5EUZQ1BC9gtGiuLtEYJVjDmQhsDwRAkmxeJVnvZAJTTHAAAp7JYvcCsPBzT3oABKXNWwK1ihySeJ6Hk+AaAmYJivvSAaqHe9CDwHBEEa9jSSzKSsDrAAaMTSSY2iWJmubh1HDcJ1AAAGGhNs22axoKWd51ZLadr2laVxyNd1qwbbdv2slOTjIA'>Try</a></div></pre>\n<p>Look at all that great type information — it’s a shame that none of it is exported!</p>\n<p>Our goal is to <strong>create a well-typed variable to hold a value of type <code>FruitOrderPreferences</code></strong>, so we can assemble the right data together, log it, and then pass it to the <code>createOrder</code> to create that <code>FruitOrder</code>. A starting point for this code is below. All we need to do is replace <code>GetFirstArg&#x3C;T> = any</code> with a more meaningful type expression.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' style='border-bottom: solid 2px lightgrey;'>createOrder</data-lsp> } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;./fruit-market&apos;</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder\nimport createOrder</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = any' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const prefs: any' >prefs</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = any' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' >createOrder</data-lsp>> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='(alias) createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' >createOrder</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const prefs: any' >prefs</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKSAnArtAC4C0qyOA1vIQHSEDOAUIQJ4AO8oAgm2wgGrlo1YfVABeUAHJIeAFbQpoAD7SA5sljIlqqQAsA9ongsAxjmj02O9TmSJELUPVRE9UgNzN2nAPJ3ENXhBCxF4MUkpFAA3eFgbKWjNJFNobRVpACNYAwMAE1ADAKCE03JkUDK7T28OblgEHDVRCWkOZFN3DKkKaAB3RW76Qjs+zPgcHBYEtmhjZF4EGtY6gCVoDmN6CNt4JASLDgSDWMmN+BrazgBFPHtCIhZV+yDWgG9GUC-QV0QsRDwqHGOC83x+yAAHv9AcCvABfLxXUAAMXwRH8eQmAElCPBUAAeELCB7hUDwCG4xB5MTDCyBAB870+3ySoVYWCJYXooO+bAspngAAUJgBVRBEaFAiY8r4ARzuiAe7NAAKlIOZX0IBkImkF-MwKph0sYCMYSNRBEIGImTLBCz44SwFvROExOBxePxPAdnJJ9HpAG0ALoywrFR0otFW13Y3EE-wvYJCLmBkMa5x4TJanWwSWw9P0ZL0AAqkLzxrBagCeWL2s05fVpvNUetOD18EgExSpMkHztiwjfbBvJwHYmo7yvtEWG9AmTfuDobt0QM0DyAGU9tSsJlcgh7EvvkUNOLTL5ELAWDu9-AD+mwYckOF6Fh1ptn4e5QqlVfQLd7o8zyBPAoammCRSJi+oBDsOoB8mOkzwJO87TqACbAVO4SLve3z0FuCDbOel7XgY+6IJ+oCPlsUFvk+2wUfKAHKv+iqAYmoGhpojTNBGXANBMPH0NhYLwZ2OD0AAMgYZSwHq+R4AKJFkfCiLkmwRSENgeCIKYDxGJUo7ILirYABSiVBzrRm67Zid29AAJROi2MY4NB6amEY9CkfANA5GoZmjpADnpqOhB4DgiBubBXz2gRWDBgANDhXwQcBUGJclGZZnWuagAADDQeV5Ul0XOEWpZQvlhXFZlVb2DWOVYAVRUld8cImowIBgMQPWmHgJA9Z1YBQHASBoAacyYhCdBMNAqDqTgmlvAZt7GS5oBwtgOAGKg0g0MAuCWqQ5BUIQNQgKVAB6AD8ZorJwADi1DItA4mEFwTT4sWjKSPYLCIh5iDDHBgVQU9hAvW9H1qPi90GJAK1GfArY-dB7WMOYq3Iy5AUdg5QA'>Try</a></div></pre>\n<h3 id=\"the-infer-keyword\" style=\"position:relative;\"><a href=\"#the-infer-keyword\" aria-label=\"the infer keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>infer</code> keyword</h3>\n<p>The <code>infer</code> keyword gives us an important tool to solve this problem — it lets us <strong>extract and obtain</strong> type information from larger types, by capturing pieces of types into a newly-declared type params.</p>\n<p>Here’s an example of it in action:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * If the type `P` passed in is some kind of `PromiseLike&lt;T&gt;` </span></div><div class='line'><span style=\"color: #6E7781\"> * (where `T` is a new type param), extract `T` and return it.</span></div><div class='line'><span style=\"color: #6E7781\"> * If `P` is not some subtype of `PromiseLike&lt;any&gt;`, pass the </span></div><div class='line'><span style=\"color: #6E7781\"> * type `P` straight through and return it </span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface PromiseLike&lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type test1 = string' style='border-bottom: solid 2px lightgrey;'>test1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt;&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type test1 = string</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type test2 = [string[], number[]]' style='border-bottom: solid 2px lightgrey;'>test2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[], </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">[]]&gt;&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type test2 = [string[], number[]]</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type test3 = number' style='border-bottom: solid 2px lightgrey;'>test3</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type test3 = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhJAzSAXAFgU2QTwA4YAYAKek2AhgM7loAmkAlgHb3mTkD2AthgNaO1uJCAJ050qAGTrc0AHgAqAPmJQYACgDu6IfjnExkUpAZp1WXCVJDSHAJQAaSGgAeSKwGMkkPLoMNa2pABXISY6JAA6FThBImYjNk92LlZAgCMkHAwBLwIRDjE0SWkZUgZMJQcySmR0SCiM80JicldSOgBzFE9UEUDO3380IJD6TxVgcAaMAFUGdStsXNEqGQIFSABeSAJHFzQ-FiX8iSlZRng0IUhFSAB+a8gALm2AbnBJzOQ0FoBGTchZvNSIs8gVVqCVi0hIx2goFOBgMBIMiAHq3D7mJDfJAAJn+gIWRzBRJWAG0oTDSQBdBwMQIcVKXalUuEIpGo9FTL4tADM+LmhIhsjpDMu8MRyMgaKAA'>Try</a></div></pre>\n<p>Here’s a breakdown of what the conditional type means</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface PromiseLike&lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">//                      ---------------------</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqgdgdwE4EMwAUkHsC2BLAZwgB50A+KAXinSggA9gI4ATAm7fIgGTwGsSeOADMISKABUKAfklQAXDQDcAKAD0aqFu07deqAFojxk6bNA'>Try</a></div></pre>\n<p>If <code>P</code> is a subset of <code>PromiseLike&#x3C;any></code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface PromiseLike&lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">//                                           ---------</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqgdgdwE4EMwAUkHsC2BLAZwgB50A+KAXinSggA9gI4ATAm7fIgGTwGsSeOADMISKABUKAfklQAXDQDcAKAD0aqFu07de-Qf0BaE6dNA'>Try</a></div></pre>\n<p>Extract the typeParam of <code>PromiseLike&#x3C;?></code> and store it in a new typeParam <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface PromiseLike&lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">//                                                      ---</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqgdgdwE4EMwAUkHsC2BLAZwgB50A+KAXinSggA9gI4ATAm7fIgGTwGsSeOADMISKABUKAfklQAXDQDcAKAD0aqFu07de-QcOGAtKaA'>Try</a></div></pre>\n<p>And then return type <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type UnwrapPromise&lt;P> = P extends PromiseLike&lt;infer T> ? T : P' >UnwrapPromise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface PromiseLike&lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type UnwrapPromise&lt;P>' >P</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #6E7781\">//                                                          ---</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqgdgdwE4EMwAUkHsC2BLAZwgB50A+KAXinSggA9gI4ATAm7fIgGTwGsSeOADMISKABUKAfklQAXDQDcAKAD0aqFu07de-QcNHtAWjNA'>Try</a></div></pre>\n<p>Otherwise return the original typeParam <code>P</code></p>\n<p>Let’s go back to our need to define <code>GetFirstArg&#x3C;T></code> from our <code>fruit-market</code> library.</p>\n<p>First, let’s make sure the condition in the conditional type works the way we want it to, allowing us to return one type if the typeParam looks like a function with at least one argument, and another (<code>never</code>) otherwise. We’ll begin with the type for functions that have at least one argument, and make the type of that argument generic since we know we’ll want to extract it in a future step.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) firstArg: A = any' >firstArg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _args: any[]' >_args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8gdhAggJwOYDE4B5FQLxQCGcIAfPlABQBmAlsgM7AqoBcUiANFAHR8D6hNA3bEQAbQC6ASnzkAbgHtaAEyA'>Try</a></div></pre>\n<p>I’m using the variable name <code>_args</code> starting with an underscore (<code>_</code>) here to indicate that I don’t care about any arguments after the first one, but I’m happy to tolerate their presence and ignore them.</p>\n<p>Now let’s use a conditional type and a test function to make sure we’re returning <code>never</code> in the right case, and something other than <code>never</code> (I’m using <code>string[]</code> temporarily) when we have function with at least one argument. Remember that the <code>never</code> is advisable here because it effectively <em>erases</em> incompatible aspects of the type, in the case of a union type, just as we saw in <code>Extract&#x3C;T></code> and <code>Exclude&#x3C;T></code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) firstArg: A = any' >firstArg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _args: any[]' >_args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T extends OneArgFn> = T extends OneArgFn&lt;any> ? string[] : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T extends OneArgFn>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&gt; </span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T extends OneArgFn>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Test case</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function foo(x: string, y: number): null' style='border-bottom: solid 2px lightgrey;'>foo</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">}</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>function foo(x: string, y: number): null</span></div><div class='line'><span style=\"color: #6E7781\">// Should be string[]</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type t1 = string[]' style='border-bottom: solid 2px lightgrey;'>t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T extends OneArgFn> = T extends OneArgFn&lt;any> ? string[] : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='function foo(x: string, y: number): null' >foo</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type t1 = string[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQB5AO0gEFoBzAMUoB4bQBeUAQ0sID5OoABQAzAJZJ8deqhoAaUADoVAfW4MUPPgG0AugEpOggG5xxAEwIkyAcUj5GkxNIYsAKqEgAPfJEoWiBTUMsyCuKCRQp4+fgFBVLQMzBFRaQD8oC7Q4pT0+qlpkajUJjAA3Li4IKDukC6gAMbciJC4ogCulI344nCUoKJwcMLeqNm59IqEJR0AtgBGMEYA3tAOHdADlB0ANrsAvtVgRZEAeunHoADKABZwexagS1n4OXkFRKSg+ACMQvZHM5XPQWF9IHBRINhvwrlELkA'>Try</a></div></pre>\n<p>Next, let’s bring in the <code>infer</code> keyword, and the type param it creates on the fly</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) firstArg: A = any' >firstArg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A = any>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _args: any[]' >_args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = T extends OneArgFn&lt;infer R> ? R : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A = any> = (firstArg: A, ..._args: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) R' >R</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line highlight'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) R' >R</data-lsp></span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #6E7781\">// Test case</span></div><div class='line dim'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function foo(x: string, y: number): null' style='border-bottom: solid 2px lightgrey;'>foo</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">}</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>function foo(x: string, y: number): null</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type t1 = string' style='border-bottom: solid 2px lightgrey;'>t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = T extends OneArgFn&lt;infer R> ? R : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='function foo(x: string, y: number): null' >foo</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type t1 = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8gdhAggJwOYDE4B5FQLxQCGcIAfPlABQBmAlsgM7AqoBcUiANFAHR8D6hNA3bEQAbQC6ASnzkAbgHtaAEwBQoSFADiEYOnpMWWACqk1USxRNQIAD2AQ4KhrAQtMWWnGoRkUACVzKxCoAH5Ai1DLdgR5PwBuNTUAehSoEwgmKABjQgYINWoAVzgc4FpFOChqRUVKO3YmZG9UbhBY4oBbACM-WQBvZD1i5Gq4YoAbSYBfVPToqAA9MI1waGAARgpdfUNmNCxNCEVqGrrzNJCVoA'>Try</a></div></pre>\n<p>There we go! <code>string</code> is what we were looking for! Let’s bring it back to our fruit market example</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #6E7781\">// @filename: node_modules/fruit-market.ts</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;fuji&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;gala&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;honeycrisp&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;granny smith&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;navel&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;valencia&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;blood orange&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;cara cara&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Allergies = \"peach\" | \"kiwi\" | \"strawberry\" | \"pineapple\"' >Allergies</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;peach&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;kiwi&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;strawberry&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;pineapple&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;green&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;ripe&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;overripe&apos;</span><span style=\"color: #24292F\">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) min: number' >min</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) max: number' >max</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">};</span></div><span class=\"error\"><span>Type '{}' is missing the following properties from type 'FruitOrderPreferences': apples, oranges, allergies, prefersLocalProduce</span><span class=\"code\">2739</span></span><span class=\"error-behind\">Type '{}' is missing the following properties from type 'FruitOrderPreferences': apples, oranges, allergies, prefersLocalProduce</span><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Varieties in type FruitOrderItem&lt;Varieties extends string>' >Varieties</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) variety: Varieties extends string' >variety</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) Varieties in type FruitOrderItem&lt;Varieties extends string>' >Varieties</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) pricePerUnit: number' >pricePerUnit</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: number' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) totalPrice: number' >totalPrice</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">};</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrder = {&#10;    apples: FruitOrderItem&lt;AppleVarieties>[];&#10;    oranges: FruitOrderItem&lt;OrangeVarieties>[];&#10;    subtotal: number;&#10;    salesTax: number;&#10;    grandTotal: number;&#10;}' >FruitOrder</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) apples: FruitOrderItem&lt;AppleVarieties>[]' >apples</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\">&gt;[];</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) oranges: FruitOrderItem&lt;OrangeVarieties>[]' >oranges</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderItem&lt;Varieties extends string> = {&#10;    variety: Varieties;&#10;    pricePerUnit: number;&#10;    quantity: number;&#10;    totalPrice: number;&#10;}' >FruitOrderItem</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\">&gt;[];</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) subtotal: number' >subtotal</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) salesTax: number' >salesTax</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) grandTotal: number' >grandTotal</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">};</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderPreferences = {&#10;    apples: {&#10;        preferredVarieties: AppleVarieties[];&#10;        avoidSeeds: boolean;&#10;        organicOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    oranges: {&#10;        preferredVarieties: OrangeVarieties[];&#10;        seedlessOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    allergies: Allergies[];&#10;    prefersLocalProduce: boolean;&#10;}' >FruitOrderPreferences</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) apples: {&#10;    preferredVarieties: AppleVarieties[];&#10;    avoidSeeds: boolean;&#10;    organicOnly: boolean;&#10;    ripeness: Ripeness;&#10;    quantity: QuantityRange;&#10;}' >apples</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) preferredVarieties: AppleVarieties[]' >preferredVarieties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type AppleVarieties = \"fuji\" | \"gala\" | \"honeycrisp\" | \"granny smith\"' >AppleVarieties</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) avoidSeeds: boolean' >avoidSeeds</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) organicOnly: boolean' >organicOnly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) ripeness: Ripeness' >ripeness</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: QuantityRange' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    };</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) oranges: {&#10;    preferredVarieties: OrangeVarieties[];&#10;    seedlessOnly: boolean;&#10;    ripeness: Ripeness;&#10;    quantity: QuantityRange;&#10;}' >oranges</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) preferredVarieties: OrangeVarieties[]' >preferredVarieties</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OrangeVarieties = \"navel\" | \"valencia\" | \"blood orange\" | \"cara cara\"' >OrangeVarieties</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) seedlessOnly: boolean' >seedlessOnly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) ripeness: Ripeness' >ripeness</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Ripeness = \"green\" | \"ripe\" | \"overripe\"' >Ripeness</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">        </span><span style=\"color: #953800\"><data-lsp lsp='(property) quantity: QuantityRange' >quantity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type QuantityRange = {&#10;    min: number;&#10;    max: number;&#10;}' >QuantityRange</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">    };</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) allergies: Allergies[]' >allergies</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Allergies = \"peach\" | \"kiwi\" | \"strawberry\" | \"pineapple\"' >Allergies</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) prefersLocalProduce: boolean' >prefersLocalProduce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">};</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function createOrder(prefs: FruitOrderPreferences): FruitOrder' >createOrder</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) prefs: FruitOrderPreferences' >prefs</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrderPreferences = {&#10;    apples: {&#10;        preferredVarieties: AppleVarieties[];&#10;        avoidSeeds: boolean;&#10;        organicOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    oranges: {&#10;        preferredVarieties: OrangeVarieties[];&#10;        seedlessOnly: boolean;&#10;        ripeness: Ripeness;&#10;        quantity: QuantityRange;&#10;    };&#10;    allergies: Allergies[];&#10;    prefersLocalProduce: boolean;&#10;}' >FruitOrderPreferences</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FruitOrder = {&#10;    apples: FruitOrderItem&lt;AppleVarieties>[];&#10;    oranges: FruitOrderItem&lt;OrangeVarieties>[];&#10;    subtotal: number;&#10;    salesTax: number;&#10;    grandTotal: number;&#10;}' >FruitOrder</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) prefs: FruitOrderPreferences' >prefs</data-lsp>)</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">        <data-lsp lsp='(property) apples: FruitOrderItem&lt;AppleVarieties>[]' >apples</data-lsp>: [],</span></div><div class='line dim'><span style=\"color: #24292F\">        <data-lsp lsp='(property) oranges: FruitOrderItem&lt;OrangeVarieties>[]' >oranges</data-lsp>: [],</span></div><div class='line dim'><span style=\"color: #24292F\">        <data-lsp lsp='(property) subtotal: number' >subtotal</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line dim'><span style=\"color: #24292F\">        <data-lsp lsp='(property) salesTax: number' >salesTax</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line dim'><span style=\"color: #24292F\">        <data-lsp lsp='(property) grandTotal: number' >grandTotal</data-lsp>: </span><span style=\"color: #0550AE\">0.00</span><span style=\"color: #24292F\">,</span></div><div class='line dim'><span style=\"color: #24292F\">    }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #6E7781\">// @filename: index.ts</span></div><div class='line dim'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { <data-lsp lsp='(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' style='border-bottom: solid 2px lightgrey;'>createOrder</data-lsp> } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;fruit-market&apos;</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder\nimport createOrder</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A extends {}> = (firstArg: A, ..._: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A extends {}>' >A</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> {}&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) firstArg: A extends {}' >firstArg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type OneArgFn&lt;A extends {}>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) _: any[]' >_</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = T extends OneArgFn&lt;infer R extends {}> ? R : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line highlight'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstArg&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneArgFn&lt;A extends {}> = (firstArg: A, ..._: any[]) => void' >OneArgFn</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) R' >R</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line highlight'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) R' >R</data-lsp></span></div><div class='line highlight'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">;</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const prefs: FruitOrderPreferences' style='border-bottom: solid 2px lightgrey;'>prefs</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstArg&lt;T> = T extends OneArgFn&lt;infer R extends {}> ? R : never' >GetFirstArg</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(alias) function createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' >createOrder</data-lsp>> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const prefs: FruitOrderPreferences</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #8250DF\"><data-lsp lsp='(alias) createOrder(prefs: FruitOrderPreferences): FruitOrder&#10;import createOrder' >createOrder</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const prefs: FruitOrderPreferences' >prefs</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMBOAUCBAGYCWANpAHYCGAtpKpXACaQD6tLArhYsEdC4kALgFpa1aAGtIwgHTDEeYQE8ADpFABBNWooA1SSVnHEoALygA5ES4ArEldAAfawHNqZak9dWAFnCUkCoAxtAkiGo+7tDUlJQqoIi0In5WANzK6poA8rGUbpCG4SaQZpZWNABukGTRVlWeVCEk3i7WAEZkcCygCHGF9SGS1KDDsRlZGtpkFNBuphbWGtQhae1WUiQA7o4biMKx2x0w0Cr1aiRB1LoUk6rTAEokGkGI5TGQVPXhGvVwNVgL0gkymmgAilw4sIRCpHgNNJYAN54UBo0ApSiMLi0E7QTLojHUAAe2NxMEyAF9MmDQAAxQQiPKsaAASWEkFoAB5isYYWVQJBiRzKMwzAdwgUAHxLFGExolVSoXmlRAE9FqcIhSAABRgAFVKCIyXj1WiAI5QygwpWgSg402o9HCODCTw6rUMO0Oil4al4WkMoTCZkwWVOtE3PRlVBBpnQFnszlcnTRlX8xBSgDaAF0zX18oUUPTGSGEzAk9y8gj06Zs3mI0kuB0XW6yCbfYTEE1EAAVEkd-GNtz5Zi912eQdUmkPTRxsssj2QIgwZoC5GNqO8VBywka6DL06QZi1mPaW5FIyq3P5wnUKpwEjMADKXzFqA6PQocVv6IQHiNEIckoMgVA-L9IB-RtCV+KgymLZ5Xng38LStG0wNASFoVheECkgfN-UJfo8OLXc91ATVD1gY9T2Las8Nom9oPRRA314RBgNA8C4G-SgUNAWC3gQ4EhP4y1sNtLDrRwhECPzTw5gWM8tFmGAlMQJjCUolckAAGTgYYyA9bhtW43jpwDIU1AQYRQFsSgQhhQIxgPagOVDaAAAptOLecPKXHS10QABKWNSw80AyLGQJEB4yA5G6NxvIPIgQsbA9hC4aBKEi5jIwvYtcwAGjygsEUKnMSvItFEGbVtJ1AAAGORGsaqrqu7Xh+1JJqWra0qRziMcJ3bXrWvatFKT9AgwHAUgKBoehUCuVhiQUJQSFoazoFspEXMg9zy2gUBKTs+BaGsARg3ESQZGESZCGqgA9AB+ANZ1AYDIC0eY6UoFNBWFKgxUiykZUsTzSCQYQfrcVAtCK0A5GRthUDiFRc2CiwZQfJ93uyUAAHFZDpEhodhrleylRtLF7QGRRBr7Yb+rkrh00BHmp6rQBejnSsYSBARpEIYtsnzUGJ4RSfJ+YuVnOAiH2tzIA88HQZmvdXoDMIDpVo7kuXEKgA'>Try</a></div></pre>\n<p>Awesome! We’re getting an error that indicates we have the desired type!\n<img class=\"emoji-icon\" alt=\"emoji-tada\" data-icon=\"emoji-tada\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAW5UlEQVR4Ae3bBXRVV9738e/eR67lxkOJ4DIUHdzrT2nHWxb1kTKlb70dn7q7u9KOlFV3N+iUqVEo04EApYJLCElubq6ec/beb4Zc1pOVhY899lnrh9tfzj22EGw36d6f0BacTzKoFZaOmerYpcAV/A9nM/k+CNRzooEfYBdBucaodB6t+/G/gGDivWeJZnMnZUWYiH4Rnb8NmMc/W7cyF1sOAOr5B3j6sceG7MufJZhw79sC+1ATUocDb/EvYldUfijQE0CPAz5hH9317I1Osd3jcgHnC60vAK6liyV6w+FNtD4ElJRT+h/AAgoEUx54CssEwPH8i9jFRX+WeWsyWgAZPEsM3ddNmPP2Mw+mhXeKEIbAGJxAjgcW0MkaGqduFi3vZUyScioaK4j3BjIANkK9gpIX8edNEtDshSefvCwCZNlLJ97zwFOiKTVZKFCu+pBY+Vr20SaVvqrFTp6i0Ggj/Bq7tIQuKiibLwJ5uCVK3mwyrVVpGdwAnAUgGH1/iRBBwhjzFXF/DJBgDzxzxs8ekoajMwH9gBb20szLrjgHpWYAU/k7zVr99BmBMEdrlZsOtLITNVT9NiKCaxtNLgAcAPFLhnDTlLMuE43mUuOEfKLyQ6S/DKFXEDKfAe/SxRM/On12xGGmLaElRdJIhgDrAZ6dVTJKYN8A1ICY78MtwOf8FzGF/uvbRK4WEADiYvFNAK6ceNoSkYkMJWOBAowG4WGKs8sJ+6M7r/rso37+iEnyE6khE9BWOoDB2xvw8qzuC8pEeGwUmwBF0uRIkT8FmM2/SF/6lOxsE6LIVxHiSLY34HIxju0uPfCU67BiZwviUXAh5UOiCVOWuwq4mE7OLz3toXwLRxcPpT/QDLB8dvX+1cSPraZ0VZWInyqFmbSVBKtMEw0m9QPgBf6JBtH7B1tpnY0IymMm9m6E6J3As2xHvg/CXSgNpwLPAIhLGENXV4w/r5iyiuEUl1wnEsnJJrFqPnAAXczYePr2D0Gy6yvGdSf68UBR/RdgJMAg2WtOBHPCKjbzmVobrGVtCZDhn2AIY/smRfNXGI8wkgweCklMxLaGTGh+G7lBCLN/uSi5FriAAnGRHE1nVw09Lka32pmUV/9M1pX2oaUF/eUXbwLT2IWT51/xVX9Z1TdOEQmdOx54HGCqNWi9K3Ttp3oVn+i1twPn8U9QLavuUSZ5+kB6rDRCvpUxmTNbTBtNpMgSIIVLpSn/OXArndiBNgBcN2XmQDzrMuFFjyfjQsyDlkb0lob1+MF57MJPPrp2QI2s6NtP1NBChiStqyjYQurn3xAVTwwS1WwUrWdca5b9HNB0NuPJcku6N6svG04FfPbB+Yvva6yliipiA9frzImt5C+ColkVREYoWOoY/2EIttCFuIzhXDb1jO+LreJ5/CgUt6fMwoSDDJnEVcC17Ma5864f30t2m9+D/doStN4GXEkn/WX3lkrCpR/rL/lIfzW983H5h+/fMgzFm8I43TG5uflXjz8MMOzCbxl5cYDfP0L4NmAxgIcp6S3jiWoTZS3JFBBnD4g7xBTOGXncGhF062lqypJY3uv4rY8CL/EP8sQ7j981XNacuUY38IaqfxT4IQV3T7t8tt2mZhIIMGlUPHw6cB87cfbcm55pZPPRAk1ExCg1FdcAFwJEcc7vJ0qv2cAWWoxeAIxnN8QFjOCaKWc3isqelQb7StLNf0TlPVQwGKG/Qb49SgwhMLUoP0JIvcWCd2cCij10H83/McHp82ZgfN5US1YDfejkykEnfGCUN9FI+27gLHbiVyueOiwhtr5VTUmzi1XebBIkyFFCxcdh/joFCCrEgW/EEYcvZQO2iReO+Z2zNRZY6llRLk4VVuhiY+IXk5DQloecpmMyAiwLjIZk24/MuIN94BT2UHLBI0tSJk+FiFJOrGe92VQMJCnI5oMjHbzp4D3MLuTI/qrMRCil+A4P83atiLxVSltknWkebxj8VTHx7yZNblqpKF7di7JeX9F6s03oASDNTohfMpybRp9ZSYX9sQyX9jUpBTkDGLAkuBZIMI67GZx1IpUfazINrUApBQctPLXSL3bvlrY9NSwJhDGLUMHzQvsvAc0AP0/PyPaVVeFF+ms+VusGAF+ylyK4y6tFaFBWWNs2pVF73Suw57hCHbLBNOIIl+6m8tIQznulOHM/F1uEZ+zRwKe7OARGs901k2eNwaInwhiMyCNowRdbaN20DvCo+kZvUVO1iobNAIKCyQtnXm9Czq/LbIuoLXEsiR0Bhf4ylcw/mM9k75vV+t1lw2XP2uV6A3PVssId296poPSzGhEZvlFk5wAnURAgr45jLmjVSSwBNVTl4iIa/kq3bAWq2AU7hs12V7//yEKgPTt24beGPiYiEi3VJrZ768cy2i12hBCSmCWICEnUEYSiFlZM9DfVoevbUpEfZRflbQAXG5tQhH0gkW0uDuhMBZ3YqAsTqGdd4ndKgokpcuFWo8jgf5fdsDP47ImrJ556rsiLCaQz4OVupGBsKcNL4tagTBosIXAEuJYk7ApCIYkdFhQXyyHBX4FAYwmJi86yD4ygyUZiC6s3XdhYi4BJacPoLGZ4QPJ5oIXdsBU+u3Pd1DPGiUzRbVRF0G0tX1NUdCsFgc8xJXHpqozGBqQBS4BjC8LtcRyB5QpiOoRtbACaqxL778shYDdFNxtjsASDNur1O3sWsaiQPWLnd9OkW8f/upiU+zylcURMY9Ynj6eg//zTQ3aYoyqKbSxtSG7xiYYkotAIF0X3fJI6PBQ2lrHwhKLXIfL+5SsTlcDN7AXVWL0xJzSe0YSoGAQs5u9kh6hglzz5FyHC1aImhN687g5cewEF0TBTymwGlXrQf3Qdrz+3EhOyEIBrFFWtjVREwM3aWH4MS0LezVPVXYSilaU3fbU803/l3KbzgDx7oA5WbjbZVBbzcxt3Mf8Ato3LLoWsT6g0fXTr5noizrl0ErE5tiYksde1Mu6EaSxb0kLL6q2YkI3nS5qUi8l6+MqhTjtoqckWZSmOWIS1ITIqdlq8zK5b+k7DD4EEu1HPwseeT/AEoPkHEezO8BtjdCt/noz3M2ApBcM+OL2supT6URGnemDgc9ivj2Njnwncevx51NZVUFxuEy/RiK3NFKtqRtYfTrET5qN+n1FyzCaMAM8I0p4mkQz+/Kc31k0HtvAvJo7qxz5Z28CMb4StJ0eFHQaXKsacO43Kkx/mpu99h/p3F9CzbzeKqyyKKiz0phhjPhpPRLosnrSQykPakJaE9vgBpHzD2nXZhX96Yd1RwHr+hexcC/skZnF8lS0pl4aa4ZXEvzkC/BXMuvsBLho/ikwiSyweQ+cM3uYwCMgREO7mYwuBZUks2ybiCsJaEB3ojgkd4zz/5vNfHwk08i9i47LXNrRS1zsqD6u0LSrLNTUHjEBUDyCfWkNp72mcdPMtPHzKeZSWh9ElEhIWFpKU8Qh3D5BSYlkWtm0hbRsbgx0Y+vctGW3PGPBM07rG7wEJ/gXs8RNK2VuvzU18r8qx4hURSfdhxRSNm4CJxAAbLzGfCSedwNqP3uejR5+ipKyGcCaMjUXGzhErD7CwsIRoD9vi2BYhh/ZIZK/iqZGw84cFc5dNB3x244FFl8nwyLoeKNMPKXoIKBVQhbRLBVRoEzhGmduB+eyAfd3XN7I3cn+dJQ4ts46tci2q/jb9KcORdf0w0kUYF6O+xG/4LUff+AsaVn5O44qV9POGgIBURYLyAOyQRCKwhIUtJFJYSClxHYHt2Diu892GAb1vB86gkwsXnF8SLrHGSMPBWJGRwg4NiU1y6qR0LIQF0kK0BylASMAgvRQ62zA9nVkbAjy6sHNqA509Wb+op7Td/YE32IHrihhS4YgJlVFB9/4xysZNxLhFCG2DyKK9r9HJvxCO/oGZc+7l9snHYWORE4pMeZLinMEOqfY4WJaFkAK57fNAgpDEHIllG8YfUHf6Oy+vXnHrpsteEIYZwokeG9svMkraYYntILbFBksiLBtsARKEFCAESACFyXqYZncrn1zmswM29ZfRmbJ+cKtBHR2g/2wH/BZ4n07CtpzeLWS7FRWC2gn7Y9UNQBsbISRGrYH8KggV46UWEavej+9d/2s+mfEyTSaDVZYmyGtMDqyQwXYNlrDaI7GkhWVbgMC2JO981YtX9NG3OtGq24UTBjeEcG2EIxG2AFuDBKT2hcg0IXRCK9UopPbQqkVj8hjdjOuLVCR+F0e8YNgBu/0n2G726/ePaRapo43QaGOmxOzwtM4NuCd4zenuONO7xSXVvcJUTpyECZUglIOhGeMtx+gWRNhCU0xu/UsM/f4MspeP4utLl5L1khSlbYIQKE9BCCxXYiGwhCSdD/P7RYP542ejyIkyRCgkrTILQhLhGAzZLxH5j43OLxSBWGj8/PqEjjYBbeyUBHcPzwJZ8s56k1idJ+gtjPCBS+gkXMaESlcMrSg11I3ui9NrCEY7CBRGfY3JrQGhMUpAoNBBiMzncxj78+MQ9kA+/MO7tK6PEHajBKE8/rZ1F+RNiAc/GsUfl05GhKKIWBgrDMLVTOi+lLL8ynkvbJpwPNBAFzHS7I05mROGAUsoEM8fBl29Pnf/04UQbcCjdLKi9PO7RleGzhw/zOLgc39EbMSRoFxgPTr1Nia9BhwBPqANRvkY30N4GSLfOIbVCwLeOv8+iru5dB8QJVpm8/yGA7l32eEQKkZEXGRE0KusgZ8OWcS0PmvA5NiS9PjTq18dAbzBPuq9/steboinpWQMih7AegDxzEHskVuWEt/PcZeN7WnVHXxkT0ac/ksI9wCdRXvvoxMLIMiDERiloD34ChPojib4aSL9jmTjyghzr3qSemcIz/nfodHqj4hEkFEY1e0rTh/6CQf22IxwLQySQEgSOUX98sbF55///kQgz146aQhur2JaIxB2bPAFq4C+ALav2SPCWIdVFsm6/bpBj0kTIFZNWxsUuevQ6WUYLwW+wGjdUbjSEKjCtxXas0h98gLdek9g9K+P5+yrhiEjRchSh2FlKziv/9uMrt5KOBpBaAeUjXAEtiWIuJL+g7qNPOrbfU8EHmYHYmO/loBmx7yWJ/htq+Y224ZQjGYK7LYceyRmy+Oqyix6DC6nbMhYrnpOcOvrORZf8DndvQZMPgBjICg0QGuMr0Fp8MAEAoIImSUf0me/LSw8v5WTH92fqbl3+V68nmIdIkgXEwiJFCCxQIJlScKuTcQoxh/c65zZv5w3p+sWHH8nMyyL+5XhN8CD7MhZ3L72ZqYJxQLyXEaBvaWZ3Xq5hdrexXJaVYWm17hvcvR93XlniQfC5ds3f5P3fjifiJUH32ACDYEBZTDbAuQMBAYTgPFCZD//ksroVl7/8QZWvL+FDX/18LMaYQxSK6QBxxiEjGAsge0IwpZFTc+SEUedO+Sgzp8Fslv9beQ41w1BopU7U008BSTYgdj3+BZd2NHvsFvOo853KkpkSW2/YqqGjWNii2beG40gXda2GNY2xhhQnAIFeGCUAQXGN9Ae4wO+Qav2eKD9MKohSbDpM3r2rqKorJx1nyZp+CJLRZ1Ce4qoiuMiMDqMiEocJPGIQ1aFv925ATTzx5zh3CAEqSQhP+BI4DH2kLjh/7Fb770Smjd2oDzo28eNZsgxZ6OFzQ9mLWbTpgzPnvsaFeE8JgAC01G0KhS9beIaHdAeg/La44Mq/Do/qwhyClkaQUdDtG0BP+kTjkvi3SIUlceJFBcho2E8x6bVWMybv6Hrq3q2rFvwCJoDsDkR+Ii9YGcS7NLct9m/dxWT9qsNUztiLNqKECRX8PgZb2FaN2C0g85RmHR7FB1fBwZdKFb7HVEeHV+r9uQ7muT5En9NBl9n0UUudmkIjEW2MYfOeqj2hMriKDeEZyy0Ui5dXPYUMwHDPrAve4JdOrSbPaOsRLh9BtcR77k/Kt+E2vgRumkj+BZGG0zQER0AviEoFN7RhMLUtzchAOMZ/MAQ5Doakc9DLq1Ir03Tlk8ThF2Kqhxqq8MYncIPNL4TJmG5ZAPzOF3ceOYowz6y238zO/P43Z86RTE5o1ulRZ8RIyEUJ9i0iGBdPSajMEaiAw0B+IUN0AoCr8sGeP/ZiMA3+F57fEOQ03hZQ649mYwmkzYkMppmL03DF5pECCLlLuXFEZSvP41Ux+8BZrMLU9OrDkQzNNjMg4DHbognh7BTd2+xp/baz3rviGm1HHHaGVi2wKt/jtymLxAyhFbbJws6MNuy7fteYdKF76uAjidDXnvy7fENQUaTyRqy7cmlNcm8oc3XNKv2BJotgWKLp1VbYN7wFfdtzPM64LMbTx7M/JBkSjbAl5LfArfsugEHs1P3f+7cNaKvdebxpx3O4KlHkln1HsmV76E9sITsKMw36O2r3mnldeE4V4Wifd/gZduTM+TyhmzKkE5rUp4m6RlatKYlKDTAV02t2jzlBcwGFrKHrhjBIDTLQxryGozNTOARdsFOZXZS/BcUdy/lez16l1M3cDj5LatJfPUp+WSAIx0C1fFhZvzC1AM6PuULn/Y6gHxO4/lsm7bnGbJpQyaraUuZbYW3+oak0jQFipbA0ByoFWltfucFPApsoIv13396vK3t0p3dE+RX/kClPV4PfI7QwO6KBxDXDmCHXmy1jupfZT17wslTmHTowTR9/haJr5cjsbGEQCvQnT/cCsd34HVMPudr/Iwhv23NNdmMoS3bnpymNehIU2HdE0q/l/fNA+k0zwNpdqDpqCenCCHnYwCjxwCL2IkL/3pMTynpA/yJ3RBX9GeH3m6znpz8zdIZJ58zgwhJNiyZh05rXNuCwhWe2r7unibwKKy6JpcufLBlNblUR9HJvKFVaRKBoikwtAQqmwx4Ia/1g8BcdmHNgXPK3MBvFnkXjMY4Hl4gyoAEfyfBQY/Q1cilJ9dUh636444fWXrgYWPZXP8umU2NuLaNLSHwQRU+2b3CxLPbP+QyhmxGk2ozpHOaVk+T8A0tSnVMO1Ab2wLzmG94GFjGHto05PaTZWv2YYxBF4XPAe5kD81ZNLcPsGrHH4J8l66ur3zltOF10XtnnT2NCM001C9BKoljCSwDQWDw8oVkO5IvnMpSGdMeTSLfHqVIBGbbB1uLrxZnAzM7C08CjeyDlv0u+ZXWNAOzd1v0quUWln+Cgisl9DhWPW8DZo9ejU2osOZ9//A+B0379mAali0mvzVL2JZIOtbezxnyf0tek013nMqSqY7iW4NtxZJQhmZPqYTSb2S1uX9dG68BPv8ij3BE75xtVtnCYBBIJXf4f6DEQ/JIOru19LXBveLuX37603FOsZOkcfl6XCS2A9pnW/G5THuymnRa05Y2JLOapFc4jW2LamlTPOP5+gHgE/5NTs6PfTov1XRhoMzEXgS+Txd2k0hBZ5rpvXqUOlHXZ/3yzaikwYQ0uQwdV215Q6pNk0obWrOaVl/T8rd0rPmqNqV/bzz+AKyS/Hs1q9zlBl1hFBcnyf+ZHRBnMITt7qHeGV3hLJpxRN2wqpih+csWwpZASvA9QzplSKU1yZzpWPNA07It5sNsoB5KtvEM0Mp/I/Zj1LPdwDImlBTbQ6VWfL2kDZ1RhG2JwZDJGBI5TcLfvuoq1+abl3KBvn9tmrmA4b8hQScDyuQ9w2rjp1eHbdJbM7hSIBDklCa57TJ12+Q3J33zmNL6YWAp/83ZPYr4T8bUbm31SbTkAY1jBIExpLUh6avlaV8/lFY8BmzifwhRGYXtSl2+L6X1vC1BAEob42kzzzfmAdPKi0CW/2FEHdCZU2Idg9AnBVqsUUY/BnzA/2CiJs7/apL/3f6vAf8fo5qsj5kaFAAAAAAASUVORK5CYII=\" title=\"emoji-tada\"></p>\n<h2 id=\"constraints-on-infer\" style=\"position:relative;\"><a href=\"#constraints-on-infer\" aria-label=\"constraints on infer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constraints on <code>infer</code></h2>\n<p>TypeScript 5 allows type param constraints to be expressed <em>on inferred type params</em>. For example, what if we wanted to extract the first element of a tuple, but only if it’s a subtype of <code>string</code></p>\n<p>Without any kind of constraint, we’re just getting the first element of the tuple, no matter what it is</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='any' >_</data-lsp></span><span style=\"color: #24292F\">:</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' style='border-bottom: solid 2px lightgrey;'>t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"success\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [\"success\", 2, 1, 4]' >const</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const t1: readonly [\"success\", 2, 1, 4]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t2: readonly [4, 54, 5]' style='border-bottom: solid 2px lightgrey;'>t2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">54</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [4, 54, 5]' >const</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const t2: readonly [4, 54, 5]</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT1: \"success\"' style='border-bottom: solid 2px lightgrey;'>firstT1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' >t1</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let firstT1: \"success\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT2: 4' style='border-bottom: solid 2px lightgrey;'>firstT2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t2: readonly [4, 54, 5]' >t2</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let firstT2: 4</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwDECWAnAzsAysFSB2A5gJJoAWAogDYQC2EewAPACoB8UAvFM1BAB7B6AEzRQUEAIZCA9nkogoAbQBQUKPgBmEFFEwAaVVAB0JgPoAuCXhCKAusttQA-LqjmoeCADdty5QGNZDChgAEZOJQAiNABXf38INDRIvSgAJlTQ1IAWRwlRQLwMZQB6ErUKgD0nAKDgELSIxWzUgFYWqFa8grrS8oqoauVqeo1UDGZQ9zhEcawcfGIyKlp6JlBIaQ0Q0NY+qpqRqDH0YGY06fhkU+xcQhIKajoGRg2ILYa9soOgA'>Try</a></div></pre>\n<p>if we add a constraint</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #116329\">+ infer S extends string,</span></div><div class='line'><span style=\"color: #82071E\">- infer S,</span></div></code></div></pre>\n<p>we get the desired result, with <code>firstT2</code> evaluating to <code>never</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  ...</span><span style=\"color: #953800\"><data-lsp lsp='any' >_</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' >t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"success\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [\"success\", 2, 1, 4]' >const</data-lsp></span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t2: readonly [4, 54, 5]' >t2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">54</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [4, 54, 5]' >const</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT1: \"success\"' style='border-bottom: solid 2px lightgrey;'>firstT1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' >t1</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let firstT1: \"success\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT2: never' style='border-bottom: solid 2px lightgrey;'>firstT2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t2: readonly [4, 54, 5]' >t2</data-lsp>></span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let firstT2: never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwDECWAnAzsAysFSB2A5gJJoAWAogDYQC2EewAPACoB8UAvFM1BAB7B6AEzRQUEAIZCA9nkogoAbQBQUKPgBmEFFEy8Bw0RlyEANKqgA6awH0AXBLwhFAXWUuoAfl1Q7UPBAAbtrKygDGshhQwACMnEoARGgArmFhEGhoCaZQAEw5MTkALB4SohF4GOGRwNG58YpFOQCsTVDNpeU1odS1GqgYzDF+cIgDWDj4xGRUtPRMoJDSGtExrMoA9BtqUAB6nsq9UP3owMy5I-DIp9gm0xTUdAyMixDLdetbO-tAA'>Try</a></div></pre>\n<p>Ok, we’re only extracting the type of the first element of the tuple in the event that the first element (<code>S</code>) is some subtype of <code>string</code>, but it’s not great that we see that <code>never</code>. Really this should be an error, and we can make it an error via the use of a type param constraint.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- type GetFirstStringIshElement&lt;T&gt;</span></div><div class='line'><span style=\"color: #116329\">+ type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]&gt;</span></div></code></div></pre>\n<p>And now we’ll get a compile error</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]]&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  ...</span><span style=\"color: #953800\"><data-lsp lsp='any' >_</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' >t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"success\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [\"success\", 2, 1, 4]' >const</data-lsp></span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t2: readonly [4, 54, 5]' >t2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">54</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [4, 54, 5]' >const</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT1: \"success\"' >firstT1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t1: readonly [\"success\", 2, 1, 4]' >t1</data-lsp>></span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstT2: never' >firstT2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GetFirstStringIshElement&lt;T extends readonly [string, ...any[]]> = T extends readonly [infer S extends string, ..._: any[]] ? S : never' >GetFirstStringIshElement</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const t2: readonly [4, 54, 5]' >t2</data-lsp>></span></div><span class=\"error\"><span>Type 'readonly [4, 54, 5]' does not satisfy the constraint 'readonly [string, ...any[]]'.\n  Type at position 0 in source is not compatible with type at position 0 in target.\n    Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'readonly [4, 54, 5]' does not satisfy the constraint 'readonly [string, ...any[]]'.\n  Type at position 0 in source is not compatible with type at position 0 in target.\n    Type 'number' is not assignable to type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBxSfAMQEsl8BlfaWgOwHMBJRACwFEANpAC2kNvgA8AFVCQAHvnEATRKGiQAhsrhtBhUAG1ELdhwA0oAHQ3NbQoYC6jgHygAvKFkKlbVeq0dPQNDXFBQdgAzGFBGOUUVNRNWTnMw6xsAfWQ7B0dcR1AAfljQVDZIADcYXFwAY10TUHwARg8jACJEAFc6ushERA7LNEsWyyxCzTUGthN6xvxmtHbDLEsAVnXQDamZxdrhJcj6E2kW1EoaU6ZTTh4BYTEJSSJSOEjmlpdcI9AThjSNCXKh0BjMFLcPhCUTiKRvSAfZYuIA'>Try</a></div></pre>\n<p>This may feel a little redundant, but it’s important to realize that the condition on the conditional type, and the constraint on the type param serve two different purposes.</p>\n<ul>\n<li>The type param constraint describes what is allowed for <code>T</code>. Anything that doesn’t align with the constraint will cause a compiler error</li>\n<li>The condition in the conditional type is sort of an equivalent to control flow for types. It will <em>never</em> generate a compile error, because it’s essentially just an <code>if</code>/<code>else</code></li>\n</ul>\n<h2 id=\"utility-types-that-use-infer\" style=\"position:relative;\"><a href=\"#utility-types-that-use-infer\" aria-label=\"utility types that use infer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utility types that use <code>infer</code></h2>\n<p>TypeScript includes a number of utility types, which are kind of like a type-based standard library. A couple of these are essentially just based around generics, conditional types and the <code>infer</code> keyword. Let’s take a close look at them</p>\n<h3 id=\"parameterst\" style=\"position:relative;\"><a href=\"#parameterst\" aria-label=\"parameterst permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Parameters&#x3C;T></code></h3>\n<p>This is very similar to the <code>GetFirstArg&#x3C;T></code> type we created, but more generalized</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Obtain the parameters of a function type in a tuple</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Parameters</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The typeParam passed in, must be some subtype of a call signature,</span></div><div class='line'><span style=\"color: #6E7781\">     * which can take any number of arguments of any types, and can</span></div><div class='line'><span style=\"color: #6E7781\">     * have any return type</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    &lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">         * As long as `T` matches a call signature, capture all of the args</span></div><div class='line'><span style=\"color: #6E7781\">         * (as a ...rest) parameter in a new tuple typeParam `P`</span></div><div class='line'><span style=\"color: #6E7781\">         */</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and then return the tuple</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// or return never, if the condition is not matched</span></div></code></div></pre>\n<h3 id=\"constructorparameterst\" style=\"position:relative;\"><a href=\"#constructorparameterst\" aria-label=\"constructorparameterst permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ConstructorParameters&#x3C;T></code></h3>\n<p>This is very similar to the <code>Parameters&#x3C;T></code> but for construct signatures instead of call signatures</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Obtain the parameters of a constructor function type in a tuple</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ConstructorParameters</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The typeParam passed in, must be some subtype of a construct</span></div><div class='line'><span style=\"color: #6E7781\">     * signature.</span></div><div class='line'><span style=\"color: #6E7781\">     * </span></div><div class='line'><span style=\"color: #6E7781\">     * The `abstract` keyword lets this also work with abstract classes,</span></div><div class='line'><span style=\"color: #6E7781\">     * which can potentially have an `abstract` constructor</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    &lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">         * As long as `T` matches a construct signature, capture all of the</span></div><div class='line'><span style=\"color: #6E7781\">         * args (as a ...rest) parameter in a new tuple typeParam `P`</span></div><div class='line'><span style=\"color: #6E7781\">         */</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">P</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and then return the tuple</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// or return never, if the condition is not matched</span></div></code></div></pre>\n<h3 id=\"returntypet\" style=\"position:relative;\"><a href=\"#returntypet\" aria-label=\"returntypet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ReturnType&#x3C;T></code></h3>\n<p>This utility type captures the return type of a call signature</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Obtain the return type of a function type</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ReturnType</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The typeParam passed in must be some subtype of a call signature</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    &lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">         * As long as `T` matches the call signature, capture the return type</span></div><div class='line'><span style=\"color: #6E7781\">         * in a new typeParam `R`</span></div><div class='line'><span style=\"color: #6E7781\">         */</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and then return it</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// otherwise return any</span></div></code></div></pre>\n<h3 id=\"instancetypet\" style=\"position:relative;\"><a href=\"#instancetypet\" aria-label=\"instancetypet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InstanceType&#x3C;T></code></h3>\n<p>Very similar to <code>ReturnType&#x3C;T></code>, this utility type takes a type with a construct signature, and extracts the type it instantiates. As is the case with <code>ConstructorParameters&#x3C;T></code>, we’re essentially just inserting a few <code>abstract new</code> keywords</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Obtain the return type of a constructor function type</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">InstanceType</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * The typeParam passed in must be some subtype of a construct signature</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    &lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">         * As long as `T` matches the construct signature, capture the return</span></div><div class='line'><span style=\"color: #6E7781\">         * type in a new typeParam `R`</span></div><div class='line'><span style=\"color: #6E7781\">         */</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// and then return it</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// otherwise return any</span></div></code></div></pre>\n<h3 id=\"thisparametertypet-and-omitthisparametert\" style=\"position:relative;\"><a href=\"#thisparametertypet-and-omitthisparametert\" aria-label=\"thisparametertypet and omitthisparametert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ThisParameterType&#x3C;T></code> and <code>OmitThisParameter&#x3C;T></code></h3>\n<p>As long as you know what a <code>this</code> type is, <code>ThisParameterType&#x3C;T></code> follows the last few examples so closely, that it probably doesn’t need much explanation.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Extracts the type of the 'this' parameter of a function type, or 'unknown'</span></div><div class='line'><span style=\"color: #6E7781\"> * if the function type has no 'this' parameter.</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ThisParameterType</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt; </span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">this</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">;</span></div></code></div></pre>\n<p><code>OmitThisParameter&#x3C;T></code> is another story. It involves multiple conditional types and multiple <code>infer</code>s. Let’s break it down so that we can understand how it works</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Removes the 'this' parameter from a function type.</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">OmitThisParameter</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">     * If `ThisParameterType&lt;T&gt;` evaluates to `unknown`, it means one of two</span></div><div class='line'><span style=\"color: #6E7781\">     * things:</span></div><div class='line'><span style=\"color: #6E7781\">     * (1) `T` is not a call signature type</span></div><div class='line'><span style=\"color: #6E7781\">     * (2) `T` is a call signature type, with a `this` type of `undefined`</span></div><div class='line'><span style=\"color: #6E7781\">     * </span></div><div class='line'><span style=\"color: #6E7781\">     * In either of these cases, we effectively short circuit, and return </span></div><div class='line'><span style=\"color: #6E7781\">     * the `unknown`</span></div><div class='line'><span style=\"color: #6E7781\">     */</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ThisParameterType</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">         * In this branch, we know that `T` is a call signature, with a</span></div><div class='line'><span style=\"color: #6E7781\">         * non-undefined `this` type</span></div><div class='line'><span style=\"color: #6E7781\">         * </span></div><div class='line'><span style=\"color: #6E7781\">         * Here we are inferring _both_ the tuple type representing the</span></div><div class='line'><span style=\"color: #6E7781\">         * arguments, _and_ the return type into two new typeParams, `A` and</span></div><div class='line'><span style=\"color: #6E7781\">         * `R`, respectively</span></div><div class='line'><span style=\"color: #6E7781\">         */</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">A</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">infer</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">             * Here, we are effectively reconstructing the function </span></div><div class='line'><span style=\"color: #6E7781\">             * _without_ </span></div><div class='line'><span style=\"color: #6E7781\">             * the `this` type, using both of our `infer`red typeParams, `A`</span></div><div class='line'><span style=\"color: #6E7781\">             * and `R`</span></div><div class='line'><span style=\"color: #6E7781\">             */</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\">args</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">A</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">R</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\">             * essentially this is an unreachable branch. It doesn't really</span></div><div class='line'><span style=\"color: #6E7781\">             * matter what this type is</span></div><div class='line'><span style=\"color: #6E7781\">             */</span></div><div class='line'><span style=\"color: #24292F\">            </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">;</span></div></code></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#type-inference-in-conditional-types\">Type inference in conditional types</a></p>\n<ul>\n<li><a href=\"#a-motivating-use-case\">A motivating use case</a></li>\n<li><a href=\"#the-infer-keyword\">The <code>infer</code> keyword</a></li>\n</ul>\n</li>\n<li><a href=\"#constraints-on-infer\">Constraints on <code>infer</code></a></li>\n<li>\n<p><a href=\"#utility-types-that-use-infer\">Utility types that use <code>infer</code></a></p>\n<ul>\n<li><a href=\"#parameterst\"><code>Parameters&#x3C;T></code></a></li>\n<li><a href=\"#constructorparameterst\"><code>ConstructorParameters&#x3C;T></code></a></li>\n<li><a href=\"#returntypet\"><code>ReturnType&#x3C;T></code></a></li>\n<li><a href=\"#instancetypet\"><code>InstanceType&#x3C;T></code></a></li>\n<li><a href=\"#thisparametertypet-and-omitthisparametert\"><code>ThisParameterType&#x3C;T></code> and <code>OmitThisParameter&#x3C;T></code></a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/intermediate-v2/08-infer/"},"frontmatter":{"title":"Inference with conditional types","course":"intermediate-v2","date":"October 25, 2023","description":"Conditional types are not just for switching behavior based\non comparison -- they can be used with an 'infer' keyword\nto access sub-parts of type information within a larger type\n"}}},"pageContext":{"slug":"/course/intermediate-v2/08-infer/","title":"Inference with conditional types","course":"intermediate-v2","order":8,"previous":{"fields":{"slug":"/course/intermediate-v2/07-conditional-types/"},"frontmatter":{"title":"Conditional Types","order":7,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","order":9,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}