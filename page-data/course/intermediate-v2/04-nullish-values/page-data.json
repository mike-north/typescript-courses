{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/04-nullish-values/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"f71906f2-3755-51c1-9fc0-ebb91a73adae","excerpt":"There are situations where we have to plan for, and deal with\nthe possibility that values are null or undefined. In this chapter\nwe’ll dive deep into null…","html":"<p>There are situations where we have to plan for, and deal with\nthe possibility that values are <code>null</code> or <code>undefined</code>. In this chapter\nwe’ll dive deep into null, undefined, <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#definite-assignment-assertions\">definite assignment</a>, <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing\">non-nullish\ncoalescing</a>, <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining\">optional chaining</a> and the <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\">non-null assertion operator</a>.</p>\n<p>Although <code>null</code>, <code>void</code> and <code>undefined</code> are all used to describe “nothing” or “empty”,\nthey are independent types in TypeScript. Learning to use them to your advantage, and they can be powerful tools for clearly expressing your intent as a code author.</p>\n<h2 id=\"null\" style=\"position:relative;\"><a href=\"#null\" aria-label=\"null permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>null</code></h2>\n<blockquote>\n<p><code>null</code> means: there is a value, and that value is <em>nothing</em>.\nWhile some people believe that <a href=\"https://www.youtube.com/watch?v=PSGEjv3Tqo0&#x26;t=563s\">null is not an important part of the JS language</a>, I find that it’s useful to express the concept of a “nothing” result (kind of like an empty array, but not an array).</p>\n</blockquote>\n<p>This <em>nothing</em> is very much a defined value, and is certainly a presence — not an absence — of information.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">userInfo</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  name: </span><span style=\"color: #0A3069\">\"Mike\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  email: </span><span style=\"color: #0A3069\">\"mike@example.com\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  secondaryEmail: </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">, </span><span style=\"color: #6E7781\">// user has no secondary email</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<h2 id=\"undefined\" style=\"position:relative;\"><a href=\"#undefined\" aria-label=\"undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>undefined</code></h2>\n<blockquote>\n<p><code>undefined</code> means the value isn’t available (yet?)</p>\n</blockquote>\n<p>In the example below, <code>completedAt</code> will be set <em>at some point</em>\nbut there’s a period of time when we haven’t yet set it. <code>undefined</code>\nis an unambiguous indication that there <em>may be something different there in the future</em>:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FormInProgress</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">createdAt</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Date</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">data</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FormData</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">completedAt</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Date</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">formInProgress</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FormInProgress</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  createdAt: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Date</span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">  data: </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">FormData</span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">submitForm</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  formInProgress.completedAt </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Date</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<h2 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code></h2>\n<p>We have already covered this in <a href=\"/course/fundamentals-v3/09-functions/#void\">the functions chapter</a>, but as a reminder:</p>\n<blockquote>\n<p><code>void</code> should exclusively be used to describe that a function’s return value should be ignored</p>\n</blockquote>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' style='border-bottom: solid 2px lightgrey;'>log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`console.log returns nothing.`</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(method) Console.log(...data: any[]): void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgziA2CmB00QHMAUADUkYKcgBAE6wAuAroZPmCCQBYCWYy86AlAFAD0X+f-+AHoB+IA'>Try</a></div></pre>\n<h2 id=\"non-null-assertion-operator\" style=\"position:relative;\"><a href=\"#non-null-assertion-operator\" aria-label=\"non null assertion operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null assertion operator</h2>\n<p>The non-null assertion operator (<code>!.</code>) is used to cast away the possibility\nthat a value might be <code>null</code> or <code>undefined</code>.</p>\n<p>Keep in mind that the value could still be <code>null</code> or <code>undefined</code>, this\noperator just tells TypeScript to ignore that possibility.</p>\n<p>If the value <em>does</em> turn out to be missing, you will get the familiar <code>cannot call foo on undefined</code> family of errors at runtime:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GroceryCart = {&#10;    fruits?: {&#10;        name: string;&#10;        qty: number;&#10;    }[];&#10;    vegetables?: {&#10;        name: string;&#10;        qty: number;&#10;    }[];&#10;}' >GroceryCart</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) fruits?: {&#10;    name: string;&#10;    qty: number;&#10;}[] | undefined' >fruits</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) qty: number' >qty</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> }[]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) vegetables?: {&#10;    name: string;&#10;    qty: number;&#10;}[] | undefined' >vegetables</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) qty: number' >qty</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> }[]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const cart: GroceryCart' >cart</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type GroceryCart = {&#10;    fruits?: {&#10;        name: string;&#10;        qty: number;&#10;    }[];&#10;    vegetables?: {&#10;        name: string;&#10;        qty: number;&#10;    }[];&#10;}' >GroceryCart</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='const cart: GroceryCart' >cart</data-lsp>.<data-lsp lsp='(property) fruits?: {&#10;    name: string;&#10;    qty: number;&#10;}[] | undefined' style='border-bottom: solid 2px lightgrey;'>fruits</data-lsp></data-err>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;{ name: string; qty: number; }>.push(...items: {&#10;    name: string;&#10;    qty: number;&#10;}[]): number' >push</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"kumkuat\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) qty: number' >qty</data-lsp>: </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> })</span></div><span class=\"error\"><span>'cart.fruits' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'cart.fruits' is possibly 'undefined'.</span><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(property) fruits?: {\n    name: string;\n    qty: number;\n}[] | undefined</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const cart: GroceryCart' >cart</data-lsp>.<data-lsp lsp='(property) fruits?: {&#10;    name: string;&#10;    qty: number;&#10;}[] | undefined' >fruits</data-lsp></span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;{ name: string; qty: number; }>.push(...items: {&#10;    name: string;&#10;    qty: number;&#10;}[]): number' >push</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"kumkuat\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) qty: number' >qty</data-lsp>: </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> })</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMbQEYAOABgBYCAoAFwE8AHSUAcXgGMZqBhAQ2ktAF5QAb3KhQAM2gBXAJaVEAflRDQAOy4BbSKkSVoM1QHMA3KACONVKqkaARjFABfANoBdUaABukQ5EpdbABtIRWU1TW1QXX0jUwtqKxt7aCc3ckdychY4VV1QFh5KVGY4NmhOQoFhDKzCgDpJWXk62ilEAAsAChV1LVQAIgBrG2GuSn6AGnNLfCcASnIQMVAAPQVa3gbpOUQAQha2rp6IgeGNUfGp+NQ8eaA'>Try</a></div></pre>\n<p>I recommend against using this in your app or library code, but\nif your test infrastructure represents a <code>throw</code> as a test failure (most should)\nthis is a <em>great</em> type guard to use in your test suite.</p>\n<p>In the above situation, if <code>fruits</code> was expected to be present and it’s not,\nthat’s a very reasonable test failure <img class=\"emoji-icon\" alt=\"emoji-tada\" data-icon=\"emoji-tada\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-tada\"></p>\n<h2 id=\"definite-assignment-assertion\" style=\"position:relative;\"><a href=\"#definite-assignment-assertion\" aria-label=\"definite assignment assertion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definite assignment assertion</h2>\n<p>The definite assignment <code>!:</code> assertion is used to suppress TypeScript’s\nobjections about a class field being used, when it can’t be proven<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>\nthat it was initialized.</p>\n<p>Let’s look at the following example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class ThingWithAsyncSetup' >ThingWithAsyncSetup</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ThingWithAsyncSetup.setupPromise: Promise&lt;any>' >setupPromise</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; </span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-err><data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><span class=\"error\"><span>Property 'isSetup' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'isSetup' has no initializer and is not definitely assigned in the constructor.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.setupPromise: Promise&lt;any>' >setupPromise</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&lt;unknown>' >Promise</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) resolve: (value: unknown) => void' >resolve</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ThingWithAsyncSetup.doSetup(resolve: (value: unknown) => void): Promise&lt;void>' >doSetup</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) resolve: (value: unknown) => void' >resolve</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">    }).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;unknown>.then&lt;void, any>(onfulfilled?: ((value: unknown) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => any) | null | undefined): Promise&lt;any>' >then</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">    })</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ThingWithAsyncSetup.doSetup(resolve: (value: unknown) => void): Promise&lt;void>' >doSetup</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) resolve: (value: unknown) => void' >resolve</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) value: unknown' >value</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">unknown</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// some async stuff</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUCBAHZwCSAtgA4A2AlgMa0AuAgkQJ6oBmAhtYpDz1qPRIlAAVABa0iAcwDqzKS0Tsi9AMqQmAV0qgA3nlCgBeygAV45WgNTW4tgQB4eHAHygToO9ouoAEZwcNSQ7ng+9HBEiEzQuvRMCAAUAJRGPqZMMogAdOb6js6QoAC8oESQAO6gxXaQKSnQkIihAG6QGWVexqb9oDl2eX46+uWgvPyCA6YtetBEg7l5ACZw-vrNrR1dWaAAvml5OZBETd29+9kroxYT8boz-Uc+B5GmlNC07TxMpaJ1PRQOtNpRtm1qJ1UClftQnqhdEQANYkapES6gdpwWirDJ9fqENrkAFqDRmPRcLhvPAHIA'>Try</a></div></pre>\n<p>TypeScript is warning me that someone could create an instance of this class\nand immediately attempt to access <code>.isSetup</code> before it gets a boolean value</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let myThing: ThingWithAsyncSetup' >myThing</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor ThingWithAsyncSetup(): ThingWithAsyncSetup' >ThingWithAsyncSetup</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let myThing: ThingWithAsyncSetup' >myThing</data-lsp>.<data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' style='border-bottom: solid 2px lightgrey;'>isSetup</data-lsp> </span><span style=\"color: #6E7781\">// what if this isn&apos;t assigned yet?</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) ThingWithAsyncSetup.isSetup: boolean</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUCBAHZwCSAtgA4A2AlgMa0AuAgkQJ6oBmAhtYpDz1qPRIlAAVABa0iAcwDqzKS0Tsi9AMqQmAV0qgA3nlCgBeygAV45WgNTW4tgQB4eHAHyhCtOSWiQoExSgW6eoFwIoCQA7iagdtoWqABGcHDUkO548fRwRIhM0Lr0TAgAFACURvGmwXYAdOb6js6BALzRkDGgrXaQ5eUBiBkAbpDV7V7GprNBMogNiTr6oJ28-IJzpgF60ETzjQAmcEn6VbWgAL6VDcGQRIOT05d1C0uIZwadRbpbszd4lccqZKNBaKMeExAqJ1PRQCcvlUanNCCNyDC1BozHouFwgXhgSAwABaMn0XRMMkkvCZJigcjsaSyORrLo9ZnyJTBVRwpGVPCMzlyD5fbxgGJSKEJLiHcR2IgAcnpokQviIkCOoHYOgA-AQwNtQAA9XVAA'>Try</a></div></pre>\n<p>What I know (that the compiler doesn’t) is that the function passed into the\n<code>Promise</code> constructor is invoked <em>synchronously</em>, meaning by the time we\nreceive our instance of <code>ThingWithAsyncSetup</code>, the <code>isSetup</code> property will\nmost certainly have a value of <code>false</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class ThingWithAsyncSetup' >ThingWithAsyncSetup</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ThingWithAsyncSetup.setupPromise: Promise&lt;any>' >setupPromise</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #6E7781\">// ignore the &lt;any&gt; for now</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">() {</span></div><div class='line dim'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.setupPromise: Promise&lt;any>' >setupPromise</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&lt;unknown>' >Promise</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) resolve: (value: unknown) => void' >resolve</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ThingWithAsyncSetup.doSetup(): Promise&lt;void>' >doSetup</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line dim'><span style=\"color: #24292F\">    }).</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Promise&lt;unknown>.then&lt;void, any>(onfulfilled?: ((value: unknown) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => any) | null | undefined): Promise&lt;any>' >then</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) ThingWithAsyncSetup.isSetup: boolean' >isSetup</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span></div><div class='line dim'><span style=\"color: #24292F\">    })</span></div><div class='line dim'><span style=\"color: #24292F\">  }</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) ThingWithAsyncSetup.doSetup(): Promise&lt;void>' >doSetup</data-lsp></span><span style=\"color: #24292F\">() { }</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEAqAWBLAdgcwOqIC7wIIQE9lgBlAUywFcAHaAbwChpoIKaAFAJwHsBbRVgC5oXPgLIAeMMgIA+aAHoF0RKmTdOZaDi1SZ8gGYbo6gO5MVEclWoBCYQCNu3EGWkMLwbsghZOlYCwNAAoASnoLZhwBADpWG1F+VmgAXhMyUxEeJLJg4M0IFwA3MnCU+UZmKu0kCBiBaxpU6AMwEFZIqs0qTmQa2IATbkbqMM6AX1CYnWQ8sorOqNr6qzZaNL9KMgnQi3GPZmpORCKwLC1IImBoIZGw+mh98aA'>Try</a></div></pre>\n<p>This is a good example of a totally appropriate use of the definite assignment\noperator, where <strong>I as the code author have some extra context that the compiler does not</strong>.</p>\n<h2 id=\"optional-chaining-\" style=\"position:relative;\"><a href=\"#optional-chaining-\" aria-label=\"optional chaining  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional chaining <code>?.</code></h2>\n<p>A less hazardous tool, relative to the non-null assertion operator is <em>optional chaining</em>.</p>\n<p>Let’s say we have a big JSON object with a structure like this</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">typescript</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Payment</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">amount</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">createdAt</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Date</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Invoice</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">due</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">payments</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Payment</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">lastPayment</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Payment</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">createdAt</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Date</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Customer</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">lastInvoice</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Invoice</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">invoices</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Invoice</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ResponseData</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">customers</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Customer</span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">customer</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Customer</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>So, we can have one or many <code>Customer</code>s, each of which <em>may</em> have one or more <code>Invoice</code>s, each of which may have one or more <code>Payment</code>s.</p>\n<p>Now let’s say we want to render information on a dashboard, for the customer’s most recent payment on any invoice (or leave blank if they haven’t made any payments).</p>\n<p>There’s a whole lot of presence checking we’d need to perform!</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getLastPayment(data: ResponseData): number | undefined' >getLastPayment</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: ResponseData' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ResponseData = {&#10;    customers?: Customer[];&#10;    customer?: Customer;&#10;}' >ResponseData</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> {</span><span style=\"color: #0550AE\"><data-lsp lsp='const customer: Customer | undefined' >customer</data-lsp></span><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) data: ResponseData' >data</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='const customer: Customer | undefined' >customer</data-lsp>) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\"><data-lsp lsp='const lastInvoice: Invoice | undefined' >lastInvoice</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const customer: Customer' >customer</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='const lastInvoice: Invoice | undefined' >lastInvoice</data-lsp>) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\"><data-lsp lsp='const lastPayment: Payment | undefined' >lastPayment</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const lastInvoice: Invoice' >lastInvoice</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\"><data-lsp lsp='const lastPayment: Payment | undefined' >lastPayment</data-lsp>) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const lastPayment: Payment' >lastPayment</data-lsp>.<data-lsp lsp='(property) amount: number' >amount</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACghiAthAdsKBeKBvAUFKASwBMAuKAZ2ACdCUBzfKORAewFc1yV3EAjCNSYBjahDjAIxAILByAEQkRcAX1yhIUAJIoAbq0LDoWPARLkqtBk2LsI3XgKEEwCZGgrl4SVMADaALpMADZwVN7uwAD8Xm6+ImJKMnJQipKquOrg0ADC7FSsyNSYOFBM5pQ0dPQANCFhwDr6hhAx2noGRuUdLZ7tzUaBqgDcmRrQAEoQFGCsKBQQaXAlplDC+cCFghRteQVFQwTr+4K7G1tCagD0N1AAtA-rwA93mQBmnMLAhHNQ9BDAAAyDQivgAFMQJHByFMZnMFksAJQOfiCKAAHygnGIEDedCkOBE8PQ2GOmyKKhKkOAcFGZjeUDBAEIyRdEVAxMB2NQUKMifMSVBQlQmp1oJSsKyinSiAzmcLGj0jOzOdzeZkjsTSgrQWgoBKhQ1RS0ZYQ5UydXE0CqAWq+QRVTzDeErcAAHQsDhoUYqIA'>Try</a></div></pre>\n<p>All this, just to sort of drill down and find something if it’s there. Optional chaining gives us a more concise way to do this</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function getLastPayment(data: ResponseData): number | undefined' >getLastPayment</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) data: ResponseData' >data</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ResponseData = {&#10;    customers?: Customer[];&#10;    customer?: Customer;&#10;}' >ResponseData</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) data: ResponseData' >data</data-lsp>?.<data-lsp lsp='(property) customer?: Customer | undefined' >customer</data-lsp>?.<data-lsp lsp='(property) lastInvoice?: Invoice | undefined' >lastInvoice</data-lsp>?.<data-lsp lsp='(property) lastPayment?: Payment | undefined' >lastPayment</data-lsp>?.<data-lsp lsp='(property) amount: number | undefined' >amount</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACghiAthAdsKBeKBvAUFKASwBMAuKAZ2ACdCUBzfKORAewFc1yV3EAjCNSYBjahDjAIxAILByAEQkRcAX1yhIUAJIoAbq0LDoWPARLkqtBk2LsI3XgKEEwCZGgrl4SVMADaALpMADZwVN7uwAD8Xm6+ImJKMnJQipKquOrg0ADC7FSsyNSYOFBM5pQ0dPQANCFhwDr6hhAx2noGRuUdLZ7tzUaBqgDcmRrQAEoQFGCsKBQQaXAlplDC+cCFghRteQVFQwTr+4K7G1tCagD0N1AAtA-rwA93mQBmnMLAhHNQ9BDAAAyDQivgAFMQJHByFMZnMFksAJQOfiCKAAHygnGIEDedCkOCYYmA7GoKCgkOAcCiADpjpsirTQlQmp1WjTmcBQWhaSwOGhVEA'>Try</a></div></pre>\n<p>Behind the scenes, what’s happening here is very similar to the more lengthy version of this function that we wrote above. Here’s the compiled output (target: <code>ES2017</code>)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">getLastPayment</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">data</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> _a, _b, _c;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (_c </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (_b </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (_a </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> data </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> data </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> data.customer) </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> _a </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> _a.lastInvoice) </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> _b </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> _b.lastPayment) </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> _c </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">void</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> _c.amount;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlATABgIwDsAUCBAM4AWA9gO7oC2AlpMZAJ4AOioACtOwaIAdpFABeUAG9ioUEwAmacpFhNh8WaGgNqAV1FphehgCNEsLQGNYiaJEQKAgqlAARe4mIBfNlx4AksIAbtRMVjySMnKKyqrqmnIKeohGJuaWcpwCQqLkaPyCIpAA2gC6WgA20CqFuZAA-AU5xda2ns6uHg4+xH7coADCeirUQrAS0qBasaAqahoANFU1kEGh4YhNoOthETMhe4j5O4eb5T4A3H0cAwBKx5zUwuSI3dCT0aBWI5BjFuRtsNRuMLnIfiCLEDfv9LL4QGAALTIn6QZGIvoAMwMVkgTGeoCQkAAMqs6sUABQKezQNAPchPF5vGkASjSZgsoAAPqADApEJj1I5pFpbJA9LBhKBqTAGgA6CF-cby6oqXabFVklqieU6fSiHxAA'>Try</a></div></pre>\n<p>If any step of our “chain” ends up being <code>undefined</code>, the whole expression ends up evaluating to <code>undefined</code></p>\n<h2 id=\"nullish-coalescing-\" style=\"position:relative;\"><a href=\"#nullish-coalescing-\" aria-label=\"nullish coalescing  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullish coalescing <code>??</code></h2>\n<p>Similar to the optional chaining operator, nullish coalescing allows for succinct handling of the possibility that something might be undesirably <code>null</code> or <code>undefined</code>.</p>\n<p>Let’s imagine a scenario where we’re building a video player, and have the following requirements</p>\n<ul>\n<li>The range of allowed volume is <code>(0 - 100)</code> in increments of 25, where <code>0</code> indicates <code>\"mute\"</code></li>\n<li>Totally new users should start with a default volume of <code>50</code></li>\n<li>When users adjust their volume, we save it in a <code>config</code> object (imagine this is persisted somewhere) and restore their previous volume when they leave and come back</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PlayerConfig = {&#10;    volume?: 0 | 25 | 50 | 75 | 100;&#10;}' >PlayerConfig</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100 | undefined' >volume</data-lsp></span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">25</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">50</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">75</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">100</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function initializePlayer(config: PlayerConfig): void' >initializePlayer</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) config: PlayerConfig' >config</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PlayerConfig = {&#10;    volume?: 0 | 25 | 50 | 75 | 100;&#10;}' >PlayerConfig</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const vol: 0 | 25 | 50 | 75 | 100' >vol</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100 | undefined' >volume</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;undefined&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">50</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100' >volume</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='function setVolume(v: number): void' >setVolume</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const vol: 0 | 25 | 50 | 75 | 100' >vol</data-lsp>);</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZwKZQGpwDYgLaoAUAbgFyJj4BGqATgJTnFwwAmiA3gL4BQA9AMQBaERBBQRQnjygBPAA6pEABWwBDWXQDCCYDADmiALyceiRM1wEA-OQAMiAD6IATAFYniNw+cB2D84AjHZ2PLw8oJCwCIgwYDCwatgwAF6oqhp0hBC6BuQZmrQ6YHr6jBYs7BxmiDlgyFAV2MaIcopwwLW5+gB0lvhKRkOIAOTgrKh6YKisI4jWXg7kdaV9OAM1aJjrBCQ49ADcYUA'>Try</a></div></pre>\n<p>This line is where the interesting stuff is happening, and readability is not great</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const vol: 0 | 25 | 50 | 75 | 100' >vol</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100 | undefined' >volume</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;undefined&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">50</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='const config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100' >volume</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZwKZQGpwDYgLaoAUAbgFyJj4BGqATgJTnFwwAmiA3gL4BQPUATwAOqRAAVsAQwF0AwgmAwA5ogC8nHokTNcBAPzkADIgA+iAEwBWU4kvGzAdmtmAjIcM9ePCAmRREPmCKSuQS0nIKymqcvAD08YgAtMkQIFDJid6+-jrRgiJwwAGRSgB0OviiqtWIAOTgrKiKYKistYh6tsbkgcHlOJVAA'>Try</a></div></pre>\n<p>At first glance, we might want to try the logical OR operator <code>||</code> since that will handle the <code>undefined</code> case</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const vol: 25 | 50 | 75 | 100' style='border-bottom: solid 2px lightgrey;'>vol</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100 | undefined' >volume</data-lsp> </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">50</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const vol: 25 | 50 | 75 | 100</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZwKZQGpwDYgLaoAUAbgFyJj4BGqATgJTnFwwAmiA3gL4BQPUATwAOqRAAVsAQwF0AwgmAwA5ogC8nHokTNcBAPzkADIgA+iAEwBWU4kvGzAdmtmAjIcM9ePCAmRREPmCKSuQS0nIKymqcvAD08YgAtMkQIFDJid6+-jrRgcEAdDr4oiZmdjwJWloAenpAA'>Try</a></div></pre>\n<p>Oops! This is more readable, but our “mute” value <code>0</code> has disappeared. Thankfully, we can do the same thing with our nullish coalescing operator <code>??</code>, which does not perform a truthy/falsy check, but a specific check for <code>null</code> and <code>undefined</code>, and we’ll get the right result</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const vol: 0 | 25 | 50 | 75 | 100' style='border-bottom: solid 2px lightgrey;'>vol</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const config: PlayerConfig' >config</data-lsp>.<data-lsp lsp='(property) volume?: 0 | 25 | 50 | 75 | 100 | undefined' >volume</data-lsp> </span><span style=\"color: #CF222E\">??</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">50</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const vol: 0 | 25 | 50 | 75 | 100</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZwKZQGpwDYgLaoAUAbgFyJj4BGqATgJTnFwwAmiA3gL4BQPUATwAOqRAAVsAQwF0AwgmAwA5ogC8nHokTNcBAPzkADIgA+iAEwBWU4kvGzAdmtmAjIcM9ePCAmRREPmCKSuQS0nIKymqcvAD08YgAtMkQIFDJid6+-jrRgcEAdDr4onp6th4JWloAenpAA'>Try</a></div></pre>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Where “proven” means, “the compiler can’t convince itself.”</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#null\"><code>null</code></a></li>\n<li><a href=\"#undefined\"><code>undefined</code></a></li>\n<li><a href=\"#void\"><code>void</code></a></li>\n<li><a href=\"#non-null-assertion-operator\">Non-null assertion operator</a></li>\n<li><a href=\"#definite-assignment-assertion\">Definite assignment assertion</a></li>\n<li><a href=\"#optional-chaining-\">Optional chaining <code>?.</code></a></li>\n<li><a href=\"#nullish-coalescing-\">Nullish coalescing <code>??</code></a></li>\n</ul>","fields":{"slug":"/course/intermediate-v2/04-nullish-values/"},"frontmatter":{"title":"Nullish values","course":"intermediate-v2","date":"October 23, 2023","description":"There are situations where we have to plan for, and deal with\nthe possibility that values are null or undefined. In this chapter,\nwe will dive deep into null, undefined, definite assignment,\nand the non-null assertion operator.\n"}}},"pageContext":{"slug":"/course/intermediate-v2/04-nullish-values/","title":"Nullish values","course":"intermediate-v2","order":4,"previous":{"fields":{"slug":"/course/intermediate-v2/03-top-and-bottom-types/"},"frontmatter":{"title":"Top and bottom types","order":3,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/05-modules/"},"frontmatter":{"title":"Modules & CJS interop","order":5,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}